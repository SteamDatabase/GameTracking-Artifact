 A __bss_start
 A _edata
 A _end
 AssertMsg_ConditionFailed
 B glslang::PoolIndex
 B glslang::ThreadInitializeIndex
 B spvtools::opt::SENode::NumberOfNodes
 B yydebug
 CBufferString::AppendConcat(int, char const* const*, int const*, bool)
 CBufferString::AppendFormat(char const*, ...)
 CBufferString::ComposeFileName(char const*, char const*, char)
 CBufferString::Concat(char const*, char const*, ...)
 CBufferString::ExtendPath(char const*, char)
 CBufferString::ExtractFilePath(char const*)
 CBufferString::ExtractFirstDir(char const*)
 CBufferString::FixSlashes(char)
 CBufferString::FixupPathName()
 CBufferString::Insert(int, char const*, int, bool)
 CBufferString::MakeAbsolutePath(char const*, char const*)
 CBufferString::MakeRelativePath(char const*, char const*)
 CBufferString::Purge(int)
 CBufferString::Relinquish(CBufferString::EAllocationOption_t)
 CBufferString::RemoveAt(int, int)
 CBufferString::RemoveDotSlashes(char)
 CBufferString::RemoveFirstDir(CBufferString*)
 CBufferString::SetExtension(char const*)
 CBufferString::SetPtr(char*, int, int, bool, bool)
 CBufferString::ShortenPath()
 CBufferString::StripExtension()
 CBufferString::StripTrailingSlash()
 CBufferString::Swap(CBufferString&)
 CBufferString::ToLowerFast(int)
 CMemAllocSystemInitialize
 COneTimeEvent::Allocate()
 CThreadEvent::CThreadEvent(bool)
 CThreadEvent::Set()
 CThreadFastMutex::Lock(unsigned long long, unsigned int) volatile
 CThreadMultiWaitEvent::CThreadMultiWaitEvent(bool)
 CThreadMultiWaitEvent::Set()
 CThreadMultiWaitEvent::~CThreadMultiWaitEvent()
 CThreadRWLock::LockForWrite()
 CThreadRWLock::UnlockWrite()
 CThreadRWLock::WaitForRead()
 CThreadRWLock_FastRead::CThreadRWLock_FastRead()
 CThreadRWLock_FastRead::HandleFirstWriteLockTransition()
 CThreadRWLock_FastRead::UnlockReadAccounting(unsigned int)
 CThreadRWLock_FastRead::UnlockRead_LockForWrite()
 CThreadRWLock_FastRead::UnlockWrite_LockForRead()
 CThreadRWLock_FastRead::WaitForReadLockTransition(unsigned int)
 CThreadSemaphore::Release(int, int*)
 CThreadSemaphore::~CThreadSemaphore()
 CThreadSpinRWLock::LockForRead()
 CThreadSpinRWLock::SpinLockForWrite(unsigned long long)
 CThreadSpinRWLock::UnlockRead()
 CThreadSpinRWLock::UnlockWrite()
 CThreadSyncObject::Wait(unsigned int)
 CThreadSyncObject::WaitImpl(unsigned int)
 CThreadSyncObject::~CThreadSyncObject()
 CVProfNode::EnterScope()
 CVProfNode::ExitScope()
 CVProfNode::GetSubNode(char const*, int, char const*, int)
 CommandLine
 ConMsg(char const*, ...)
 CreateSimpleThread
 D Etc::Block4x4Encoding_ETC1::s_aafCwTable
 D Etc::Block4x4Encoding_R11::s_aafModifierTable
 D Etc::Block4x4Encoding_RGB8::s_afTHDistanceTable
 D Etc::Block4x4Encoding_RGB8A1::s_aafCwOpaqueUnsetTable
 D Etc::Block4x4Encoding_RGBA8::s_aafModifierTable
 D glslang::PureOperatorBuiltins
 D glslang::binop
 D glslang::unop
 D spvtools::opt::LoopPeelingPass::code_grow_threshold_
 DevMsg
 DevMsg(char const*, ...)
 DevWarning(char const*, ...)
 EarlyInit_Tier0
 GetCPUInformation
 HangWatchdogInternal_BeginScope
 HangWatchdogInternal_EndScope
 KeyValuesSystem
 LOG_GENERAL
 LoggingSystem_IsChannelEnabled
 LoggingSystem_IsChannelEnabled(int, LoggingVerbosity_t)
 LoggingSystem_Log
 LoggingSystem_Log(int, LoggingSeverity_t, Color, char const*, ...)
 LoggingSystem_Log(int, LoggingSeverity_t, LeafCodeInfo_t const&, char const*, ...)
 LoggingSystem_RegisterLoggingChannel
 MemAlloc_AllocFunc
 MemAlloc_FreeFunc
 Msg
 Plat_DebugPrint
 Plat_ExitProcess
 Plat_FloatTime
 Plat_GetCPUFrequency
 Plat_GetClockStart
 Plat_GetDefaultMonitorIndex
 Plat_GetDesktopResolution
 Plat_GetEnv
 Plat_GetModuleFilename
 Plat_GetMonitorResolution
 Plat_GetOSType
 Plat_GetPlatformError
 Plat_GetThreadIndex
 Plat_GetWindowClientSize
 Plat_GetWindowContentsScale
 Plat_GetWindowMonitorIndex
 Plat_GlobalMemoryStatus
 Plat_IsHighDPI
 Plat_IsInDebugSessionRaw
 Plat_IsWindowMinimized
 Plat_MessageBox
 Plat_NeedsLowFragmentation
 Plat_OsSpecificHandleToPlatWindow
 Plat_ReconfigureWindow
 Plat_RelativeTicks
 Plat_RequireSDL
 Plat_ShouldCollectMiniDumpsForFatalErrors
 Plat_TicksAfterSecsF
 Plat_UUIDFromString
 Plat_UUIDToString
 Plat_VirtualAlloc
 Plat_VirtualFree
 Plat_WindowToOsSpecificHandle
 R Etc::Block4x4::s_auiPixelOrderHScan
 R Etc::Block4x4Encoding::CHROMA_BLUE_WEIGHT
 R Etc::Block4x4Encoding::LUMA_WEIGHT
 R Etc::Block4x4Encoding_ETC1::s_auiBottomPixelMapping
 R Etc::Block4x4Encoding_ETC1::s_auiLeftPixelMapping
 R Etc::Block4x4Encoding_ETC1::s_auiPixelOrderFlip0
 R Etc::Block4x4Encoding_ETC1::s_auiPixelOrderFlip1
 R Etc::Block4x4Encoding_ETC1::s_auiPixelOrderHScan
 R Etc::Block4x4Encoding_ETC1::s_auiRightPixelMapping
 R Etc::Block4x4Encoding_ETC1::s_auiTopPixelMapping
 R glslang::TAllocation::guardBlockBeginVal
 R glslang::TAllocation::guardBlockEndVal
 R glslang::TAllocation::guardBlockSize
 R glslang::TAllocation::userDataFill
 R libspirv::kUnknownType
 RandomFloat
 RandomSeed
 RegisterStringToken
 ReleaseThreadHandle
 SeriousWarning
 T BinaryProperties_GetValue
 T ConstructBindings()
 T ConstructCompiler(EShLanguage, int)
 T ConstructLinker(EShExecutable, int)
 T ConstructUniformMap()
 T CreateInterface
 T DeleteBindingList(TShHandleBase*)
 T DeleteCompiler(TCompiler*)
 T DeleteLinker(TShHandleBase*)
 T DeleteUniformMap(TUniformMap*)
 T Etc::Block4x4::Block4x4()
 T Etc::Block4x4::GetEncodingModeName()
 T Etc::Block4x4::InitFromEtcEncodingBits(Etc::Image::Format, unsigned int, unsigned int, unsigned char*, Etc::Image*, Etc::ErrorMetric)
 T Etc::Block4x4::InitFromSource(Etc::Image*, unsigned int, unsigned int, unsigned char*, Etc::ErrorMetric)
 T Etc::Block4x4::SetSourcePixels()
 T Etc::Block4x4::~Block4x4()
 T Etc::Block4x4Encoding::Block4x4Encoding()
 T Etc::Block4x4Encoding::CalcBlockError()
 T Etc::Block4x4Encoding::CalcPixelError(Etc::ColorFloatRGBA, float, Etc::ColorFloatRGBA)
 T Etc::Block4x4Encoding::Init(Etc::Block4x4*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_ETC1::Block4x4Encoding_ETC1()
 T Etc::Block4x4Encoding_ETC1::CalculateHalfOfTheSelectors(unsigned int, unsigned int const*)
 T Etc::Block4x4Encoding_ETC1::CalculateMostLikelyFlip()
 T Etc::Block4x4Encoding_ETC1::CalculateSelectors()
 T Etc::Block4x4Encoding_ETC1::CalculateSourceAverages()
 T Etc::Block4x4Encoding_ETC1::Decode()
 T Etc::Block4x4Encoding_ETC1::InitFromEncodingBits(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_ETC1::InitFromEncodingBits_Selectors()
 T Etc::Block4x4Encoding_ETC1::InitFromSource(Etc::Block4x4*, Etc::ColorFloatRGBA*, unsigned char*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_ETC1::PerformFirstIteration()
 T Etc::Block4x4Encoding_ETC1::PerformIteration(float)
 T Etc::Block4x4Encoding_ETC1::SetEncodingBits()
 T Etc::Block4x4Encoding_ETC1::SetEncodingBits_Selectors()
 T Etc::Block4x4Encoding_ETC1::TryDegenerates1()
 T Etc::Block4x4Encoding_ETC1::TryDegenerates2()
 T Etc::Block4x4Encoding_ETC1::TryDegenerates3()
 T Etc::Block4x4Encoding_ETC1::TryDegenerates4()
 T Etc::Block4x4Encoding_ETC1::TryDifferential(bool, unsigned int, int, int)
 T Etc::Block4x4Encoding_ETC1::TryDifferentialHalf(Etc::DifferentialTrys::Half*)
 T Etc::Block4x4Encoding_ETC1::TryIndividual(bool, unsigned int)
 T Etc::Block4x4Encoding_ETC1::TryIndividualHalf(Etc::IndividualTrys::Half*)
 T Etc::Block4x4Encoding_ETC1::~Block4x4Encoding_ETC1()
 T Etc::Block4x4Encoding_R11::Block4x4Encoding_R11()
 T Etc::Block4x4Encoding_R11::CalculateR11(unsigned int, float, float)
 T Etc::Block4x4Encoding_R11::InitFromEncodingBits(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_R11::InitFromSource(Etc::Block4x4*, Etc::ColorFloatRGBA*, unsigned char*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_R11::PerformIteration(float)
 T Etc::Block4x4Encoding_R11::SetEncodingBits()
 T Etc::Block4x4Encoding_R11::~Block4x4Encoding_R11()
 T Etc::Block4x4Encoding_RG11::Block4x4Encoding_RG11()
 T Etc::Block4x4Encoding_RG11::CalculateG11(unsigned int, float, float)
 T Etc::Block4x4Encoding_RG11::InitFromEncodingBits(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RG11::InitFromSource(Etc::Block4x4*, Etc::ColorFloatRGBA*, unsigned char*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RG11::PerformIteration(float)
 T Etc::Block4x4Encoding_RG11::SetEncodingBits()
 T Etc::Block4x4Encoding_RG11::~Block4x4Encoding_RG11()
 T Etc::Block4x4Encoding_RGB8::Block4x4Encoding_RGB8()
 T Etc::Block4x4Encoding_RGB8::CalculateBaseColorsForTAndH()
 T Etc::Block4x4Encoding_RGB8::CalculatePlanarCornerColors()
 T Etc::Block4x4Encoding_RGB8::ColorRegression(Etc::ColorFloatRGBA*, unsigned int, Etc::ColorFloatRGBA*, Etc::ColorFloatRGBA*)
 T Etc::Block4x4Encoding_RGB8::DecodePixels_H()
 T Etc::Block4x4Encoding_RGB8::DecodePixels_Planar()
 T Etc::Block4x4Encoding_RGB8::DecodePixels_T()
 T Etc::Block4x4Encoding_RGB8::InitFromEncodingBits(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RGB8::InitFromEncodingBits_H()
 T Etc::Block4x4Encoding_RGB8::InitFromEncodingBits_Planar()
 T Etc::Block4x4Encoding_RGB8::InitFromEncodingBits_T()
 T Etc::Block4x4Encoding_RGB8::PerformIteration(float)
 T Etc::Block4x4Encoding_RGB8::SetEncodingBits()
 T Etc::Block4x4Encoding_RGB8::SetEncodingBits_H()
 T Etc::Block4x4Encoding_RGB8::SetEncodingBits_Planar()
 T Etc::Block4x4Encoding_RGB8::SetEncodingBits_T()
 T Etc::Block4x4Encoding_RGB8::TryH(unsigned int)
 T Etc::Block4x4Encoding_RGB8::TryH_BestSelectorCombination()
 T Etc::Block4x4Encoding_RGB8::TryPlanar(unsigned int)
 T Etc::Block4x4Encoding_RGB8::TryT(unsigned int)
 T Etc::Block4x4Encoding_RGB8::TryTAndH(unsigned int)
 T Etc::Block4x4Encoding_RGB8::TryT_BestSelectorCombination()
 T Etc::Block4x4Encoding_RGB8::TwiddlePlanar()
 T Etc::Block4x4Encoding_RGB8::TwiddlePlanarB()
 T Etc::Block4x4Encoding_RGB8::TwiddlePlanarG()
 T Etc::Block4x4Encoding_RGB8::TwiddlePlanarR()
 T Etc::Block4x4Encoding_RGB8::~Block4x4Encoding_RGB8()
 T Etc::Block4x4Encoding_RGB8A1::Block4x4Encoding_RGB8A1()
 T Etc::Block4x4Encoding_RGB8A1::DecodePixels_H()
 T Etc::Block4x4Encoding_RGB8A1::DecodePixels_T()
 T Etc::Block4x4Encoding_RGB8A1::Decode_ETC1()
 T Etc::Block4x4Encoding_RGB8A1::InitFromEncodingBits(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RGB8A1::InitFromEncodingBits_ETC1(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RGB8A1::InitFromEncodingBits_H()
 T Etc::Block4x4Encoding_RGB8A1::InitFromEncodingBits_T()
 T Etc::Block4x4Encoding_RGB8A1::InitFromSource(Etc::Block4x4*, Etc::ColorFloatRGBA*, unsigned char*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RGB8A1::PerformFirstIteration()
 T Etc::Block4x4Encoding_RGB8A1::PerformIteration(float)
 T Etc::Block4x4Encoding_RGB8A1::SetEncodingBits()
 T Etc::Block4x4Encoding_RGB8A1::SetEncodingBits_ETC1()
 T Etc::Block4x4Encoding_RGB8A1::SetEncodingBits_H()
 T Etc::Block4x4Encoding_RGB8A1::SetEncodingBits_T()
 T Etc::Block4x4Encoding_RGB8A1::TryDegenerates1()
 T Etc::Block4x4Encoding_RGB8A1::TryDegenerates2()
 T Etc::Block4x4Encoding_RGB8A1::TryDegenerates3()
 T Etc::Block4x4Encoding_RGB8A1::TryDegenerates4()
 T Etc::Block4x4Encoding_RGB8A1::TryDifferential(bool, unsigned int, int, int)
 T Etc::Block4x4Encoding_RGB8A1::TryDifferentialHalf(Etc::DifferentialTrys::Half*)
 T Etc::Block4x4Encoding_RGB8A1::TryH(unsigned int)
 T Etc::Block4x4Encoding_RGB8A1::TryH_BestSelectorCombination()
 T Etc::Block4x4Encoding_RGB8A1::TryT(unsigned int)
 T Etc::Block4x4Encoding_RGB8A1::TryT_BestSelectorCombination()
 T Etc::Block4x4Encoding_RGB8A1::~Block4x4Encoding_RGB8A1()
 T Etc::Block4x4Encoding_RGB8A1_Opaque::PerformFirstIteration()
 T Etc::Block4x4Encoding_RGB8A1_Opaque::PerformIteration(float)
 T Etc::Block4x4Encoding_RGB8A1_Transparent::PerformIteration(float)
 T Etc::Block4x4Encoding_RGBA8::Block4x4Encoding_RGBA8()
 T Etc::Block4x4Encoding_RGBA8::CalculateA8(float)
 T Etc::Block4x4Encoding_RGBA8::InitFromEncodingBits(Etc::Block4x4*, unsigned char*, Etc::ColorFloatRGBA*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RGBA8::InitFromSource(Etc::Block4x4*, Etc::ColorFloatRGBA*, unsigned char*, Etc::ErrorMetric)
 T Etc::Block4x4Encoding_RGBA8::PerformIteration(float)
 T Etc::Block4x4Encoding_RGBA8::SetEncodingBits()
 T Etc::Block4x4Encoding_RGBA8::~Block4x4Encoding_RGBA8()
 T Etc::Block4x4Encoding_RGBA8_Opaque::PerformIteration(float)
 T Etc::Block4x4Encoding_RGBA8_Opaque::SetEncodingBits()
 T Etc::Block4x4Encoding_RGBA8_Transparent::PerformIteration(float)
 T Etc::Block4x4Encoding_RGBA8_Transparent::SetEncodingBits()
 T Etc::CalcContributions(int, int, double, bool, double (*)(double), Etc::tagFilterWeights*)
 T Etc::DifferentialTrys::DifferentialTrys(Etc::ColorFloatRGBA, Etc::ColorFloatRGBA, unsigned int const*, unsigned int const*, unsigned int, int, int)
 T Etc::DifferentialTrys::Half::Init(int, int, int, unsigned int const*, unsigned int)
 T Etc::Encode(float*, unsigned int, unsigned int, Etc::Image::Format, Etc::ErrorMetric, float, unsigned int, unsigned int, unsigned char**, unsigned int*, unsigned int*, unsigned int*, int*, bool)
 T Etc::EncodeMipmaps(float*, unsigned int, unsigned int, Etc::Image::Format, Etc::ErrorMetric, float, unsigned int, unsigned int, unsigned int, unsigned int, Etc::RawImage*, int*, bool)
 T Etc::FilterBox(double)
 T Etc::FilterLanczos3(double)
 T Etc::FilterLinear(double)
 T Etc::FilterResample(Etc::tagRGBCOLOR*, int, int, Etc::tagRGBCOLOR*, int, int)
 T Etc::FilterTwoPass(Etc::tagRGBCOLOR*, int, int, Etc::tagRGBCOLOR*, int, int, unsigned int, double (*)(double))
 T Etc::Image::DetermineEncodingBitsFormat(Etc::Image::Format)
 T Etc::Image::Encode(Etc::Image::Format, Etc::ErrorMetric, float, unsigned int, unsigned int)
 T Etc::Image::EncodingFormatToString()
 T Etc::Image::EncodingFormatToString(Etc::Image::Format)
 T Etc::Image::FindAndSetEncodingWarnings()
 T Etc::Image::FindEncodingWarningTypesForCurFormat()
 T Etc::Image::GetError()
 T Etc::Image::Image()
 T Etc::Image::Image(Etc::Image::Format, unsigned int, unsigned int, unsigned char*, unsigned int, Etc::Image*, Etc::ErrorMetric)
 T Etc::Image::Image(float*, unsigned int, unsigned int, Etc::ErrorMetric)
 T Etc::Image::InitBlocksAndBlockSorter()
 T Etc::Image::IterateThroughWorstBlocks(unsigned int, unsigned int, unsigned int)
 T Etc::Image::RunFirstPass(unsigned int, unsigned int)
 T Etc::Image::SetEncodingBits(unsigned int, unsigned int)
 T Etc::Image::~Image()
 T Etc::IndividualTrys::Half::Init(int, int, int, unsigned int const*, unsigned int)
 T Etc::IndividualTrys::IndividualTrys(Etc::ColorFloatRGBA, Etc::ColorFloatRGBA, unsigned int const*, unsigned int const*, unsigned int)
 T Etc::Regression(float*, float*, unsigned int, float*, float*)
 T Etc::SortedBlockList::AddBlock(Etc::Block4x4*)
 T Etc::SortedBlockList::InitBuckets()
 T Etc::SortedBlockList::Print()
 T Etc::SortedBlockList::Sort()
 T Etc::SortedBlockList::SortedBlockList(unsigned int, unsigned int)
 T Etc::SortedBlockList::~SortedBlockList()
 T GetResourceManifestCount
 T GetResourceManifests
 T InstallSchemaBindings
 T ShCompile
 T ShConstructCompiler
 T ShConstructLinker
 T ShConstructUniformMap
 T ShDestruct
 T ShExcludeAttributes
 T ShFinalize
 T ShGetExecutable
 T ShGetInfoLog
 T ShGetUniformLocation
 T ShInitialize
 T ShLinkExt
 T ShSetEncryptionMethod
 T ShSetFixedAttributeBindings
 T ShSetVirtualAttributeBindings
 T StageName
 T TGenericCompiler::compile(TIntermNode*, int, EProfile)
 T _fini
 T _init
 T glslang::DetachProcess()
 T glslang::DetachThread()
 T glslang::FinalizeProcess()
 T glslang::GetEsslVersionString()
 T glslang::GetGlobalLock()
 T glslang::GetGlslVersionString()
 T glslang::GetKhronosToolId()
 T glslang::GetSpirvGeneratorVersion()
 T glslang::GetSpirvVersion(std::string&)
 T glslang::GetThreadPoolAllocator()
 T glslang::GlslangToSpv(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, glslang::SpvOptions*)
 T glslang::GlslangToSpv(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions*)
 T glslang::HlslGrammar::acceptAnnotations(glslang::TQualifier&)
 T glslang::HlslGrammar::acceptArguments(glslang::TFunction*, glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptArraySpecifier(glslang::TArraySizes*&)
 T glslang::HlslGrammar::acceptAssignmentExpression(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptAttributes(glslang::TList<glslang::TAttributeArgs>&)
 T glslang::HlslGrammar::acceptBinaryExpression(glslang::TIntermTyped*&, glslang::PrecedenceLevel)
 T glslang::HlslGrammar::acceptCaseLabel(TIntermNode*&)
 T glslang::HlslGrammar::acceptCompilationUnit()
 T glslang::HlslGrammar::acceptCompoundStatement(TIntermNode*&)
 T glslang::HlslGrammar::acceptConditionalExpression(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptConstantBufferType(glslang::TType&)
 T glslang::HlslGrammar::acceptConstructor(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptControlDeclaration(TIntermNode*&)
 T glslang::HlslGrammar::acceptDeclaration(TIntermNode*&)
 T glslang::HlslGrammar::acceptDeclarationList(TIntermNode*&)
 T glslang::HlslGrammar::acceptDefaultLabel(TIntermNode*&)
 T glslang::HlslGrammar::acceptDefaultParameterDeclaration(glslang::TType const&, glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptExpression(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptFullySpecifiedType(glslang::TType&, TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&, bool)
 T glslang::HlslGrammar::acceptFullySpecifiedType(glslang::TType&, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslGrammar::acceptFunctionBody(glslang::TFunctionDeclarator&, TIntermNode*&)
 T glslang::HlslGrammar::acceptFunctionCall(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TIntermTyped*&, glslang::TIntermTyped*)
 T glslang::HlslGrammar::acceptFunctionDefinition(glslang::TFunctionDeclarator&, TIntermNode*&, glslang::TVector<glslang::HlslToken>*)
 T glslang::HlslGrammar::acceptFunctionParameters(glslang::TFunction&)
 T glslang::HlslGrammar::acceptIdentifier(glslang::HlslToken&)
 T glslang::HlslGrammar::acceptInitializer(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptIterationStatement(TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslGrammar::acceptJumpStatement(TIntermNode*&)
 T glslang::HlslGrammar::acceptLayoutQualifierList(glslang::TQualifier&)
 T glslang::HlslGrammar::acceptLiteral(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptMatrixTemplateType(glslang::TType&)
 T glslang::HlslGrammar::acceptMemberFunctionDefinition(TIntermNode*&, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TFunctionDeclarator&)
 T glslang::HlslGrammar::acceptOutputPrimitiveGeometry(glslang::TLayoutGeometry&)
 T glslang::HlslGrammar::acceptParameterDeclaration(glslang::TFunction&)
 T glslang::HlslGrammar::acceptParenExpression(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptPostDecls(glslang::TQualifier&)
 T glslang::HlslGrammar::acceptPostfixExpression(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptQualifier(glslang::TQualifier&)
 T glslang::HlslGrammar::acceptSamplerDeclarationDX9(glslang::TType&)
 T glslang::HlslGrammar::acceptSamplerState()
 T glslang::HlslGrammar::acceptSamplerType(glslang::TType&)
 T glslang::HlslGrammar::acceptScopedCompoundStatement(TIntermNode*&)
 T glslang::HlslGrammar::acceptScopedStatement(TIntermNode*&)
 T glslang::HlslGrammar::acceptSelectionStatement(TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslGrammar::acceptSimpleStatement(TIntermNode*&)
 T glslang::HlslGrammar::acceptStatement(TIntermNode*&)
 T glslang::HlslGrammar::acceptStreamOutTemplateType(glslang::TType&, glslang::TLayoutGeometry&)
 T glslang::HlslGrammar::acceptStruct(glslang::TType&, TIntermNode*&)
 T glslang::HlslGrammar::acceptStructBufferType(glslang::TType&)
 T glslang::HlslGrammar::acceptStructDeclarationList(glslang::TVector<glslang::TTypeLoc>*&, TIntermNode*&, glslang::TVector<glslang::TFunctionDeclarator>&)
 T glslang::HlslGrammar::acceptSubpassInputType(glslang::TType&)
 T glslang::HlslGrammar::acceptSwitchStatement(TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslGrammar::acceptTemplateVecMatBasicType(glslang::TBasicType&)
 T glslang::HlslGrammar::acceptTessellationDeclType(glslang::TBuiltInVariable&)
 T glslang::HlslGrammar::acceptTessellationPatchTemplateType(glslang::TType&)
 T glslang::HlslGrammar::acceptTextureBufferType(glslang::TType&)
 T glslang::HlslGrammar::acceptTextureType(glslang::TType&)
 T glslang::HlslGrammar::acceptType(glslang::TType&)
 T glslang::HlslGrammar::acceptType(glslang::TType&, TIntermNode*&)
 T glslang::HlslGrammar::acceptUnaryExpression(glslang::TIntermTyped*&)
 T glslang::HlslGrammar::acceptVectorTemplateType(glslang::TType&)
 T glslang::HlslGrammar::captureBlockTokens(glslang::TVector<glslang::HlslToken>&)
 T glslang::HlslGrammar::expected(char const*)
 T glslang::HlslGrammar::getTypeString(glslang::EHlslTokenClass) const
 T glslang::HlslGrammar::parse()
 T glslang::HlslGrammar::unimplemented(char const*)
 T glslang::HlslOpMap::assignment(glslang::EHlslTokenClass)
 T glslang::HlslOpMap::binary(glslang::EHlslTokenClass)
 T glslang::HlslOpMap::postUnary(glslang::EHlslTokenClass)
 T glslang::HlslOpMap::preUnary(glslang::EHlslTokenClass)
 T glslang::HlslOpMap::precedenceLevel(glslang::TOperator)
 T glslang::HlslParseContext::HlslParseContext(glslang::TSymbolTable&, glslang::TIntermediate&, bool, int, EProfile, glslang::SpvVersion const&, EShLanguage, TInfoSink&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, bool, EShMessages)
 T glslang::HlslParseContext::addConstructor(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TType const&)
 T glslang::HlslParseContext::addFlattenedMember(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, bool, glslang::TQualifier const&, glslang::TArraySizes const*)
 T glslang::HlslParseContext::addGenMulArgumentConversion(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::addInputArgumentConversions(glslang::TFunction const&, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::addOutputArgumentConversions(glslang::TFunction const&, glslang::TIntermOperator&)
 T glslang::HlslParseContext::addPatchConstantInvocation()
 T glslang::HlslParseContext::addQualifierToExisting(glslang::TSourceLoc const&, glslang::TQualifier, glslang::TVector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*>&)
 T glslang::HlslParseContext::addQualifierToExisting(glslang::TSourceLoc const&, glslang::TQualifier, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::addScopeMangler(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&)
 T glslang::HlslParseContext::addStructBuffArguments(glslang::TSourceLoc const&, glslang::TIntermAggregate*&)
 T glslang::HlslParseContext::addStructBufferHiddenCounterParam(glslang::TSourceLoc const&, glslang::TParameter&, glslang::TIntermAggregate*&)
 T glslang::HlslParseContext::addSwitch(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermAggregate*, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslParseContext::arraySizeCheck(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TArraySize&)
 T glslang::HlslParseContext::arraySizeRequiredCheck(glslang::TSourceLoc const&, glslang::TArraySizes const&)
 T glslang::HlslParseContext::assignClipCullDistance(glslang::TSourceLoc const&, glslang::TOperator, int, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::assignError(glslang::TSourceLoc const&, char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >)
 T glslang::HlslParseContext::assignPosition(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::assignToInterface(glslang::TVariable&)
 T glslang::HlslParseContext::attributeFromName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 T glslang::HlslParseContext::binaryOpError(glslang::TSourceLoc const&, char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >)
 T glslang::HlslParseContext::builtInName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::builtInOpCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermOperator&)
 T glslang::HlslParseContext::clearUniform(glslang::TQualifier&)
 T glslang::HlslParseContext::clearUniformInputOutput(glslang::TQualifier&)
 T glslang::HlslParseContext::computeSamplerTypeIndex(glslang::TSampler&)
 T glslang::HlslParseContext::constantValueCheck(glslang::TIntermTyped*, char const*)
 T glslang::HlslParseContext::constructAggregate(TIntermNode*, glslang::TType const&, int, glslang::TSourceLoc const&)
 T glslang::HlslParseContext::constructBuiltIn(glslang::TType const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc const&, bool)
 T glslang::HlslParseContext::constructorError(glslang::TSourceLoc const&, TIntermNode*, glslang::TFunction&, glslang::TOperator, glslang::TType&)
 T glslang::HlslParseContext::constructorTextureSamplerError(glslang::TSourceLoc const&, glslang::TFunction const&)
 T glslang::HlslParseContext::convertArray(glslang::TIntermTyped*, glslang::TType const&)
 T glslang::HlslParseContext::convertConditionalExpression(glslang::TSourceLoc const&, glslang::TIntermTyped*, bool)
 T glslang::HlslParseContext::convertInitializerList(glslang::TSourceLoc const&, glslang::TType const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::correctInput(glslang::TQualifier&)
 T glslang::HlslParseContext::correctOutput(glslang::TQualifier&)
 T glslang::HlslParseContext::correctUniform(glslang::TQualifier&)
 T glslang::HlslParseContext::counterBufferType(glslang::TSourceLoc const&, glslang::TType&)
 T glslang::HlslParseContext::declareArray(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TSymbol*&, bool)
 T glslang::HlslParseContext::declareBlock(glslang::TSourceLoc const&, glslang::TType&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 T glslang::HlslParseContext::declareNonArray(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, bool)
 T glslang::HlslParseContext::declareStruct(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TType&)
 T glslang::HlslParseContext::declareStructBufferCounter(glslang::TSourceLoc const&, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::declareTypedef(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&)
 T glslang::HlslParseContext::declareVariable(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType&, glslang::TIntermTyped*)
 T glslang::HlslParseContext::decomposeGeometryMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
 T glslang::HlslParseContext::decomposeIntrinsic(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
 T glslang::HlslParseContext::decomposeSampleMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
 T glslang::HlslParseContext::decomposeStructBufferMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
 T glslang::HlslParseContext::executeInitializer(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TVariable*)
 T glslang::HlslParseContext::expandArguments(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::finalizeAppendMethods()
 T glslang::HlslParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction&, bool&, int&, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::findPatchConstantFunction(glslang::TSourceLoc const&)
 T glslang::HlslParseContext::findSubtreeOffset(TIntermNode const&) const
 T glslang::HlslParseContext::findSubtreeOffset(glslang::TType const&, int, glslang::TVector<int> const&) const
 T glslang::HlslParseContext::findTessLinkageSymbol(glslang::TBuiltInVariable) const
 T glslang::HlslParseContext::finish()
 T glslang::HlslParseContext::fixBlockLocations(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&, bool, bool)
 T glslang::HlslParseContext::fixBlockUniformOffsets(glslang::TQualifier const&, glslang::TVector<glslang::TTypeLoc>&)
 T glslang::HlslParseContext::fixBlockXfbOffsets(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&)
 T glslang::HlslParseContext::fixBuiltInIoType(glslang::TType&)
 T glslang::HlslParseContext::fixConstInit(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType&, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::fixTextureShadowModes()
 T glslang::HlslParseContext::flatten(glslang::TVariable const&, bool)
 T glslang::HlslParseContext::flatten(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, bool, glslang::TQualifier const&, glslang::TArraySizes const*)
 T glslang::HlslParseContext::flattenAccess(glslang::TIntermTyped*, int)
 T glslang::HlslParseContext::flattenAccess(int, int, glslang::TStorageQualifier, glslang::TType const&, int)
 T glslang::HlslParseContext::flattenArray(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, bool, glslang::TQualifier const&)
 T glslang::HlslParseContext::flattenStruct(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, bool, glslang::TQualifier const&, glslang::TArraySizes const*)
 T glslang::HlslParseContext::getFullNamespaceName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*&) const
 T glslang::HlslParseContext::getLayoutFromTxType(glslang::TSourceLoc const&, glslang::TType const&)
 T glslang::HlslParseContext::getMatrixComponentsColumn(int, glslang::TSwizzleSelectors<glslang::TMatrixSelector> const&)
 T glslang::HlslParseContext::getSamplePosArray(int)
 T glslang::HlslParseContext::getSplitNonIoVar(int) const
 T glslang::HlslParseContext::getStructBufferContentType(glslang::TType const&) const
 T glslang::HlslParseContext::getStructBufferCounter(glslang::TSourceLoc const&, glslang::TIntermTyped*)
 T glslang::HlslParseContext::getTextureReturnType(glslang::TSampler const&, glslang::TType&) const
 T glslang::HlslParseContext::globalCheck(glslang::TSourceLoc const&, char const*)
 T glslang::HlslParseContext::globalQualifierFix(glslang::TSourceLoc const&, glslang::TQualifier&)
 T glslang::HlslParseContext::growGlobalUniformBlock(glslang::TSourceLoc const&, glslang::TType&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TVector<glslang::TTypeLoc>*)
 T glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleAssignToMatrixSwizzle(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleBinaryMath(glslang::TSourceLoc const&, char const*, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleBracketDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleBracketOperator(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleConstructor(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TType const&)
 T glslang::HlslParseContext::handleDotDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::handleEntryPointAttributes(glslang::TSourceLoc const&, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslParseContext::handleFunctionArgument(glslang::TFunction*, glslang::TIntermTyped*&, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleFunctionBody(glslang::TSourceLoc const&, glslang::TFunction&, TIntermNode*, TIntermNode*&)
 T glslang::HlslParseContext::handleFunctionCall(glslang::TSourceLoc const&, glslang::TFunction*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleFunctionDeclarator(glslang::TSourceLoc const&, glslang::TFunction&, bool)
 T glslang::HlslParseContext::handleFunctionDefinition(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*&)
 T glslang::HlslParseContext::handleInputGeometry(glslang::TSourceLoc const&, glslang::TLayoutGeometry const&)
 T glslang::HlslParseContext::handleLoopAttributes(glslang::TSourceLoc const&, glslang::TIntermLoop*, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslParseContext::handleLvalue(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::handleOutputGeometry(glslang::TSourceLoc const&, glslang::TLayoutGeometry const&)
 T glslang::HlslParseContext::handlePackOffset(glslang::TSourceLoc const&, glslang::TQualifier&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 T glslang::HlslParseContext::handlePragma(glslang::TSourceLoc const&, glslang::TVector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > const&)
 T glslang::HlslParseContext::handleRegister(glslang::TSourceLoc const&, glslang::TQualifier&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 T glslang::HlslParseContext::handleReturnValue(glslang::TSourceLoc const&, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleSamplerTextureCombine(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleSelectionAttributes(glslang::TSourceLoc const&, glslang::TIntermSelection*, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslParseContext::handleSemantic(glslang::TSourceLoc, glslang::TQualifier&, glslang::TBuiltInVariable, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::handleSwitchAttributes(glslang::TSourceLoc const&, glslang::TIntermSwitch*, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslParseContext::handleUnaryMath(glslang::TSourceLoc const&, char const*, glslang::TOperator, glslang::TIntermTyped*)
 T glslang::HlslParseContext::handleVariable(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 T glslang::HlslParseContext::hasInput(glslang::TQualifier const&) const
 T glslang::HlslParseContext::hasOutput(glslang::TQualifier const&) const
 T glslang::HlslParseContext::hasStructBuffCounter(glslang::TType const&) const
 T glslang::HlslParseContext::hasUniform(glslang::TQualifier const&) const
 T glslang::HlslParseContext::indexStructBufferContent(glslang::TSourceLoc const&, glslang::TIntermTyped*) const
 T glslang::HlslParseContext::inheritGlobalDefaults(glslang::TQualifier&) const
 T glslang::HlslParseContext::initializeExtensionBehavior()
 T glslang::HlslParseContext::integerCheck(glslang::TIntermTyped const*, char const*)
 T glslang::HlslParseContext::isBuiltInMethod(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::isClipOrCullDistance(glslang::TBuiltInVariable)
 T glslang::HlslParseContext::isInputBuiltIn(glslang::TQualifier const&) const
 T glslang::HlslParseContext::isOutputBuiltIn(glslang::TQualifier const&) const
 T glslang::HlslParseContext::isScalarConstructor(TIntermNode const*)
 T glslang::HlslParseContext::isStructBufferMethod(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 T glslang::HlslParseContext::lValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
 T glslang::HlslParseContext::lengthenList(glslang::TSourceLoc const&, glslang::TVector<TIntermNode*>&, int, glslang::TIntermTyped*)
 T glslang::HlslParseContext::lookupUserType(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType&)
 T glslang::HlslParseContext::makeConstructorCall(glslang::TSourceLoc const&, glslang::TType const&)
 T glslang::HlslParseContext::makeIntegerIndex(glslang::TIntermTyped*)
 T glslang::HlslParseContext::makeInternalVariable(char const*, glslang::TType const&) const
 T glslang::HlslParseContext::makeInternalVariableNode(glslang::TSourceLoc const&, char const*, glslang::TType const&) const
 T glslang::HlslParseContext::mapAtomicOp(glslang::TSourceLoc const&, glslang::TOperator, bool)
 T glslang::HlslParseContext::mergeObjectLayoutQualifiers(glslang::TQualifier&, glslang::TQualifier const&, bool)
 T glslang::HlslParseContext::mergeQualifiers(glslang::TQualifier&, glslang::TQualifier const&)
 T glslang::HlslParseContext::paramFix(glslang::TType&)
 T glslang::HlslParseContext::parseMatrixSwizzleSelector(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, int, glslang::TSwizzleSelectors<glslang::TMatrixSelector>&)
 T glslang::HlslParseContext::parseShaderStrings(glslang::TPpContext&, glslang::TInputScanner&, bool)
 T glslang::HlslParseContext::popNamespace()
 T glslang::HlslParseContext::pushFrontArguments(glslang::TIntermTyped*, glslang::TIntermTyped*&)
 T glslang::HlslParseContext::pushNamespace(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::HlslParseContext::pushThisScope(glslang::TType const&, glslang::TVector<glslang::TFunctionDeclarator> const&)
 T glslang::HlslParseContext::redeclareBuiltinVariable(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TQualifier const&, glslang::TShaderQualifiers const&)
 T glslang::HlslParseContext::remapEntryPointIO(glslang::TFunction&, glslang::TVariable*&, glslang::TVector<glslang::TVariable*>&, glslang::TVector<glslang::TVariable*>&)
 T glslang::HlslParseContext::remapNonEntryPointIO(glslang::TFunction&)
 T glslang::HlslParseContext::removeUnusedStructBufferCounters()
 T glslang::HlslParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TQualifier&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&)
 T glslang::HlslParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TQualifier&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TIntermTyped const*)
 T glslang::HlslParseContext::setLimits(TBuiltInResource const&)
 T glslang::HlslParseContext::setSpecConstantId(glslang::TSourceLoc const&, glslang::TQualifier&, int)
 T glslang::HlslParseContext::setTextureReturnType(glslang::TSampler&, glslang::TType const&, glslang::TSourceLoc const&)
 T glslang::HlslParseContext::shareStructBufferType(glslang::TType&)
 T glslang::HlslParseContext::shouldConvertLValue(TIntermNode const*) const
 T glslang::HlslParseContext::shouldFlatten(glslang::TType const&, glslang::TStorageQualifier, bool) const
 T glslang::HlslParseContext::specializationCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
 T glslang::HlslParseContext::split(glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TQualifier const&)
 T glslang::HlslParseContext::split(glslang::TVariable const&)
 T glslang::HlslParseContext::splitBuiltIn(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TArraySizes const*, glslang::TQualifier const&)
 T glslang::HlslParseContext::structArrayCheck(glslang::TSourceLoc const&, glslang::TType const&)
 T glslang::HlslParseContext::trackLinkage(glslang::TSymbol&)
 T glslang::HlslParseContext::transferTypeAttributes(glslang::TSourceLoc const&, glslang::TList<glslang::TAttributeArgs> const&, glslang::TType&, bool)
 T glslang::HlslParseContext::transformEntryPoint(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TList<glslang::TAttributeArgs> const&)
 T glslang::HlslParseContext::unaryOpError(glslang::TSourceLoc const&, char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >)
 T glslang::HlslParseContext::updateStandaloneQualifierDefaults(glslang::TSourceLoc const&, glslang::TPublicType const&)
 T glslang::HlslParseContext::variableCheck(glslang::TIntermTyped*&)
 T glslang::HlslParseContext::voidErrorCheck(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TBasicType)
 T glslang::HlslParseContext::wasFlattened(glslang::TIntermTyped const*) const
 T glslang::HlslParseContext::wasSplit(glslang::TIntermTyped const*) const
 T glslang::HlslParseContext::wrapupSwitchSubsequence(glslang::TIntermAggregate*, TIntermNode*)
 T glslang::HlslParseContext::~HlslParseContext()
 T glslang::HlslScanContext::deleteKeywordMap()
 T glslang::HlslScanContext::fillInKeywordMap()
 T glslang::HlslScanContext::identifierOrType()
 T glslang::HlslScanContext::mapSemantic(char const*)
 T glslang::HlslScanContext::reservedWord()
 T glslang::HlslScanContext::tokenize(glslang::HlslToken&)
 T glslang::HlslScanContext::tokenizeClass(glslang::HlslToken&)
 T glslang::HlslScanContext::tokenizeIdentifier()
 T glslang::HlslTokenStream::acceptTokenClass(glslang::EHlslTokenClass)
 T glslang::HlslTokenStream::advanceToken()
 T glslang::HlslTokenStream::peek() const
 T glslang::HlslTokenStream::peekTokenClass(glslang::EHlslTokenClass) const
 T glslang::HlslTokenStream::popPreToken()
 T glslang::HlslTokenStream::popTokenBuffer()
 T glslang::HlslTokenStream::popTokenStream()
 T glslang::HlslTokenStream::pushPreToken(glslang::HlslToken const&)
 T glslang::HlslTokenStream::pushTokenBuffer(glslang::HlslToken const&)
 T glslang::HlslTokenStream::pushTokenStream(glslang::TVector<glslang::HlslToken> const*)
 T glslang::HlslTokenStream::recedeToken()
 T glslang::InitGlobalLock()
 T glslang::InitProcess()
 T glslang::InitThread()
 T glslang::InitializePoolIndex()
 T glslang::InitializeProcess()
 T glslang::OS_AllocTLSIndex()
 T glslang::OS_CleanupThreadData()
 T glslang::OS_DumpMemoryCounters()
 T glslang::OS_FreeTLSIndex(void*)
 T glslang::OS_GetTLSValue(void*)
 T glslang::OS_SetTLSValue(void*, void*)
 T glslang::OutputSpvBin(std::vector<unsigned int, std::allocator<unsigned int> > const&, char const*)
 T glslang::OutputSpvHex(std::vector<unsigned int, std::allocator<unsigned int> > const&, char const*, char const*)
 T glslang::PropagateNoContraction(glslang::TIntermediate const&)
 T glslang::ReleaseGlobalLock()
 T glslang::RemoveAllTreeNodes(TIntermNode*)
 T glslang::SetThreadPoolAllocator(glslang::TPoolAllocator*)
 T glslang::TAllocation::checkAllocList() const
 T glslang::TAllocation::checkGuardBlock(unsigned char*, unsigned char, char const*) const
 T glslang::TAnonMember::clone() const
 T glslang::TAnonMember::dump(TInfoSink&) const
 T glslang::TAttributeArgs::getConstUnion(glslang::TBasicType, int) const
 T glslang::TAttributeArgs::getInt(int&, int) const
 T glslang::TAttributeArgs::getString(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, int, bool) const
 T glslang::TAttributeArgs::size() const
 T glslang::TBuiltInParseables::TBuiltInParseables()
 T glslang::TBuiltInParseables::~TBuiltInParseables()
 T glslang::TBuiltInParseablesHlsl::TBuiltInParseablesHlsl()
 T glslang::TBuiltInParseablesHlsl::createMatTimesMat()
 T glslang::TBuiltInParseablesHlsl::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&)
 T glslang::TBuiltInParseablesHlsl::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&, TBuiltInResource const&)
 T glslang::TBuiltInParseablesHlsl::initialize(TBuiltInResource const&, int, EProfile, glslang::SpvVersion const&, EShLanguage)
 T glslang::TBuiltInParseablesHlsl::initialize(int, EProfile, glslang::SpvVersion const&)
 T glslang::TBuiltIns::TBuiltIns()
 T glslang::TBuiltIns::add2ndGenerationSamplingImaging(int, EProfile, glslang::SpvVersion const&)
 T glslang::TBuiltIns::addGatherFunctions(glslang::TSampler, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
 T glslang::TBuiltIns::addImageFunctions(glslang::TSampler, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
 T glslang::TBuiltIns::addQueryFunctions(glslang::TSampler, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
 T glslang::TBuiltIns::addSamplingFunctions(glslang::TSampler, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
 T glslang::TBuiltIns::addSubpassSampling(glslang::TSampler, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
 T glslang::TBuiltIns::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&)
 T glslang::TBuiltIns::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&, TBuiltInResource const&)
 T glslang::TBuiltIns::initialize(TBuiltInResource const&, int, EProfile, glslang::SpvVersion const&, EShLanguage)
 T glslang::TBuiltIns::initialize(int, EProfile, glslang::SpvVersion const&)
 T glslang::TBuiltIns::~TBuiltIns()
 T glslang::TConstTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 T glslang::TConstTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
 T glslang::TFunction::TFunction(glslang::TFunction const&)
 T glslang::TFunction::clone() const
 T glslang::TFunction::dump(TInfoSink&) const
 T glslang::TFunction::~TFunction()
 T glslang::TIndexTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 T glslang::TIndexTraverser::visitSymbol(glslang::TIntermSymbol*)
 T glslang::TInductiveTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 T glslang::TInductiveTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
 T glslang::TInductiveTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
 T glslang::TInfoSinkBase::append(char const*)
 T glslang::TInfoSinkBase::append(int, char)
 T glslang::TInfoSinkBase::append(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TInfoSinkBase::append(std::string const&)
 T glslang::TInputScanner::consumeComment()
 T glslang::TInputScanner::consumeWhiteSpace(bool&)
 T glslang::TInputScanner::consumeWhitespaceComment(bool&)
 T glslang::TInputScanner::scanVersion(int&, EProfile&, bool&)
 T glslang::TIntermAggregate::setPragmaTable(glslang::TPragmaTable const&)
 T glslang::TIntermAggregate::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermBinary::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermBinary::updatePrecision()
 T glslang::TIntermBranch::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermConstantUnion::fold(glslang::TOperator, glslang::TIntermTyped const*) const
 T glslang::TIntermConstantUnion::fold(glslang::TOperator, glslang::TType const&) const
 T glslang::TIntermConstantUnion::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermLoop::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermMethod::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermOperator::isConstructor() const
 T glslang::TIntermOperator::modifiesState() const
 T glslang::TIntermSelection::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermSwitch::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermSymbol::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermTyped::propagatePrecision(glslang::TPrecisionQualifier)
 T glslang::TIntermUnary::traverse(glslang::TIntermTraverser*)
 T glslang::TIntermUnary::updatePrecision()
 T glslang::TIntermediate::addAssign(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc)
 T glslang::TIntermediate::addBiShapeConversion(glslang::TOperator, glslang::TIntermTyped*&, glslang::TIntermTyped*&)
 T glslang::TIntermediate::addBinaryMath(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc)
 T glslang::TIntermediate::addBinaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc) const
 T glslang::TIntermediate::addBinaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc, glslang::TType const&) const
 T glslang::TIntermediate::addBranch(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addBranch(glslang::TOperator, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addBuiltInFunctionCall(glslang::TSourceLoc const&, glslang::TOperator, bool, TIntermNode*, glslang::TType const&)
 T glslang::TIntermediate::addComma(glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addConstantUnion(bool, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(double, glslang::TBasicType, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(glslang::TConstUnionArray const&, glslang::TType const&, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(int, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(long long, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(short, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(signed char, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(unsigned char, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(unsigned int, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(unsigned long long, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConstantUnion(unsigned short, glslang::TSourceLoc const&, bool) const
 T glslang::TIntermediate::addConversion(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*) const
 T glslang::TIntermediate::addConversion(glslang::TOperator, glslang::TType const&, glslang::TIntermTyped*) const
 T glslang::TIntermediate::addForLoop(TIntermNode*, TIntermNode*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool, glslang::TSourceLoc const&, glslang::TIntermLoop*&)
 T glslang::TIntermediate::addIndex(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc)
 T glslang::TIntermediate::addLoop(TIntermNode*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addMethod(glslang::TIntermTyped*, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addSelection(glslang::TIntermTyped*, glslang::TIntermNodePair, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addSelection(glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addShapeConversion(glslang::TType const&, glslang::TIntermTyped*)
 T glslang::TIntermediate::addSymbol(glslang::TIntermSymbol const&)
 T glslang::TIntermediate::addSymbol(glslang::TType const&, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addSymbol(glslang::TVariable const&)
 T glslang::TIntermediate::addSymbol(glslang::TVariable const&, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addSymbol(int, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TConstUnionArray const&, glslang::TIntermTyped*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::addSymbolLinkageNode(glslang::TIntermAggregate*&, glslang::TSymbol const&)
 T glslang::TIntermediate::addSymbolLinkageNode(glslang::TIntermAggregate*&, glslang::TSymbolTable&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TIntermediate::addSymbolLinkageNodes(glslang::TIntermAggregate*&, EShLanguage, glslang::TSymbolTable&)
 T glslang::TIntermediate::addToCallGraph(TInfoSink&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TIntermediate::addUnaryMath(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc)
 T glslang::TIntermediate::addUnaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc) const
 T glslang::TIntermediate::addUnaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc, glslang::TType const&) const
 T glslang::TIntermediate::addUniShapeConversion(glslang::TOperator, glslang::TType const&, glslang::TIntermTyped*)
 T glslang::TIntermediate::addUsedConstantId(int)
 T glslang::TIntermediate::addUsedLocation(glslang::TQualifier const&, glslang::TType const&, bool&)
 T glslang::TIntermediate::addUsedOffsets(int, int, int)
 T glslang::TIntermediate::addXfbBufferOffset(glslang::TType const&)
 T glslang::TIntermediate::areAllChildConst(glslang::TIntermAggregate*)
 T glslang::TIntermediate::canImplicitlyPromote(glslang::TBasicType, glslang::TBasicType, glslang::TOperator) const
 T glslang::TIntermediate::checkCallGraphBodies(TInfoSink&, bool)
 T glslang::TIntermediate::checkCallGraphCycles(TInfoSink&)
 T glslang::TIntermediate::checkLocationRange(int, glslang::TIoRange const&, glslang::TType const&, bool&)
 T glslang::TIntermediate::computeTypeLocationSize(glslang::TType const&, EShLanguage)
 T glslang::TIntermediate::computeTypeUniformLocationSize(glslang::TType const&)
 T glslang::TIntermediate::computeTypeXfbSize(glslang::TType const&, bool&) const
 T glslang::TIntermediate::createConversion(glslang::TBasicType, glslang::TIntermTyped*) const
 T glslang::TIntermediate::error(TInfoSink&, char const*)
 T glslang::TIntermediate::finalCheck(TInfoSink&, bool)
 T glslang::TIntermediate::findLValueBase(glslang::TIntermTyped const*, bool)
 T glslang::TIntermediate::findLinkerObjects() const
 T glslang::TIntermediate::fold(glslang::TIntermAggregate*)
 T glslang::TIntermediate::foldConstructor(glslang::TIntermAggregate*)
 T glslang::TIntermediate::foldDereference(glslang::TIntermTyped*, int, glslang::TSourceLoc const&)
 T glslang::TIntermediate::foldSwizzle(glslang::TIntermTyped*, glslang::TSwizzleSelectors<int>&, glslang::TSourceLoc const&)
 T glslang::TIntermediate::getBaseAlignment(glslang::TType const&, int&, int&, bool, bool)
 T glslang::TIntermediate::getBaseAlignmentScalar(glslang::TType const&, int&)
 T glslang::TIntermediate::getConversionDestinatonType(glslang::TBasicType, glslang::TBasicType, glslang::TOperator) const
 T glslang::TIntermediate::getResourceName(glslang::TResourceType)
 T glslang::TIntermediate::growAggregate(TIntermNode*, TIntermNode*)
 T glslang::TIntermediate::growAggregate(TIntermNode*, TIntermNode*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::improperStraddle(glslang::TType const&, int, int)
 T glslang::TIntermediate::inOutLocationCheck(TInfoSink&)
 T glslang::TIntermediate::isConversionAllowed(glslang::TOperator, glslang::TIntermTyped*) const
 T glslang::TIntermediate::isFPConversion(glslang::TBasicType, glslang::TBasicType) const
 T glslang::TIntermediate::isFPIntegralConversion(glslang::TBasicType, glslang::TBasicType) const
 T glslang::TIntermediate::isFPPromotion(glslang::TBasicType, glslang::TBasicType) const
 T glslang::TIntermediate::isIntegralConversion(glslang::TBasicType, glslang::TBasicType) const
 T glslang::TIntermediate::isIntegralPromotion(glslang::TBasicType, glslang::TBasicType) const
 T glslang::TIntermediate::isNonuniformPropagating(glslang::TOperator) const
 T glslang::TIntermediate::isSpecializationOperation(glslang::TIntermOperator const&) const
 T glslang::TIntermediate::makeAggregate(TIntermNode*)
 T glslang::TIntermediate::makeAggregate(TIntermNode*, glslang::TSourceLoc const&)
 T glslang::TIntermediate::makeAggregate(glslang::TSourceLoc const&)
 T glslang::TIntermediate::mapTypeToConstructorOp(glslang::TType const&) const
 T glslang::TIntermediate::merge(TInfoSink&, glslang::TIntermediate&)
 T glslang::TIntermediate::mergeBodies(TInfoSink&, glslang::TVector<TIntermNode*>&, glslang::TVector<TIntermNode*> const&)
 T glslang::TIntermediate::mergeErrorCheck(TInfoSink&, glslang::TIntermSymbol const&, glslang::TIntermSymbol const&, bool)
 T glslang::TIntermediate::mergeImplicitArraySizes(glslang::TType&, glslang::TType const&)
 T glslang::TIntermediate::mergeLinkerObjects(TInfoSink&, glslang::TVector<TIntermNode*>&, glslang::TVector<TIntermNode*> const&)
 T glslang::TIntermediate::output(TInfoSink&, bool)
 T glslang::TIntermediate::parseConstTree(TIntermNode*, glslang::TConstUnionArray, glslang::TOperator, glslang::TType const&, bool)
 T glslang::TIntermediate::performTextureUpgradeAndSamplerRemovalTransformation(TIntermNode*)
 T glslang::TIntermediate::postProcess(TIntermNode*, EShLanguage)
 T glslang::TIntermediate::promote(glslang::TIntermOperator*)
 T glslang::TIntermediate::promoteAggregate(glslang::TIntermAggregate&)
 T glslang::TIntermediate::promoteBinary(glslang::TIntermBinary&)
 T glslang::TIntermediate::promoteConstantUnion(glslang::TBasicType, glslang::TIntermConstantUnion*) const
 T glslang::TIntermediate::promoteUnary(glslang::TIntermUnary&)
 T glslang::TIntermediate::pushSelector(glslang::TVector<TIntermNode*>&, glslang::TMatrixSelector const&, glslang::TSourceLoc const&)
 T glslang::TIntermediate::pushSelector(glslang::TVector<TIntermNode*>&, int const&, glslang::TSourceLoc const&)
 T glslang::TIntermediate::removeTree()
 T glslang::TIntermediate::setAggregateOperator(TIntermNode*, glslang::TOperator, glslang::TType const&, glslang::TSourceLoc)
 T glslang::TIntermediate::specConstantPropagates(glslang::TIntermTyped const&, glslang::TIntermTyped const&)
 T glslang::TIntermediate::userOutputUsed() const
 T glslang::TIntermediate::warn(TInfoSink&, char const*)
 T glslang::TIoMapper::addStage(EShLanguage, glslang::TIntermediate&, TInfoSink&, glslang::TIoMapResolver*)
 T glslang::TOutputTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 T glslang::TOutputTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
 T glslang::TOutputTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
 T glslang::TOutputTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
 T glslang::TOutputTraverser::visitLoop(glslang::TVisit, glslang::TIntermLoop*)
 T glslang::TOutputTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
 T glslang::TOutputTraverser::visitSwitch(glslang::TVisit, glslang::TIntermSwitch*)
 T glslang::TOutputTraverser::visitSymbol(glslang::TIntermSymbol*)
 T glslang::TOutputTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
 T glslang::TParseContext::TParseContext(glslang::TSymbolTable&, glslang::TIntermediate&, bool, int, EProfile, glslang::SpvVersion const&, EShLanguage, TInfoSink&, bool, EShMessages, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 T glslang::TParseContext::addConstructor(glslang::TSourceLoc const&, TIntermNode*, glslang::TType const&)
 T glslang::TParseContext::addInputArgumentConversions(glslang::TFunction const&, TIntermNode*&) const
 T glslang::TParseContext::addOutputArgumentConversions(glslang::TFunction const&, glslang::TIntermAggregate&) const
 T glslang::TParseContext::addQualifierToExisting(glslang::TSourceLoc const&, glslang::TQualifier, glslang::TVector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*>&)
 T glslang::TParseContext::addQualifierToExisting(glslang::TSourceLoc const&, glslang::TQualifier, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::addSwitch(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermAggregate*)
 T glslang::TParseContext::arrayError(glslang::TSourceLoc const&, glslang::TType const&)
 T glslang::TParseContext::arrayLimitCheck(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int)
 T glslang::TParseContext::arrayObjectCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
 T glslang::TParseContext::arrayOfArrayVersionCheck(glslang::TSourceLoc const&, glslang::TArraySizes const*)
 T glslang::TParseContext::arrayQualifierError(glslang::TSourceLoc const&, glslang::TQualifier const&)
 T glslang::TParseContext::arraySizeCheck(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TArraySize&)
 T glslang::TParseContext::arraySizeRequiredCheck(glslang::TSourceLoc const&, glslang::TArraySizes const&)
 T glslang::TParseContext::arraySizesCheck(glslang::TSourceLoc const&, glslang::TQualifier const&, glslang::TArraySizes*, glslang::TIntermTyped const*, bool)
 T glslang::TParseContext::assignError(glslang::TSourceLoc const&, char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >)
 T glslang::TParseContext::atomicUintCheck(glslang::TSourceLoc const&, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::attributeFromName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 T glslang::TParseContext::binaryOpError(glslang::TSourceLoc const&, char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >)
 T glslang::TParseContext::blockMemberExtensionCheck(glslang::TSourceLoc const&, glslang::TIntermTyped const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::blockQualifierCheck(glslang::TSourceLoc const&, glslang::TQualifier const&, bool)
 T glslang::TParseContext::blockStageIoCheck(glslang::TSourceLoc const&, glslang::TQualifier const&)
 T glslang::TParseContext::boolCheck(glslang::TSourceLoc const&, glslang::TIntermTyped const*)
 T glslang::TParseContext::boolCheck(glslang::TSourceLoc const&, glslang::TPublicType const&)
 T glslang::TParseContext::builtInName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::builtInOpCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermOperator&)
 T glslang::TParseContext::checkIoArrayConsistency(glslang::TSourceLoc const&, int, char const*, glslang::TType&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::checkIoArraysConsistency(glslang::TSourceLoc const&, bool)
 T glslang::TParseContext::checkLocation(glslang::TSourceLoc const&, glslang::TOperator)
 T glslang::TParseContext::checkNoShaderLayouts(glslang::TSourceLoc const&, glslang::TShaderQualifiers const&)
 T glslang::TParseContext::checkPrecisionQualifier(glslang::TSourceLoc const&, glslang::TPrecisionQualifier)
 T glslang::TParseContext::checkRuntimeSizable(glslang::TSourceLoc const&, glslang::TIntermTyped const&)
 T glslang::TParseContext::computeBuiltinPrecisions(glslang::TIntermTyped&, glslang::TFunction const&)
 T glslang::TParseContext::computeSamplerTypeIndex(glslang::TSampler&)
 T glslang::TParseContext::constantIndexExpressionCheck(TIntermNode*)
 T glslang::TParseContext::constantValueCheck(glslang::TIntermTyped*, char const*)
 T glslang::TParseContext::constructAggregate(TIntermNode*, glslang::TType const&, int, glslang::TSourceLoc const&)
 T glslang::TParseContext::constructBuiltIn(glslang::TType const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc const&, bool)
 T glslang::TParseContext::constructorError(glslang::TSourceLoc const&, TIntermNode*, glslang::TFunction&, glslang::TOperator, glslang::TType&)
 T glslang::TParseContext::constructorTextureSamplerError(glslang::TSourceLoc const&, glslang::TFunction const&)
 T glslang::TParseContext::containsFieldWithBasicType(glslang::TType const&, glslang::TBasicType)
 T glslang::TParseContext::convertInitializerList(glslang::TSourceLoc const&, glslang::TType const&, glslang::TIntermTyped*)
 T glslang::TParseContext::declareArray(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TSymbol*&)
 T glslang::TParseContext::declareBlock(glslang::TSourceLoc const&, glslang::TVector<glslang::TTypeLoc>&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TArraySizes*)
 T glslang::TParseContext::declareNonArray(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&)
 T glslang::TParseContext::declareTypeDefaults(glslang::TSourceLoc const&, glslang::TPublicType const&)
 T glslang::TParseContext::declareVariable(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TPublicType const&, glslang::TArraySizes*, glslang::TIntermTyped*)
 T glslang::TParseContext::executeInitializer(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TVariable*)
 T glslang::TParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
 T glslang::TParseContext::findFunction120(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
 T glslang::TParseContext::findFunction400(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
 T glslang::TParseContext::findFunctionExact(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
 T glslang::TParseContext::findFunctionExplicitTypes(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
 T glslang::TParseContext::finish()
 T glslang::TParseContext::fixBlockLocations(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&, bool, bool)
 T glslang::TParseContext::fixBlockUniformOffsets(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&)
 T glslang::TParseContext::fixBlockXfbOffsets(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&)
 T glslang::TParseContext::fixIoArraySize(glslang::TSourceLoc const&, glslang::TType&)
 T glslang::TParseContext::fixOffset(glslang::TSourceLoc const&, glslang::TSymbol&)
 T glslang::TParseContext::getDefaultPrecision(glslang::TPublicType&)
 T glslang::TParseContext::getIoArrayImplicitSize() const
 T glslang::TParseContext::globalCheck(glslang::TSourceLoc const&, char const*)
 T glslang::TParseContext::globalQualifierFixCheck(glslang::TSourceLoc const&, glslang::TQualifier&)
 T glslang::TParseContext::globalQualifierTypeCheck(glslang::TSourceLoc const&, glslang::TQualifier const&, glslang::TPublicType const&)
 T glslang::TParseContext::handleBinaryMath(glslang::TSourceLoc const&, char const*, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::TParseContext::handleBracketDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::TParseContext::handleBuiltInFunctionCall(glslang::TSourceLoc, TIntermNode*, glslang::TFunction const&)
 T glslang::TParseContext::handleConstructorCall(glslang::TSourceLoc const&, glslang::TPublicType const&)
 T glslang::TParseContext::handleDotDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::handleFunctionCall(glslang::TSourceLoc const&, glslang::TFunction*, TIntermNode*)
 T glslang::TParseContext::handleFunctionDeclarator(glslang::TSourceLoc const&, glslang::TFunction&, bool)
 T glslang::TParseContext::handleFunctionDefinition(glslang::TSourceLoc const&, glslang::TFunction&)
 T glslang::TParseContext::handleIndexLimits(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
 T glslang::TParseContext::handleIoResizeArrayAccess(glslang::TSourceLoc const&, glslang::TIntermTyped*)
 T glslang::TParseContext::handleLengthMethod(glslang::TSourceLoc const&, glslang::TFunction*, TIntermNode*)
 T glslang::TParseContext::handleLoopAttributes(glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*)
 T glslang::TParseContext::handlePragma(glslang::TSourceLoc const&, glslang::TVector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > const&)
 T glslang::TParseContext::handlePrecisionQualifier(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TPrecisionQualifier)
 T glslang::TParseContext::handleReturnValue(glslang::TSourceLoc const&, glslang::TIntermTyped*)
 T glslang::TParseContext::handleSelectionAttributes(glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*)
 T glslang::TParseContext::handleSwitchAttributes(glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*)
 T glslang::TParseContext::handleUnaryMath(glslang::TSourceLoc const&, char const*, glslang::TOperator, glslang::TIntermTyped*)
 T glslang::TParseContext::handleVariable(glslang::TSourceLoc const&, glslang::TSymbol*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 T glslang::TParseContext::inductiveLoopBodyCheck(TIntermNode*, int, glslang::TSymbolTable&)
 T glslang::TParseContext::inductiveLoopCheck(glslang::TSourceLoc const&, TIntermNode*, glslang::TIntermLoop*)
 T glslang::TParseContext::inheritGlobalDefaults(glslang::TQualifier&) const
 T glslang::TParseContext::integerCheck(glslang::TIntermTyped const*, char const*)
 T glslang::TParseContext::invariantCheck(glslang::TSourceLoc const&, glslang::TQualifier const&)
 T glslang::TParseContext::ioArrayCheck(glslang::TSourceLoc const&, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::isIoResizeArray(glslang::TType const&) const
 T glslang::TParseContext::isRuntimeLength(glslang::TIntermTyped const&) const
 T glslang::TParseContext::lValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
 T glslang::TParseContext::layoutMemberLocationArrayCheck(glslang::TSourceLoc const&, bool, glslang::TArraySizes*)
 T glslang::TParseContext::layoutObjectCheck(glslang::TSourceLoc const&, glslang::TSymbol const&)
 T glslang::TParseContext::layoutQualifierCheck(glslang::TSourceLoc const&, glslang::TQualifier const&)
 T glslang::TParseContext::layoutTypeCheck(glslang::TSourceLoc const&, glslang::TType const&)
 T glslang::TParseContext::limitCheck(glslang::TSourceLoc const&, int, char const*, char const*)
 T glslang::TParseContext::lineContinuationCheck(glslang::TSourceLoc const&, bool)
 T glslang::TParseContext::lineDirectiveShouldSetNextLine() const
 T glslang::TParseContext::makeAttributes(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 T glslang::TParseContext::makeAttributes(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, TIntermNode*) const
 T glslang::TParseContext::makeEditable(glslang::TSymbol*&)
 T glslang::TParseContext::makeInternalVariable(char const*, glslang::TType const&) const
 T glslang::TParseContext::memberQualifierCheck(glslang::TPublicType&)
 T glslang::TParseContext::mergeAttributes(glslang::TList<glslang::TAttributeArgs>*, glslang::TList<glslang::TAttributeArgs>*) const
 T glslang::TParseContext::mergeObjectLayoutQualifiers(glslang::TQualifier&, glslang::TQualifier const&, bool)
 T glslang::TParseContext::mergeQualifiers(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TQualifier const&, bool)
 T glslang::TParseContext::nestedBlockCheck(glslang::TSourceLoc const&)
 T glslang::TParseContext::nestedStructCheck(glslang::TSourceLoc const&)
 T glslang::TParseContext::nonInitConstCheck(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TType&)
 T glslang::TParseContext::nonOpBuiltInCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermAggregate&)
 T glslang::TParseContext::opaqueCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
 T glslang::TParseContext::paramCheckFix(glslang::TSourceLoc const&, glslang::TQualifier const&, glslang::TType&)
 T glslang::TParseContext::paramCheckFixStorage(glslang::TSourceLoc const&, glslang::TStorageQualifier const&, glslang::TType&)
 T glslang::TParseContext::parameterTypeCheck(glslang::TSourceLoc const&, glslang::TStorageQualifier, glslang::TType const&)
 T glslang::TParseContext::parseShaderStrings(glslang::TPpContext&, glslang::TInputScanner&, bool)
 T glslang::TParseContext::parserError(char const*)
 T glslang::TParseContext::precisionQualifierCheck(glslang::TSourceLoc const&, glslang::TBasicType, glslang::TQualifier&)
 T glslang::TParseContext::rValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
 T glslang::TParseContext::redeclareBuiltinBlock(glslang::TSourceLoc const&, glslang::TVector<glslang::TTypeLoc>&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TArraySizes*)
 T glslang::TParseContext::redeclareBuiltinVariable(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TQualifier const&, glslang::TShaderQualifiers const&)
 T glslang::TParseContext::reservedErrorCheck(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::reservedPpErrorCheck(glslang::TSourceLoc const&, char const*, char const*)
 T glslang::TParseContext::samplerCheck(glslang::TSourceLoc const&, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TIntermTyped*)
 T glslang::TParseContext::samplerConstructorLocationCheck(glslang::TSourceLoc const&, char const*, TIntermNode*)
 T glslang::TParseContext::setDefaultPrecision(glslang::TSourceLoc const&, glslang::TPublicType&, glslang::TPrecisionQualifier)
 T glslang::TParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TPublicType&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&)
 T glslang::TParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TPublicType&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TIntermTyped const*)
 T glslang::TParseContext::setLimits(TBuiltInResource const&)
 T glslang::TParseContext::setPrecisionDefaults()
 T glslang::TParseContext::specializationCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
 T glslang::TParseContext::structArrayCheck(glslang::TSourceLoc const&, glslang::TType const&)
 T glslang::TParseContext::structTypeCheck(glslang::TSourceLoc const&, glslang::TPublicType&)
 T glslang::TParseContext::transparentOpaqueCheck(glslang::TSourceLoc const&, glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 T glslang::TParseContext::unaryOpError(glslang::TSourceLoc const&, char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >)
 T glslang::TParseContext::updateStandaloneQualifierDefaults(glslang::TSourceLoc const&, glslang::TPublicType const&)
 T glslang::TParseContext::userFunctionCallCheck(glslang::TSourceLoc const&, glslang::TIntermAggregate&)
 T glslang::TParseContext::variableCheck(glslang::TIntermTyped*&)
 T glslang::TParseContext::voidErrorCheck(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TBasicType)
 T glslang::TParseContext::wrapupSwitchSubsequence(glslang::TIntermAggregate*, TIntermNode*)
 T glslang::TParseContext::~TParseContext()
 T glslang::TParseContextBase::checkIndex(glslang::TSourceLoc const&, glslang::TType const&, int&)
 T glslang::TParseContextBase::error(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
 T glslang::TParseContextBase::finish()
 T glslang::TParseContextBase::getEditableVariable(char const*)
 T glslang::TParseContextBase::growGlobalUniformBlock(glslang::TSourceLoc const&, glslang::TType&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TVector<glslang::TTypeLoc>*)
 T glslang::TParseContextBase::lValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
 T glslang::TParseContextBase::makeEditable(glslang::TSymbol*&)
 T glslang::TParseContextBase::outputMessage(glslang::TSourceLoc const&, char const*, char const*, char const*, glslang::TPrefixType, __va_list_tag*)
 T glslang::TParseContextBase::parseSwizzleSelector(glslang::TSourceLoc const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, int, glslang::TSwizzleSelectors<int>&)
 T glslang::TParseContextBase::ppError(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
 T glslang::TParseContextBase::ppWarn(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
 T glslang::TParseContextBase::rValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
 T glslang::TParseContextBase::selectFunction(glslang::TVector<glslang::TFunction const*>, glslang::TFunction const&, std::function<bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)>, std::function<bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)>, bool&)
 T glslang::TParseContextBase::trackLinkage(glslang::TSymbol&)
 T glslang::TParseContextBase::warn(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
 T glslang::TParseVersions::checkDeprecated(glslang::TSourceLoc const&, int, int, char const*)
 T glslang::TParseVersions::checkExtensionsRequested(glslang::TSourceLoc const&, int, char const* const*, char const*)
 T glslang::TParseVersions::doubleCheck(glslang::TSourceLoc const&, char const*)
 T glslang::TParseVersions::explicitFloat32Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::explicitFloat64Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::explicitInt16Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::explicitInt32Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::explicitInt8Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::extensionTurnedOn(char const*)
 T glslang::TParseVersions::extensionsTurnedOn(int, char const* const*)
 T glslang::TParseVersions::float16Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::float16OpaqueCheck(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::fullIntegerCheck(glslang::TSourceLoc const&, char const*)
 T glslang::TParseVersions::getExtensionBehavior(char const*)
 T glslang::TParseVersions::getPreamble(std::string&)
 T glslang::TParseVersions::initializeExtensionBehavior()
 T glslang::TParseVersions::int64Check(glslang::TSourceLoc const&, char const*, bool)
 T glslang::TParseVersions::ppRequireExtensions(glslang::TSourceLoc const&, int, char const* const*, char const*)
 T glslang::TParseVersions::profileRequires(glslang::TSourceLoc const&, int, int, char const*, char const*)
 T glslang::TParseVersions::profileRequires(glslang::TSourceLoc const&, int, int, int, char const* const*, char const*)
 T glslang::TParseVersions::requireExtensions(glslang::TSourceLoc const&, int, char const* const*, char const*)
 T glslang::TParseVersions::requireNotRemoved(glslang::TSourceLoc const&, int, int, char const*)
 T glslang::TParseVersions::requireProfile(glslang::TSourceLoc const&, int, char const*)
 T glslang::TParseVersions::requireSpv(glslang::TSourceLoc const&, char const*)
 T glslang::TParseVersions::requireStage(glslang::TSourceLoc const&, EShLanguage, char const*)
 T glslang::TParseVersions::requireStage(glslang::TSourceLoc const&, EShLanguageMask, char const*)
 T glslang::TParseVersions::requireVulkan(glslang::TSourceLoc const&, char const*)
 T glslang::TParseVersions::spvRemoved(glslang::TSourceLoc const&, char const*)
 T glslang::TParseVersions::unimplemented(glslang::TSourceLoc const&, char const*)
 T glslang::TParseVersions::updateExtensionBehavior(char const*, glslang::TExtensionBehavior)
 T glslang::TParseVersions::updateExtensionBehavior(int, char const*, char const*)
 T glslang::TParseVersions::vulkanRemoved(glslang::TSourceLoc const&, char const*)
 T glslang::TPoolAllocator::TPoolAllocator(int, int)
 T glslang::TPoolAllocator::allocate(unsigned long)
 T glslang::TPoolAllocator::pop()
 T glslang::TPoolAllocator::popAll()
 T glslang::TPoolAllocator::push()
 T glslang::TPoolAllocator::~TPoolAllocator()
 T glslang::TPpContext::CPPdefine(glslang::TPpToken*)
 T glslang::TPpContext::CPPelse(int, glslang::TPpToken*)
 T glslang::TPpContext::CPPerror(glslang::TPpToken*)
 T glslang::TPpContext::CPPextension(glslang::TPpToken*)
 T glslang::TPpContext::CPPif(glslang::TPpToken*)
 T glslang::TPpContext::CPPifdef(int, glslang::TPpToken*)
 T glslang::TPpContext::CPPinclude(glslang::TPpToken*)
 T glslang::TPpContext::CPPline(glslang::TPpToken*)
 T glslang::TPpContext::CPPpragma(glslang::TPpToken*)
 T glslang::TPpContext::CPPundef(glslang::TPpToken*)
 T glslang::TPpContext::CPPversion(glslang::TPpToken*)
 T glslang::TPpContext::MacroExpand(glslang::TPpToken*, bool, bool)
 T glslang::TPpContext::PrescanMacroArg(glslang::TPpContext::TokenStream&, glslang::TPpToken*, bool)
 T glslang::TPpContext::TPpContext(glslang::TParseContextBase&, std::string const&, glslang::TShader::Includer&)
 T glslang::TPpContext::TokenStream::getSubtoken()
 T glslang::TPpContext::TokenStream::getToken(glslang::TParseContextBase&, glslang::TPpToken*)
 T glslang::TPpContext::TokenStream::peekTokenizedPasting(bool)
 T glslang::TPpContext::TokenStream::peekUntokenizedPasting()
 T glslang::TPpContext::TokenStream::putSubtoken(char)
 T glslang::TPpContext::TokenStream::putToken(int, glslang::TPpToken*)
 T glslang::TPpContext::TokenStream::ungetSubtoken()
 T glslang::TPpContext::UngetToken(int, glslang::TPpToken*)
 T glslang::TPpContext::characterLiteral(glslang::TPpToken*)
 T glslang::TPpContext::eval(int, int, bool, int&, bool&, glslang::TPpToken*)
 T glslang::TPpContext::evalToToken(int, bool, int&, bool&, glslang::TPpToken*)
 T glslang::TPpContext::extraTokenCheck(int, glslang::TPpToken*, int)
 T glslang::TPpContext::lFloatConst(int, int, glslang::TPpToken*)
 T glslang::TPpContext::missingEndifCheck()
 T glslang::TPpContext::pushTokenStreamInput(glslang::TPpContext::TokenStream&, bool)
 T glslang::TPpContext::readCPPline(glslang::TPpToken*)
 T glslang::TPpContext::scanHeaderName(glslang::TPpToken*, char)
 T glslang::TPpContext::setInput(glslang::TInputScanner&, bool)
 T glslang::TPpContext::tMacroInput::scan(glslang::TPpToken*)
 T glslang::TPpContext::tStringInput::scan(glslang::TPpToken*)
 T glslang::TPpContext::tUngotTokenInput::scan(glslang::TPpToken*)
 T glslang::TPpContext::tZeroInput::scan(glslang::TPpToken*)
 T glslang::TPpContext::tokenPaste(int, glslang::TPpToken&)
 T glslang::TPpContext::tokenize(glslang::TPpToken&)
 T glslang::TPpContext::~TPpContext()
 T glslang::TProgram::TProgram()
 T glslang::TProgram::buildReflection()
 T glslang::TProgram::dumpReflection()
 T glslang::TProgram::getAttributeName(int) const
 T glslang::TProgram::getAttributeTType(int) const
 T glslang::TProgram::getAttributeType(int) const
 T glslang::TProgram::getInfoDebugLog()
 T glslang::TProgram::getInfoLog()
 T glslang::TProgram::getLocalSize(int) const
 T glslang::TProgram::getNumLiveAttributes() const
 T glslang::TProgram::getNumLiveUniformBlocks() const
 T glslang::TProgram::getNumLiveUniformVariables() const
 T glslang::TProgram::getUniformArraySize(int) const
 T glslang::TProgram::getUniformBinding(int) const
 T glslang::TProgram::getUniformBlockBinding(int) const
 T glslang::TProgram::getUniformBlockCounterIndex(int) const
 T glslang::TProgram::getUniformBlockIndex(int) const
 T glslang::TProgram::getUniformBlockName(int) const
 T glslang::TProgram::getUniformBlockSize(int) const
 T glslang::TProgram::getUniformBlockTType(int) const
 T glslang::TProgram::getUniformBufferOffset(int) const
 T glslang::TProgram::getUniformIndex(char const*) const
 T glslang::TProgram::getUniformName(int) const
 T glslang::TProgram::getUniformTType(int) const
 T glslang::TProgram::getUniformType(int) const
 T glslang::TProgram::link(EShMessages)
 T glslang::TProgram::linkStage(EShLanguage, EShMessages)
 T glslang::TProgram::mapIO(glslang::TIoMapResolver*)
 T glslang::TProgram::~TProgram()
 T glslang::TReflection::addStage(EShLanguage, glslang::TIntermediate const&)
 T glslang::TReflection::buildAttributeReflection(EShLanguage, glslang::TIntermediate const&)
 T glslang::TReflection::buildCounterIndices(glslang::TIntermediate const&)
 T glslang::TReflection::dump()
 T glslang::TReflectionTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
 T glslang::TReflectionTraverser::visitSymbol(glslang::TIntermSymbol*)
 T glslang::TScanContext::dMat()
 T glslang::TScanContext::deleteKeywordMap()
 T glslang::TScanContext::es30ReservedFromGLSL(int)
 T glslang::TScanContext::fillInKeywordMap()
 T glslang::TScanContext::firstGenerationImage(bool)
 T glslang::TScanContext::identifierOrReserved(bool)
 T glslang::TScanContext::identifierOrType()
 T glslang::TScanContext::matNxM()
 T glslang::TScanContext::nonreservedKeyword(int, int)
 T glslang::TScanContext::precisionKeyword()
 T glslang::TScanContext::reservedWord()
 T glslang::TScanContext::secondGenerationImage()
 T glslang::TScanContext::tokenize(glslang::TPpContext*, glslang::TParserToken&)
 T glslang::TScanContext::tokenizeIdentifier()
 T glslang::TShader::TShader(EShLanguage)
 T glslang::TShader::addProcesses(std::vector<std::string, std::allocator<std::string> > const&)
 T glslang::TShader::getInfoDebugLog()
 T glslang::TShader::getInfoLog()
 T glslang::TShader::parse(TBuiltInResource const*, int, EProfile, bool, bool, EShMessages, glslang::TShader::Includer&)
 T glslang::TShader::preprocess(TBuiltInResource const*, int, EProfile, bool, bool, EShMessages, std::string*, glslang::TShader::Includer&)
 T glslang::TShader::setAutoMapBindings(bool)
 T glslang::TShader::setAutoMapLocations(bool)
 T glslang::TShader::setEntryPoint(char const*)
 T glslang::TShader::setFlattenUniformArrays(bool)
 T glslang::TShader::setHlslIoMapping(bool)
 T glslang::TShader::setInvertY(bool)
 T glslang::TShader::setNoStorageFormat(bool)
 T glslang::TShader::setResourceSetBinding(std::vector<std::string, std::allocator<std::string> > const&)
 T glslang::TShader::setShiftBinding(glslang::TResourceType, unsigned int)
 T glslang::TShader::setShiftBindingForSet(glslang::TResourceType, unsigned int, unsigned int)
 T glslang::TShader::setShiftCbufferBinding(unsigned int)
 T glslang::TShader::setShiftImageBinding(unsigned int)
 T glslang::TShader::setShiftSamplerBinding(unsigned int)
 T glslang::TShader::setShiftSsboBinding(unsigned int)
 T glslang::TShader::setShiftTextureBinding(unsigned int)
 T glslang::TShader::setShiftUavBinding(unsigned int)
 T glslang::TShader::setShiftUboBinding(unsigned int)
 T glslang::TShader::setSourceEntryPoint(char const*)
 T glslang::TShader::setStrings(char const* const*, int)
 T glslang::TShader::setStringsWithLengths(char const* const*, int const*, int)
 T glslang::TShader::setStringsWithLengthsAndNames(char const* const*, int const*, char const* const*, int)
 T glslang::TShader::setTextureSamplerTransformMode(EShTextureSamplerTransformMode)
 T glslang::TShader::~TShader()
 T glslang::TStringAtomMap::TStringAtomMap()
 T glslang::TSymbol::TSymbol(glslang::TSymbol const&)
 T glslang::TSymbolTable::copyTable(glslang::TSymbolTable const&)
 T glslang::TSymbolTable::dump(TInfoSink&) const
 T glslang::TSymbolTableLevel::clone() const
 T glslang::TSymbolTableLevel::dump(TInfoSink&) const
 T glslang::TSymbolTableLevel::readOnly()
 T glslang::TSymbolTableLevel::relateToOperator(char const*, glslang::TOperator)
 T glslang::TSymbolTableLevel::setFunctionExtensions(char const*, int, char const* const*)
 T glslang::TSymbolTableLevel::~TSymbolTableLevel()
 T glslang::TType::buildMangledName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&) const
 T glslang::TVariable::TVariable(glslang::TVariable const&)
 T glslang::TVariable::clone() const
 T glslang::TVariable::dump(TInfoSink&) const
 T libspirv::ArithmeticsPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::AssemblyContext::GetNumericIds() const
 T libspirv::AssemblyContext::advance()
 T libspirv::AssemblyContext::binaryEncodeNumericLiteral(char const*, spv_result_t, libspirv::IdType const&, spv_instruction_t*)
 T libspirv::AssemblyContext::binaryEncodeString(char const*, spv_instruction_t*)
 T libspirv::AssemblyContext::binaryEncodeU32(unsigned int, spv_instruction_t*)
 T libspirv::AssemblyContext::getBound() const
 T libspirv::AssemblyContext::getExtInstTypeForId(unsigned int) const
 T libspirv::AssemblyContext::getTypeOfTypeGeneratingValue(unsigned int) const
 T libspirv::AssemblyContext::getTypeOfValueInstruction(unsigned int) const
 T libspirv::AssemblyContext::getWord(std::string*, spv_position_t*)
 T libspirv::AssemblyContext::hasText() const
 T libspirv::AssemblyContext::isStartOfNewInst()
 T libspirv::AssemblyContext::peek() const
 T libspirv::AssemblyContext::recordIdAsExtInstImport(unsigned int, spv_ext_inst_type_t)
 T libspirv::AssemblyContext::recordTypeDefinition(spv_instruction_t const*)
 T libspirv::AssemblyContext::recordTypeIdForValue(unsigned int, unsigned int)
 T libspirv::AssemblyContext::seekForward(unsigned int)
 T libspirv::AssemblyContext::spvNamedIdAssignOrGet(char const*)
 T libspirv::AssemblyContext::startsWithOp()
 T libspirv::AssemblyGrammar::filterCapsAgainstTargetEnv(SpvCapability_ const*, unsigned int) const
 T libspirv::AssemblyGrammar::isValid() const
 T libspirv::AssemblyGrammar::lookupExtInst(spv_ext_inst_type_t, char const*, spv_ext_inst_desc_t const**) const
 T libspirv::AssemblyGrammar::lookupExtInst(spv_ext_inst_type_t, unsigned int, spv_ext_inst_desc_t const**) const
 T libspirv::AssemblyGrammar::lookupOpcode(SpvOp_, spv_opcode_desc_t const**) const
 T libspirv::AssemblyGrammar::lookupOpcode(char const*, spv_opcode_desc_t const**) const
 T libspirv::AssemblyGrammar::lookupOperand(spv_operand_type_t, char const*, unsigned long, spv_operand_desc_t const**) const
 T libspirv::AssemblyGrammar::lookupOperand(spv_operand_type_t, unsigned int, spv_operand_desc_t const**) const
 T libspirv::AssemblyGrammar::lookupSpecConstantOpcode(SpvOp_) const
 T libspirv::AssemblyGrammar::lookupSpecConstantOpcode(char const*, SpvOp_*) const
 T libspirv::AssemblyGrammar::parseMaskOperand(spv_operand_type_t, char const*, unsigned int*) const
 T libspirv::AssemblyGrammar::pushOperandTypesForMask(spv_operand_type_t, unsigned int, std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >*) const
 T libspirv::AtomicsPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::BarriersPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::BasicBlock::BasicBlock(unsigned int)
 T libspirv::BasicBlock::DominatorIterator::DominatorIterator()
 T libspirv::BasicBlock::DominatorIterator::DominatorIterator(libspirv::BasicBlock const*, std::function<libspirv::BasicBlock const* (libspirv::BasicBlock const*)>)
 T libspirv::BasicBlock::DominatorIterator::operator*()
 T libspirv::BasicBlock::DominatorIterator::operator++()
 T libspirv::BasicBlock::RegisterBranchInstruction(SpvOp_)
 T libspirv::BasicBlock::RegisterSuccessors(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&)
 T libspirv::BasicBlock::SetImmediateDominator(libspirv::BasicBlock*)
 T libspirv::BasicBlock::SetImmediatePostDominator(libspirv::BasicBlock*)
 T libspirv::BasicBlock::dom_begin()
 T libspirv::BasicBlock::dom_begin() const
 T libspirv::BasicBlock::dom_end()
 T libspirv::BasicBlock::dom_end() const
 T libspirv::BasicBlock::dominates(libspirv::BasicBlock const&) const
 T libspirv::BasicBlock::immediate_dominator()
 T libspirv::BasicBlock::immediate_dominator() const
 T libspirv::BasicBlock::immediate_post_dominator()
 T libspirv::BasicBlock::immediate_post_dominator() const
 T libspirv::BasicBlock::pdom_begin()
 T libspirv::BasicBlock::pdom_begin() const
 T libspirv::BasicBlock::pdom_end()
 T libspirv::BasicBlock::pdom_end() const
 T libspirv::BasicBlock::postdominates(libspirv::BasicBlock const&) const
 T libspirv::BitwisePass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::CapabilityCheck(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::CapabilityPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::CapabilityToString(SpvCapability_)
 T libspirv::CfgPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::CheckIdDefinitionDominateUse(libspirv::ValidationState_t const&)
 T libspirv::CheckIfKnownExtension(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::CompositesPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::Construct::Construct(libspirv::ConstructType, libspirv::BasicBlock*, libspirv::BasicBlock*, std::vector<libspirv::Construct*, std::allocator<libspirv::Construct*> >)
 T libspirv::Construct::corresponding_constructs()
 T libspirv::Construct::corresponding_constructs() const
 T libspirv::Construct::entry_block()
 T libspirv::Construct::entry_block() const
 T libspirv::Construct::exit_block()
 T libspirv::Construct::exit_block() const
 T libspirv::Construct::set_corresponding_constructs(std::vector<libspirv::Construct*, std::allocator<libspirv::Construct*> >)
 T libspirv::Construct::set_exit(libspirv::BasicBlock*)
 T libspirv::Construct::type() const
 T libspirv::ConstructErrorString(libspirv::Construct const&, std::string const&, std::string const&, std::string const&)
 T libspirv::ConstructNames(libspirv::ConstructType)
 T libspirv::ConversionPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::DataRulesPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::DerivativesPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::DiagnosticStream::DiagnosticStream(libspirv::DiagnosticStream&&)
 T libspirv::DiagnosticStream::~DiagnosticStream()
 T libspirv::EmitNumericLiteral(std::ostream*, spv_parsed_instruction_t const&, spv_parsed_operand_t const&)
 T libspirv::ExtInstPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::ExtensionCheck(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::ExtensionSetToString(libspirv::EnumSet<libspirv::Extension> const&)
 T libspirv::ExtensionToString(libspirv::Extension)
 T libspirv::FirstBlockAssert(libspirv::ValidationState_t&, unsigned int)
 T libspirv::FriendlyNameMapper::FriendlyNameMapper(spv_context_t const*, unsigned int const*, unsigned long)
 T libspirv::FriendlyNameMapper::NameForEnumOperand(spv_operand_type_t, unsigned int)
 T libspirv::FriendlyNameMapper::NameForId(unsigned int)
 T libspirv::FriendlyNameMapper::ParseInstruction(spv_parsed_instruction_t const&)
 T libspirv::FriendlyNameMapper::Sanitize(std::string const&)
 T libspirv::FriendlyNameMapper::SaveBuiltInName(unsigned int, unsigned int)
 T libspirv::FriendlyNameMapper::SaveName(unsigned int, std::string const&)
 T libspirv::Function::AddConstruct(libspirv::Construct const&)
 T libspirv::Function::AugmentedCFGPredecessorsFunction() const
 T libspirv::Function::AugmentedCFGSuccessorsFunction() const
 T libspirv::Function::AugmentedCFGSuccessorsFunctionIncludingHeaderToContinueEdge() const
 T libspirv::Function::ComputeAugmentedCFG()
 T libspirv::Function::FindConstructForEntryBlock(libspirv::BasicBlock const*, libspirv::ConstructType)
 T libspirv::Function::Function(unsigned int, unsigned int, SpvFunctionControlMask_, unsigned int)
 T libspirv::Function::GetBlock(unsigned int)
 T libspirv::Function::GetBlock(unsigned int) const
 T libspirv::Function::GetBlockDepth(libspirv::BasicBlock*)
 T libspirv::Function::IsBlockType(unsigned int, libspirv::BlockType) const
 T libspirv::Function::IsCompatibleWithExecutionModel(SpvExecutionModel_, std::string*) const
 T libspirv::Function::IsFirstBlock(unsigned int) const
 T libspirv::Function::RegisterBlock(unsigned int, bool)
 T libspirv::Function::RegisterBlockEnd(std::vector<unsigned int, std::allocator<unsigned int> >, SpvOp_)
 T libspirv::Function::RegisterExecutionModelLimitation(SpvExecutionModel_, std::string const&)
 T libspirv::Function::RegisterFunctionEnd()
 T libspirv::Function::RegisterFunctionParameter(unsigned int, unsigned int)
 T libspirv::Function::RegisterLoopMerge(unsigned int, unsigned int)
 T libspirv::Function::RegisterSelectionMerge(unsigned int)
 T libspirv::Function::RegisterSetFunctionDeclType(libspirv::FunctionDecl)
 T libspirv::Function::block_count() const
 T libspirv::Function::constructs()
 T libspirv::Function::constructs() const
 T libspirv::Function::current_block()
 T libspirv::Function::current_block() const
 T libspirv::Function::first_block()
 T libspirv::Function::first_block() const
 T libspirv::Function::ordered_blocks()
 T libspirv::Function::ordered_blocks() const
 T libspirv::Function::undefined_block_count() const
 T libspirv::GetExtensionFromString(char const*, libspirv::Extension*)
 T libspirv::GetExtensionString(spv_parsed_instruction_t const*)
 T libspirv::GetTrivialNameMapper()
 T libspirv::IdPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::ImagePass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::Instruction::Instruction(spv_parsed_instruction_t const*, libspirv::Function*, libspirv::BasicBlock*)
 T libspirv::Instruction::RegisterUse(libspirv::Instruction const*, unsigned int)
 T libspirv::InstructionPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::LimitCheckIdBound(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::LimitCheckNumVars(libspirv::ValidationState_t&, unsigned int, SpvStorageClass_)
 T libspirv::LimitCheckStruct(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::LimitCheckSwitch(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::LiteralsPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::LogicalsPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::MergeBlockAssert(libspirv::ValidationState_t&, unsigned int)
 T libspirv::ModuleLayoutPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::NonUniformPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::PerformCfgChecks(libspirv::ValidationState_t&)
 T libspirv::PrimitivesPass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::RegisterDecorations(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::SetContextMessageConsumer(spv_context_t*, std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
 T libspirv::StructuredControlFlowChecks(libspirv::ValidationState_t const&, libspirv::Function const&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&)
 T libspirv::TypeUniquePass(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::UpdateContinueConstructExitBlocks(libspirv::Function&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&)
 T libspirv::UpdateIdUse(libspirv::ValidationState_t&)
 T libspirv::UseDiagnosticAsMessageConsumer(spv_context_t*, spv_diagnostic_t**)
 T libspirv::ValidateAdjacency(libspirv::ValidationState_t&)
 T libspirv::ValidateBuiltIns(libspirv::ValidationState_t const&)
 T libspirv::ValidateConstructSize(libspirv::ConstructType, unsigned long)
 T libspirv::ValidateDecorations(libspirv::ValidationState_t&)
 T libspirv::ValidateMemoryScope(libspirv::ValidationState_t&, spv_parsed_instruction_t const*, unsigned int)
 T libspirv::ValidateMemorySemantics(libspirv::ValidationState_t&, spv_parsed_instruction_t const*, unsigned int)
 T libspirv::ValidationState_t::AssignNameToId(unsigned int, std::string)
 T libspirv::ValidationState_t::ComputeFunctionToEntryPointMapping()
 T libspirv::ValidationState_t::EvalInt32IfConst(unsigned int)
 T libspirv::ValidationState_t::FindDef(unsigned int)
 T libspirv::ValidationState_t::FindDef(unsigned int) const
 T libspirv::ValidationState_t::ForwardDeclareId(unsigned int)
 T libspirv::ValidationState_t::FunctionEntryPoints(unsigned int) const
 T libspirv::ValidationState_t::GetBitWidth(unsigned int) const
 T libspirv::ValidationState_t::GetComponentType(unsigned int) const
 T libspirv::ValidationState_t::GetConstantValUint64(unsigned int, unsigned long*) const
 T libspirv::ValidationState_t::GetDimension(unsigned int) const
 T libspirv::ValidationState_t::GetIdOpcode(unsigned int) const
 T libspirv::ValidationState_t::GetMatrixTypeInfo(unsigned int, unsigned int*, unsigned int*, unsigned int*, unsigned int*) const
 T libspirv::ValidationState_t::GetOperandTypeId(spv_parsed_instruction_t const*, unsigned long) const
 T libspirv::ValidationState_t::GetPointerTypeInfo(unsigned int, unsigned int*, unsigned int*) const
 T libspirv::ValidationState_t::GetStructMemberTypes(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> >*) const
 T libspirv::ValidationState_t::GetTypeId(unsigned int) const
 T libspirv::ValidationState_t::HasAnyOfCapabilities(libspirv::EnumSet<SpvCapability_> const&) const
 T libspirv::ValidationState_t::HasAnyOfExtensions(libspirv::EnumSet<libspirv::Extension> const&) const
 T libspirv::ValidationState_t::IsBoolScalarOrVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsBoolScalarType(unsigned int) const
 T libspirv::ValidationState_t::IsBoolVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsDefinedId(unsigned int) const
 T libspirv::ValidationState_t::IsFloatMatrixType(unsigned int) const
 T libspirv::ValidationState_t::IsFloatScalarOrVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsFloatScalarType(unsigned int) const
 T libspirv::ValidationState_t::IsFloatVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsForwardPointer(unsigned int) const
 T libspirv::ValidationState_t::IsIntScalarOrVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsIntScalarType(unsigned int) const
 T libspirv::ValidationState_t::IsIntVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsOpcodeInCurrentLayoutSection(SpvOp_)
 T libspirv::ValidationState_t::IsPointerType(unsigned int) const
 T libspirv::ValidationState_t::IsSignedIntScalarType(unsigned int) const
 T libspirv::ValidationState_t::IsSignedIntVectorType(unsigned int) const
 T libspirv::ValidationState_t::IsUnsignedIntScalarType(unsigned int) const
 T libspirv::ValidationState_t::IsUnsignedIntVectorType(unsigned int) const
 T libspirv::ValidationState_t::ProgressToNextLayoutSectionOrder()
 T libspirv::ValidationState_t::RegisterCapability(SpvCapability_)
 T libspirv::ValidationState_t::RegisterExtension(libspirv::Extension)
 T libspirv::ValidationState_t::RegisterForwardPointer(unsigned int)
 T libspirv::ValidationState_t::RegisterFunction(unsigned int, unsigned int, SpvFunctionControlMask_, unsigned int)
 T libspirv::ValidationState_t::RegisterFunctionEnd()
 T libspirv::ValidationState_t::RegisterInstruction(spv_parsed_instruction_t const&)
 T libspirv::ValidationState_t::RegisterSampledImageConsumer(unsigned int, unsigned int)
 T libspirv::ValidationState_t::RegisterUniqueTypeDeclaration(spv_parsed_instruction_t const&)
 T libspirv::ValidationState_t::RemoveIfForwardDeclared(unsigned int)
 T libspirv::ValidationState_t::UnresolvedForwardIds() const
 T libspirv::ValidationState_t::ValidationState_t(spv_context_t const*, spv_validator_options_t const*)
 T libspirv::ValidationState_t::addressing_model() const
 T libspirv::ValidationState_t::current_function()
 T libspirv::ValidationState_t::current_function() const
 T libspirv::ValidationState_t::current_layout_section() const
 T libspirv::ValidationState_t::diag(spv_result_t) const
 T libspirv::ValidationState_t::function(unsigned int) const
 T libspirv::ValidationState_t::functions()
 T libspirv::ValidationState_t::getIdBound() const
 T libspirv::ValidationState_t::getIdName(unsigned int) const
 T libspirv::ValidationState_t::getIdOrName(unsigned int) const
 T libspirv::ValidationState_t::getSampledImageConsumers(unsigned int) const
 T libspirv::ValidationState_t::in_block() const
 T libspirv::ValidationState_t::in_function_body() const
 T libspirv::ValidationState_t::increment_instruction_count()
 T libspirv::ValidationState_t::memory_model() const
 T libspirv::ValidationState_t::setIdBound(unsigned int)
 T libspirv::ValidationState_t::set_addressing_model(SpvAddressingModel_)
 T libspirv::ValidationState_t::set_memory_model(SpvMemoryModel_)
 T libspirv::ValidationState_t::unresolved_forward_id_count() const
 T libspirv::VersionCheck(libspirv::ValidationState_t&, spv_parsed_instruction_t const*)
 T libspirv::clr::blue::operator char const*()
 T libspirv::clr::green::operator char const*()
 T libspirv::clr::grey::operator char const*()
 T libspirv::clr::red::operator char const*()
 T libspirv::clr::reset::operator char const*()
 T libspirv::clr::yellow::operator char const*()
 T libspirv::operator!=(libspirv::BasicBlock::DominatorIterator const&, libspirv::BasicBlock::DominatorIterator const&)
 T libspirv::operator<(libspirv::Instruction const&, libspirv::Instruction const&)
 T libspirv::operator<(libspirv::Instruction const&, unsigned int)
 T libspirv::operator==(libspirv::BasicBlock::DominatorIterator const&, libspirv::BasicBlock::DominatorIterator const&)
 T libspirv::operator==(libspirv::Instruction const&, libspirv::Instruction const&)
 T libspirv::operator==(libspirv::Instruction const&, unsigned int)
 T libspirv::printDominatorList(libspirv::BasicBlock const&)
 T libspirv::spvResultToString(spv_result_t)
 T operator delete(void*)
 T operator delete[](void*)
 T operator new(unsigned long)
 T operator new[](unsigned long)
 T spv::Builder::Builder(unsigned int, unsigned int, spv::SpvBuildLogger*)
 T spv::Builder::If::If(unsigned int, unsigned int, spv::Builder&)
 T spv::Builder::If::makeBeginElse()
 T spv::Builder::If::makeEndIf()
 T spv::Builder::accessChainGetInferredType()
 T spv::Builder::accessChainGetLValue()
 T spv::Builder::accessChainLoad(spv::Decoration, spv::Decoration, unsigned int)
 T spv::Builder::accessChainPushSwizzle(std::vector<unsigned int, std::allocator<unsigned int> >&, unsigned int)
 T spv::Builder::accessChainStore(unsigned int)
 T spv::Builder::addDecoration(unsigned int, spv::Decoration, char const*)
 T spv::Builder::addDecoration(unsigned int, spv::Decoration, int)
 T spv::Builder::addDecorationId(unsigned int, spv::Decoration, unsigned int)
 T spv::Builder::addEntryPoint(spv::ExecutionModel, spv::Function*, char const*)
 T spv::Builder::addExecutionMode(spv::Function*, spv::ExecutionMode, int, int, int)
 T spv::Builder::addLine(unsigned int, int, int)
 T spv::Builder::addMemberDecoration(unsigned int, unsigned int, spv::Decoration, char const*)
 T spv::Builder::addMemberDecoration(unsigned int, unsigned int, spv::Decoration, int)
 T spv::Builder::addMemberName(unsigned int, int, char const*)
 T spv::Builder::addName(unsigned int, char const*)
 T spv::Builder::addSwitchBreak()
 T spv::Builder::clearAccessChain()
 T spv::Builder::closeLoop()
 T spv::Builder::collapseAccessChain()
 T spv::Builder::createAccessChain(spv::StorageClass, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createAndSetNoPredecessorBlock(char const*)
 T spv::Builder::createArrayLength(unsigned int, unsigned int)
 T spv::Builder::createBinOp(spv::Op, unsigned int, unsigned int, unsigned int)
 T spv::Builder::createBranch(spv::Block*)
 T spv::Builder::createBuiltinCall(unsigned int, unsigned int, int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createCompositeCompare(spv::Decoration, unsigned int, unsigned int, bool)
 T spv::Builder::createCompositeConstruct(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createCompositeExtract(unsigned int, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createCompositeExtract(unsigned int, unsigned int, unsigned int)
 T spv::Builder::createCompositeInsert(unsigned int, unsigned int, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createCompositeInsert(unsigned int, unsigned int, unsigned int, unsigned int)
 T spv::Builder::createConditionalBranch(unsigned int, spv::Block*, spv::Block*)
 T spv::Builder::createConstructor(spv::Decoration, std::vector<unsigned int, std::allocator<unsigned int> > const&, unsigned int)
 T spv::Builder::createControlBarrier(spv::Scope, spv::Scope, spv::MemorySemanticsMask)
 T spv::Builder::createFunctionCall(spv::Function*, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createLoad(unsigned int)
 T spv::Builder::createLoopContinue()
 T spv::Builder::createLoopExit()
 T spv::Builder::createLoopMerge(spv::Block*, spv::Block*, unsigned int, unsigned int)
 T spv::Builder::createLvalueSwizzle(unsigned int, unsigned int, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createMatrixConstructor(spv::Decoration, std::vector<unsigned int, std::allocator<unsigned int> > const&, unsigned int)
 T spv::Builder::createMemoryBarrier(unsigned int, unsigned int)
 T spv::Builder::createNoResultOp(spv::Op)
 T spv::Builder::createNoResultOp(spv::Op, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createNoResultOp(spv::Op, unsigned int)
 T spv::Builder::createOp(spv::Op, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createRvalueSwizzle(spv::Decoration, unsigned int, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createSelectionMerge(spv::Block*, unsigned int)
 T spv::Builder::createSpecConstantOp(spv::Op, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::createStore(unsigned int, unsigned int)
 T spv::Builder::createTextureCall(spv::Decoration, unsigned int, bool, bool, bool, bool, bool, spv::Builder::TextureParameters const&)
 T spv::Builder::createTextureQueryCall(spv::Op, spv::Builder::TextureParameters const&, bool)
 T spv::Builder::createTriOp(spv::Op, unsigned int, unsigned int, unsigned int, unsigned int)
 T spv::Builder::createUnaryOp(spv::Op, unsigned int, unsigned int)
 T spv::Builder::createUndefined(unsigned int)
 T spv::Builder::createVariable(spv::StorageClass, unsigned int, char const*)
 T spv::Builder::createVectorExtractDynamic(unsigned int, unsigned int, unsigned int)
 T spv::Builder::createVectorInsertDynamic(unsigned int, unsigned int, unsigned int, unsigned int)
 T spv::Builder::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const
 T spv::Builder::dumpInstructions(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >, std::allocator<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> > > > const&) const
 T spv::Builder::dumpModuleProcesses(std::vector<unsigned int, std::allocator<unsigned int> >&) const
 T spv::Builder::dumpSourceInstructions(std::vector<unsigned int, std::allocator<unsigned int> >&) const
 T spv::Builder::eliminateDeadDecorations()
 T spv::Builder::endSwitch(std::vector<spv::Block*, std::allocator<spv::Block*> >&)
 T spv::Builder::findCompositeConstant(spv::Op, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::findScalarConstant(spv::Op, spv::Op, unsigned int, unsigned int)
 T spv::Builder::findScalarConstant(spv::Op, spv::Op, unsigned int, unsigned int, unsigned int)
 T spv::Builder::findStructConstant(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::getContainedTypeId(unsigned int) const
 T spv::Builder::getContainedTypeId(unsigned int, int) const
 T spv::Builder::getDerefTypeId(unsigned int) const
 T spv::Builder::getMostBasicTypeClass(unsigned int) const
 T spv::Builder::getNumTypeConstituents(unsigned int) const
 T spv::Builder::getScalarTypeId(unsigned int) const
 T spv::Builder::import(char const*)
 T spv::Builder::isConstantOpCode(spv::Op) const
 T spv::Builder::isSpecConstantOpCode(spv::Op) const
 T spv::Builder::leaveFunction()
 T spv::Builder::makeArrayType(unsigned int, unsigned int, int)
 T spv::Builder::makeBoolConstant(bool, bool)
 T spv::Builder::makeBoolType()
 T spv::Builder::makeCompositeConstant(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&, bool)
 T spv::Builder::makeDiscard()
 T spv::Builder::makeDoubleConstant(double, bool)
 T spv::Builder::makeEntryPoint(char const*)
 T spv::Builder::makeFloat16Constant(float, bool)
 T spv::Builder::makeFloatConstant(float, bool)
 T spv::Builder::makeFloatType(int)
 T spv::Builder::makeFpConstant(unsigned int, double, bool)
 T spv::Builder::makeFunctionEntry(spv::Decoration, unsigned int, char const*, std::vector<unsigned int, std::allocator<unsigned int> > const&, std::vector<std::vector<spv::Decoration, std::allocator<spv::Decoration> >, std::allocator<std::vector<spv::Decoration, std::allocator<spv::Decoration> > > > const&, spv::Block**)
 T spv::Builder::makeFunctionType(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spv::Builder::makeImageType(unsigned int, spv::Dim, bool, bool, bool, unsigned int, spv::ImageFormat)
 T spv::Builder::makeInt64Constant(unsigned int, unsigned long long, bool)
 T spv::Builder::makeIntConstant(unsigned int, unsigned int, bool)
 T spv::Builder::makeIntegerType(int, bool)
 T spv::Builder::makeMatrixType(unsigned int, int, int)
 T spv::Builder::makeNewBlock()
 T spv::Builder::makeNewLoop()
 T spv::Builder::makePointer(spv::StorageClass, unsigned int)
 T spv::Builder::makeReturn(bool, unsigned int)
 T spv::Builder::makeRuntimeArray(unsigned int)
 T spv::Builder::makeSampledImageType(unsigned int)
 T spv::Builder::makeSamplerType()
 T spv::Builder::makeStructResultType(unsigned int, unsigned int)
 T spv::Builder::makeStructType(std::vector<unsigned int, std::allocator<unsigned int> > const&, char const*)
 T spv::Builder::makeSwitch(unsigned int, unsigned int, int, std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, int, std::vector<spv::Block*, std::allocator<spv::Block*> >&)
 T spv::Builder::makeVectorType(unsigned int, int)
 T spv::Builder::makeVoidType()
 T spv::Builder::nextSwitchSegment(std::vector<spv::Block*, std::allocator<spv::Block*> >&, int)
 T spv::Builder::promoteScalar(spv::Decoration, unsigned int&, unsigned int&)
 T spv::Builder::remapDynamicSwizzle()
 T spv::Builder::setLine(int)
 T spv::Builder::simplifyAccessChainSwizzle()
 T spv::Builder::smearScalar(spv::Decoration, unsigned int, unsigned int)
 T spv::Builder::transferAccessChainSwizzle(bool)
 T spv::Builder::~Builder()
 T spv::SpvBuildLogger::getAllMessages() const
 T spv::SpvBuildLogger::missingFunctionality(std::string const&)
 T spv::SpvBuildLogger::tbdFunctionality(std::string const&)
 T spv::inReadableOrder(spv::Block*, std::function<void (spv::Block*)>)
 T spvAlternatePatternFollowingImmediate(std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> > const&)
 T spvBinaryDestroy
 T spvBinaryEndianness(spv_const_binary_t*, spv_endianness_t*)
 T spvBinaryHeaderGet(spv_const_binary_t*, spv_endianness_t, spv_header_t*)
 T spvBinaryParse
 T spvBinaryToText
 T spvContextCreate
 T spvContextDestroy
 T spvDiagnosticCreate
 T spvDiagnosticDestroy
 T spvDiagnosticPrint
 T spvExpandOperandSequenceOnce(spv_operand_type_t, std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >*)
 T spvExtInstImportTypeGet(char const*)
 T spvExtInstTableGet(spv_ext_inst_table_t const**, spv_target_env)
 T spvExtInstTableNameLookup(spv_ext_inst_table_t const*, spv_ext_inst_type_t, char const*, spv_ext_inst_desc_t const**)
 T spvExtInstTableValueLookup(spv_ext_inst_table_t const*, spv_ext_inst_type_t, unsigned int, spv_ext_inst_desc_t const**)
 T spvFixDoubleWord(unsigned int, unsigned int, spv_endianness_t)
 T spvFixWord(unsigned int, spv_endianness_t)
 T spvGeneratorStr(unsigned int)
 T spvInstructionCopy(unsigned int const*, SpvOp_, unsigned short, spv_endianness_t, spv_instruction_t*)
 T spvIsHostEndian(spv_endianness_t)
 T spvIsIdType(spv_operand_type_t)
 T spvIsValidID(char const*)
 T spvIsValidIDCharacter(char)
 T spvIsVulkanEnv(spv_target_env)
 T spvOpcodeGeneratesType(SpvOp_)
 T spvOpcodeIsAtomicOp(SpvOp_)
 T spvOpcodeIsBaseOpaqueType(SpvOp_)
 T spvOpcodeIsBlockTerminator(SpvOp_)
 T spvOpcodeIsBranch(SpvOp_)
 T spvOpcodeIsComposite(SpvOp_)
 T spvOpcodeIsConstant(SpvOp_)
 T spvOpcodeIsConstantOrUndef(SpvOp_)
 T spvOpcodeIsDecoration(SpvOp_)
 T spvOpcodeIsLoad(SpvOp_)
 T spvOpcodeIsNonUniformGroupOperation(SpvOp_)
 T spvOpcodeIsReturn(SpvOp_)
 T spvOpcodeIsReturnOrAbort(SpvOp_)
 T spvOpcodeIsScalarSpecConstant(SpvOp_)
 T spvOpcodeIsScalarType(SpvOp_)
 T spvOpcodeIsScalarizable(SpvOp_)
 T spvOpcodeIsSpecConstant(SpvOp_)
 T spvOpcodeMake(unsigned short, SpvOp_)
 T spvOpcodeReturnsLogicalPointer(SpvOp_)
 T spvOpcodeReturnsLogicalVariablePointer(SpvOp_)
 T spvOpcodeSplit(unsigned int, unsigned short*, unsigned short*)
 T spvOpcodeString(SpvOp_)
 T spvOpcodeTableGet(spv_opcode_table_t const**, spv_target_env)
 T spvOpcodeTableNameLookup(spv_target_env, spv_opcode_table_t const*, char const*, spv_opcode_desc_t const**)
 T spvOpcodeTableValueLookup(spv_target_env, spv_opcode_table_t const*, SpvOp_, spv_opcode_desc_t const**)
 T spvOperandCanBeForwardDeclaredFunction(SpvOp_)
 T spvOperandIsConcrete(spv_operand_type_t)
 T spvOperandIsConcreteMask(spv_operand_type_t)
 T spvOperandIsOptional(spv_operand_type_t)
 T spvOperandIsVariable(spv_operand_type_t)
 T spvOperandTableGet(spv_operand_table_t const**, spv_target_env)
 T spvOperandTableNameLookup(spv_target_env, spv_operand_table_t const*, spv_operand_type_t, char const*, unsigned long, spv_operand_desc_t const**)
 T spvOperandTableValueLookup(spv_target_env, spv_operand_table_t const*, spv_operand_type_t, unsigned int, spv_operand_desc_t const**)
 T spvOperandTypeStr(spv_operand_type_t)
 T spvParseTargetEnv(char const*, spv_target_env*)
 T spvParseUniversalLimitsOptions(char const*, spv_validator_limit*)
 T spvPushOperandTypes(spv_operand_type_t const*, std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >*)
 T spvPushOperandTypesForMask(spv_target_env, spv_operand_table_t const*, spv_operand_type_t, unsigned int, std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >*)
 T spvTakeFirstMatchableOperand(std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >*)
 T spvTargetEnvDescription
 T spvTextDestroy
 T spvTextEncodeOperand(libspirv::AssemblyGrammar const&, libspirv::AssemblyContext*, spv_operand_type_t, char const*, spv_instruction_t*, std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >*)
 T spvTextToBinary
 T spvTextToBinaryWithOptions
 T spvTextToLiteral(char const*, spv_literal_t*)
 T spvValidate
 T spvValidateBinary
 T spvValidateIDs(spv_instruction_t const*, unsigned long, libspirv::ValidationState_t const&, spv_position_t*)
 T spvValidateInstructionIDs(spv_instruction_t const*, unsigned long, libspirv::ValidationState_t const&, spv_position_t*)
 T spvValidateWithOptions
 T spvValidatorOptionsCreate
 T spvValidatorOptionsDestroy
 T spvValidatorOptionsSetRelaxLogicalPointer
 T spvValidatorOptionsSetRelaxStoreStruct
 T spvValidatorOptionsSetUniversalLimit
 T spvVersionForTargetEnv(spv_target_env)
 T spv_strnlen_s(char const*, unsigned long)
 T spvtools::BuildModule(spv_target_env, std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>, std::string const&, unsigned int)
 T spvtools::BuildModule(spv_target_env, std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>, unsigned int const*, unsigned long)
 T spvtools::Context::CContext()
 T spvtools::Context::CContext() const
 T spvtools::Context::Context(spv_target_env)
 T spvtools::Context::Context(spvtools::Context&&)
 T spvtools::Context::SetMessageConsumer(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
 T spvtools::Context::operator=(spvtools::Context&&)
 T spvtools::Context::~Context()
 T spvtools::CreateAggressiveDCEPass()
 T spvtools::CreateBlockMergePass()
 T spvtools::CreateCCPPass()
 T spvtools::CreateCFGCleanupPass()
 T spvtools::CreateCommonUniformElimPass()
 T spvtools::CreateCompactIdsPass()
 T spvtools::CreateCopyPropagateArraysPass()
 T spvtools::CreateDeadBranchElimPass()
 T spvtools::CreateDeadInsertElimPass()
 T spvtools::CreateDeadVariableEliminationPass()
 T spvtools::CreateEliminateDeadConstantPass()
 T spvtools::CreateEliminateDeadFunctionsPass()
 T spvtools::CreateFlattenDecorationPass()
 T spvtools::CreateFoldSpecConstantOpAndCompositePass()
 T spvtools::CreateFreezeSpecConstantValuePass()
 T spvtools::CreateIfConversionPass()
 T spvtools::CreateInlineExhaustivePass()
 T spvtools::CreateInlineOpaquePass()
 T spvtools::CreateInsertExtractElimPass()
 T spvtools::CreateLocalAccessChainConvertPass()
 T spvtools::CreateLocalMultiStoreElimPass()
 T spvtools::CreateLocalRedundancyEliminationPass()
 T spvtools::CreateLocalSingleBlockLoadStoreElimPass()
 T spvtools::CreateLocalSingleStoreElimPass()
 T spvtools::CreateLoopFissionPass(unsigned long)
 T spvtools::CreateLoopFusionPass(unsigned long)
 T spvtools::CreateLoopInvariantCodeMotionPass()
 T spvtools::CreateLoopPeelingPass()
 T spvtools::CreateLoopUnrollPass(bool, int)
 T spvtools::CreateLoopUnswitchPass()
 T spvtools::CreateMergeReturnPass()
 T spvtools::CreateNullPass()
 T spvtools::CreatePrivateToLocalPass()
 T spvtools::CreateReduceLoadSizePass()
 T spvtools::CreateRedundancyEliminationPass()
 T spvtools::CreateRemoveDuplicatesPass()
 T spvtools::CreateReplaceInvalidOpcodePass()
 T spvtools::CreateSSARewritePass()
 T spvtools::CreateScalarReplacementPass(unsigned int)
 T spvtools::CreateSetSpecConstantDefaultValuePass(std::unordered_map<unsigned int, std::string, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::string> > > const&)
 T spvtools::CreateSetSpecConstantDefaultValuePass(std::unordered_map<unsigned int, std::vector<unsigned int, std::allocator<unsigned int> >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > > > const&)
 T spvtools::CreateSimplificationPass()
 T spvtools::CreateStrengthReductionPass()
 T spvtools::CreateStripDebugInfoPass()
 T spvtools::CreateStripReflectInfoPass()
 T spvtools::CreateUnifyConstantPass()
 T spvtools::CreateVectorDCEPass()
 T spvtools::CreateWorkaround1209Pass()
 T spvtools::Optimizer::GetPassNames() const
 T spvtools::Optimizer::Optimizer(spv_target_env)
 T spvtools::Optimizer::PassToken::PassToken(spvtools::Optimizer::PassToken&&)
 T spvtools::Optimizer::PassToken::PassToken(std::unique_ptr<spvtools::Optimizer::PassToken::Impl, std::default_delete<spvtools::Optimizer::PassToken::Impl> >)
 T spvtools::Optimizer::PassToken::PassToken(std::unique_ptr<spvtools::opt::Pass, std::default_delete<spvtools::opt::Pass> >&&)
 T spvtools::Optimizer::PassToken::operator=(spvtools::Optimizer::PassToken&&)
 T spvtools::Optimizer::PassToken::~PassToken()
 T spvtools::Optimizer::RegisterLegalizationPasses()
 T spvtools::Optimizer::RegisterPass(spvtools::Optimizer::PassToken&&)
 T spvtools::Optimizer::RegisterPerformancePasses()
 T spvtools::Optimizer::RegisterSizePasses()
 T spvtools::Optimizer::Run(unsigned int const*, unsigned long, std::vector<unsigned int, std::allocator<unsigned int> >*) const
 T spvtools::Optimizer::SetMessageConsumer(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
 T spvtools::Optimizer::SetPrintAll(std::ostream*)
 T spvtools::Optimizer::SetTimeReport(std::ostream*)
 T spvtools::Optimizer::~Optimizer()
 T spvtools::SpirvTools::Assemble(char const*, unsigned long, std::vector<unsigned int, std::allocator<unsigned int> >*, unsigned int) const
 T spvtools::SpirvTools::Assemble(std::string const&, std::vector<unsigned int, std::allocator<unsigned int> >*, unsigned int) const
 T spvtools::SpirvTools::Disassemble(std::vector<unsigned int, std::allocator<unsigned int> > const&, std::string*, unsigned int) const
 T spvtools::SpirvTools::Disassemble(unsigned int const*, unsigned long, std::string*, unsigned int) const
 T spvtools::SpirvTools::SetMessageConsumer(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
 T spvtools::SpirvTools::SpirvTools(spv_target_env)
 T spvtools::SpirvTools::Validate(std::vector<unsigned int, std::allocator<unsigned int> > const&) const
 T spvtools::SpirvTools::Validate(unsigned int const*, unsigned long) const
 T spvtools::SpirvTools::Validate(unsigned int const*, unsigned long, spvtools::ValidatorOptions const&) const
 T spvtools::SpirvTools::~SpirvTools()
 T spvtools::StringifyMessage(spv_message_level_t, char const*, spv_position_t const&, char const*)
 T spvtools::ValidateBinaryAndKeepValidationState(spv_context_t const*, spv_validator_options_t const*, unsigned int const*, unsigned long, spv_diagnostic_t**, std::unique_ptr<libspirv::ValidationState_t, std::default_delete<libspirv::ValidationState_t> >*)
 T spvtools::ValidateInstructionAndUpdateValidationState(libspirv::ValidationState_t*, spv_parsed_instruction_t const*)
 T spvtools::ir::BasicBlock::Clone(spvtools::ir::IRContext*) const
 T spvtools::ir::BasicBlock::ContinueBlockIdIfAny() const
 T spvtools::ir::BasicBlock::ForEachSuccessorLabel(std::function<void (unsigned int)> const&) const
 T spvtools::ir::BasicBlock::ForEachSuccessorLabel(std::function<void (unsigned int*)> const&)
 T spvtools::ir::BasicBlock::ForMergeAndContinueLabel(std::function<void (unsigned int)> const&)
 T spvtools::ir::BasicBlock::GetLoopMergeInst()
 T spvtools::ir::BasicBlock::GetLoopMergeInst() const
 T spvtools::ir::BasicBlock::GetMergeInst()
 T spvtools::ir::BasicBlock::GetMergeInst() const
 T spvtools::ir::BasicBlock::IsSuccessor(spvtools::ir::BasicBlock const*) const
 T spvtools::ir::BasicBlock::KillAllInsts(bool)
 T spvtools::ir::BasicBlock::MergeBlockIdIfAny() const
 T spvtools::ir::BasicBlock::PrettyPrint(unsigned int) const
 T spvtools::ir::BasicBlock::SplitBasicBlock(spvtools::ir::IRContext*, unsigned int, spvtools::ir::InstructionList::iterator)
 T spvtools::ir::CFG::AddEdges(spvtools::ir::BasicBlock*)
 T spvtools::ir::CFG::CFG(spvtools::ir::Module*)
 T spvtools::ir::CFG::ComputePostOrderTraversal(spvtools::ir::BasicBlock*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >*, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> >*)
 T spvtools::ir::CFG::ComputeStructuredOrder(spvtools::ir::Function*, spvtools::ir::BasicBlock*, std::list<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >*)
 T spvtools::ir::CFG::ComputeStructuredSuccessors(spvtools::ir::Function*)
 T spvtools::ir::CFG::FindReachableBlocks(spvtools::ir::BasicBlock*)
 T spvtools::ir::CFG::ForEachBlockInPostOrder(spvtools::ir::BasicBlock*, std::function<void (spvtools::ir::BasicBlock*)> const&)
 T spvtools::ir::CFG::ForEachBlockInReversePostOrder(spvtools::ir::BasicBlock*, std::function<void (spvtools::ir::BasicBlock*)> const&)
 T spvtools::ir::CFG::RemoveNonExistingEdges(unsigned int)
 T spvtools::ir::CFG::SplitLoopHeader(spvtools::ir::BasicBlock*)
 T spvtools::ir::Function::Clone(spvtools::ir::IRContext*) const
 T spvtools::ir::Function::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const
 T spvtools::ir::Function::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)
 T spvtools::ir::Function::ForEachParam(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const
 T spvtools::ir::Function::InsertBasicBlockAfter(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >&&, spvtools::ir::BasicBlock*)
 T spvtools::ir::Function::PrettyPrint(unsigned int) const
 T spvtools::ir::IRContext::AddCombinatorsForCapability(unsigned int)
 T spvtools::ir::IRContext::AddCombinatorsForExtension(spvtools::ir::Instruction*)
 T spvtools::ir::IRContext::AnalyzeUses(spvtools::ir::Instruction*)
 T spvtools::ir::IRContext::BuildInvalidAnalyses(spvtools::ir::IRContext::Analysis)
 T spvtools::ir::IRContext::CheckCFG()
 T spvtools::ir::IRContext::ForgetUses(spvtools::ir::Instruction*)
 T spvtools::ir::IRContext::GetDominatorAnalysis(spvtools::ir::Function const*)
 T spvtools::ir::IRContext::GetLoopDescriptor(spvtools::ir::Function const*)
 T spvtools::ir::IRContext::GetPostDominatorAnalysis(spvtools::ir::Function const*)
 T spvtools::ir::IRContext::InitializeCombinators()
 T spvtools::ir::IRContext::InvalidateAnalyses(spvtools::ir::IRContext::Analysis)
 T spvtools::ir::IRContext::InvalidateAnalysesExceptFor(spvtools::ir::IRContext::Analysis)
 T spvtools::ir::IRContext::IsConsistent()
 T spvtools::ir::IRContext::KillDef(unsigned int)
 T spvtools::ir::IRContext::KillInst(spvtools::ir::Instruction*)
 T spvtools::ir::IRContext::KillNamesAndDecorates(spvtools::ir::Instruction*)
 T spvtools::ir::IRContext::KillNamesAndDecorates(unsigned int)
 T spvtools::ir::IRContext::RemoveFromIdToName(spvtools::ir::Instruction const*)
 T spvtools::ir::IRContext::ReplaceAllUsesWith(unsigned int, unsigned int)
 T spvtools::ir::Instruction::Clone(spvtools::ir::IRContext*) const
 T spvtools::ir::Instruction::GetBaseAddress() const
 T spvtools::ir::Instruction::GetSingleWordOperand(unsigned int) const
 T spvtools::ir::Instruction::GetTypeComponent(unsigned int) const
 T spvtools::ir::Instruction::InsertBefore(std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >&&)
 T spvtools::ir::Instruction::InsertBefore(std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >&&)
 T spvtools::ir::Instruction::Instruction(spvtools::ir::IRContext*)
 T spvtools::ir::Instruction::Instruction(spvtools::ir::IRContext*, SpvOp_)
 T spvtools::ir::Instruction::Instruction(spvtools::ir::IRContext*, SpvOp_, unsigned int, unsigned int, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > const&)
 T spvtools::ir::Instruction::Instruction(spvtools::ir::IRContext*, spv_parsed_instruction_t const&, std::vector<spvtools::ir::Instruction, std::allocator<spvtools::ir::Instruction> >&&)
 T spvtools::ir::Instruction::Instruction(spvtools::ir::Instruction&&)
 T spvtools::ir::Instruction::IsFloatingPointFoldingAllowed() const
 T spvtools::ir::Instruction::IsFoldable() const
 T spvtools::ir::Instruction::IsFoldableByFoldScalar() const
 T spvtools::ir::Instruction::IsOpaqueType() const
 T spvtools::ir::Instruction::IsOpcodeCodeMotionSafe() const
 T spvtools::ir::Instruction::IsOpcodeSafeToDelete() const
 T spvtools::ir::Instruction::IsReadOnlyLoad() const
 T spvtools::ir::Instruction::IsReadOnlyVariable() const
 T spvtools::ir::Instruction::IsReadOnlyVariableKernel() const
 T spvtools::ir::Instruction::IsReadOnlyVariableShaders() const
 T spvtools::ir::Instruction::IsScalarizable() const
 T spvtools::ir::Instruction::IsValidBaseImage() const
 T spvtools::ir::Instruction::IsValidBasePointer() const
 T spvtools::ir::Instruction::IsVulkanSampledImage() const
 T spvtools::ir::Instruction::IsVulkanStorageBuffer() const
 T spvtools::ir::Instruction::IsVulkanStorageImage() const
 T spvtools::ir::Instruction::IsVulkanStorageTexelBuffer() const
 T spvtools::ir::Instruction::IsVulkanUniformBuffer() const
 T spvtools::ir::Instruction::NumInOperandWords() const
 T spvtools::ir::Instruction::PrettyPrint(unsigned int) const
 T spvtools::ir::Instruction::ReplaceOperands(std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > const&)
 T spvtools::ir::Instruction::ToBinaryWithoutAttachedDebugInsts(std::vector<unsigned int, std::allocator<unsigned int> >*) const
 T spvtools::ir::Instruction::operator=(spvtools::ir::Instruction&&)
 T spvtools::ir::InstructionList::iterator::InsertBefore(std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >&&)
 T spvtools::ir::InstructionList::iterator::InsertBefore(std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >&&)
 T spvtools::ir::IrLoader::AddInstruction(spv_parsed_instruction_t const*)
 T spvtools::ir::IrLoader::EndModule()
 T spvtools::ir::IrLoader::IrLoader(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spvtools::ir::Module*)
 T spvtools::ir::Loop::AreAllOperandsOutsideLoop(spvtools::ir::IRContext*, spvtools::ir::Instruction*)
 T spvtools::ir::Loop::ComputeLoopStructuredOrder(std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >*, bool, bool) const
 T spvtools::ir::Loop::FindConditionBlock() const
 T spvtools::ir::Loop::FindConditionVariable(spvtools::ir::BasicBlock const*) const
 T spvtools::ir::Loop::FindLatchBlock()
 T spvtools::ir::Loop::FindLoopPreheader(spvtools::opt::DominatorAnalysis*)
 T spvtools::ir::Loop::FindNumberOfIterations(spvtools::ir::Instruction const*, spvtools::ir::Instruction const*, unsigned long*, long*, long*) const
 T spvtools::ir::Loop::GetConditionInst() const
 T spvtools::ir::Loop::GetExitBlocks(std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*) const
 T spvtools::ir::Loop::GetInductionInitValue(spvtools::ir::Instruction const*, long*) const
 T spvtools::ir::Loop::GetInductionStepOperation(spvtools::ir::Instruction const*) const
 T spvtools::ir::Loop::GetInductionVariables(std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >&) const
 T spvtools::ir::Loop::GetIterations(SpvOp_, long, long, long) const
 T spvtools::ir::Loop::GetMergingBlocks(std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*) const
 T spvtools::ir::Loop::GetOrCreatePreHeaderBlock()
 T spvtools::ir::Loop::GetResidualConditionValue(SpvOp_, long, long, unsigned long, unsigned long)
 T spvtools::ir::Loop::IsBasicBlockInLoopSlow(spvtools::ir::BasicBlock const*)
 T spvtools::ir::Loop::IsInsideLoop(spvtools::ir::Instruction*) const
 T spvtools::ir::Loop::IsLCSSA() const
 T spvtools::ir::Loop::IsSafeToClone() const
 T spvtools::ir::Loop::IsSupportedCondition(SpvOp_) const
 T spvtools::ir::Loop::IsSupportedStepOp(SpvOp_) const
 T spvtools::ir::Loop::Loop(spvtools::ir::IRContext*, spvtools::opt::DominatorAnalysis*, spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*)
 T spvtools::ir::Loop::SetContinueBlock(spvtools::ir::BasicBlock*)
 T spvtools::ir::Loop::SetLatchBlock(spvtools::ir::BasicBlock*)
 T spvtools::ir::Loop::SetMergeBlock(spvtools::ir::BasicBlock*)
 T spvtools::ir::Loop::SetPreHeaderBlock(spvtools::ir::BasicBlock*)
 T spvtools::ir::Loop::ShouldHoistInstruction(spvtools::ir::IRContext*, spvtools::ir::Instruction*)
 T spvtools::ir::LoopDescriptor::AddLoopNest(std::unique_ptr<spvtools::ir::Loop, std::default_delete<spvtools::ir::Loop> >)
 T spvtools::ir::LoopDescriptor::ClearLoops()
 T spvtools::ir::LoopDescriptor::CreatePreHeaderBlocksIfMissing()
 T spvtools::ir::LoopDescriptor::GetLoopsInBinaryLayoutOrder()
 T spvtools::ir::LoopDescriptor::LoopDescriptor(spvtools::ir::Function const*)
 T spvtools::ir::LoopDescriptor::PopulateList(spvtools::ir::Function const*)
 T spvtools::ir::LoopDescriptor::PostModificationCleanup()
 T spvtools::ir::LoopDescriptor::RemoveLoop(spvtools::ir::Loop*)
 T spvtools::ir::LoopDescriptor::~LoopDescriptor()
 T spvtools::ir::Module::AddGlobalValue(SpvOp_, unsigned int, unsigned int)
 T spvtools::ir::Module::ComputeIdBound() const
 T spvtools::ir::Module::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const
 T spvtools::ir::Module::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)
 T spvtools::ir::Module::GetConstants()
 T spvtools::ir::Module::GetConstants() const
 T spvtools::ir::Module::GetExtInstImportId(char const*)
 T spvtools::ir::Module::GetGlobalValue(SpvOp_) const
 T spvtools::ir::Module::GetTypes()
 T spvtools::ir::Module::GetTypes() const
 T spvtools::ir::Module::HasExplicitCapability(unsigned int)
 T spvtools::ir::Module::ToBinary(std::vector<unsigned int, std::allocator<unsigned int> >*, bool) const
 T spvtools::ir::operator<<(std::ostream&, spvtools::ir::BasicBlock const&)
 T spvtools::ir::operator<<(std::ostream&, spvtools::ir::Function const&)
 T spvtools::ir::operator<<(std::ostream&, spvtools::ir::Instruction const&)
 T spvtools::ir::operator<<(std::ostream&, spvtools::ir::Module const&)
 T spvtools::opt::AggressiveDCEPass::AddBranch(unsigned int, spvtools::ir::BasicBlock*)
 T spvtools::opt::AggressiveDCEPass::AddBreaksAndContinuesToWorklist(spvtools::ir::Instruction*)
 T spvtools::opt::AggressiveDCEPass::AddStores(unsigned int)
 T spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::ir::Function*)
 T spvtools::opt::AggressiveDCEPass::AggressiveDCEPass()
 T spvtools::opt::AggressiveDCEPass::AllExtensionsSupported() const
 T spvtools::opt::AggressiveDCEPass::ComputeBlock2HeaderMaps(std::list<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >&)
 T spvtools::opt::AggressiveDCEPass::EliminateDeadFunctions()
 T spvtools::opt::AggressiveDCEPass::EliminateFunction(spvtools::ir::Function*)
 T spvtools::opt::AggressiveDCEPass::InitExtensions()
 T spvtools::opt::AggressiveDCEPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::AggressiveDCEPass::InitializeModuleScopeLiveInstructions()
 T spvtools::opt::AggressiveDCEPass::IsDead(spvtools::ir::Instruction*)
 T spvtools::opt::AggressiveDCEPass::IsLocalVar(unsigned int)
 T spvtools::opt::AggressiveDCEPass::IsStructuredHeader(spvtools::ir::BasicBlock*, spvtools::ir::Instruction**, spvtools::ir::Instruction**, unsigned int*)
 T spvtools::opt::AggressiveDCEPass::IsTargetDead(spvtools::ir::Instruction*)
 T spvtools::opt::AggressiveDCEPass::IsVarOfStorage(unsigned int, unsigned int)
 T spvtools::opt::AggressiveDCEPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::AggressiveDCEPass::ProcessGlobalValues()
 T spvtools::opt::AggressiveDCEPass::ProcessImpl()
 T spvtools::opt::AggressiveDCEPass::ProcessLoad(unsigned int)
 T spvtools::opt::BlockMergePass::BlockMergePass()
 T spvtools::opt::BlockMergePass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::BlockMergePass::IsHeader(spvtools::ir::BasicBlock*)
 T spvtools::opt::BlockMergePass::IsHeader(unsigned int)
 T spvtools::opt::BlockMergePass::IsMerge(spvtools::ir::BasicBlock*)
 T spvtools::opt::BlockMergePass::IsMerge(unsigned int)
 T spvtools::opt::BlockMergePass::KillInstAndName(spvtools::ir::Instruction*)
 T spvtools::opt::BlockMergePass::MergeBlocks(spvtools::ir::Function*)
 T spvtools::opt::BlockMergePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::BlockMergePass::ProcessImpl()
 T spvtools::opt::CCPPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::CCPPass::IsVaryingValue(unsigned int) const
 T spvtools::opt::CCPPass::MarkInstructionVarying(spvtools::ir::Instruction*)
 T spvtools::opt::CCPPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::CCPPass::PropagateConstants(spvtools::ir::Function*)
 T spvtools::opt::CCPPass::ReplaceValues()
 T spvtools::opt::CCPPass::VisitAssignment(spvtools::ir::Instruction*)
 T spvtools::opt::CCPPass::VisitBranch(spvtools::ir::Instruction*, spvtools::ir::BasicBlock**) const
 T spvtools::opt::CCPPass::VisitInstruction(spvtools::ir::Instruction*, spvtools::ir::BasicBlock**)
 T spvtools::opt::CCPPass::VisitPhi(spvtools::ir::Instruction*)
 T spvtools::opt::CFGCleanupPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::CFGCleanupPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::CodeMetrics::Analyze(spvtools::ir::Loop const&)
 T spvtools::opt::CommonUniformElimPass::AllExtensionsSupported() const
 T spvtools::opt::CommonUniformElimPass::CommonExtractElimination(spvtools::ir::Function*)
 T spvtools::opt::CommonUniformElimPass::CommonUniformElimPass()
 T spvtools::opt::CommonUniformElimPass::CommonUniformLoadElimBlock(spvtools::ir::Function*)
 T spvtools::opt::CommonUniformElimPass::CommonUniformLoadElimination(spvtools::ir::Function*)
 T spvtools::opt::CommonUniformElimPass::ComputeStructuredOrder(spvtools::ir::Function*, std::list<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >*)
 T spvtools::opt::CommonUniformElimPass::ComputeStructuredSuccessors(spvtools::ir::Function*)
 T spvtools::opt::CommonUniformElimPass::DeleteIfUseless(spvtools::ir::Instruction*)
 T spvtools::opt::CommonUniformElimPass::EliminateCommonUniform(spvtools::ir::Function*)
 T spvtools::opt::CommonUniformElimPass::GenACLoadRepl(spvtools::ir::Instruction const*, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*, unsigned int*)
 T spvtools::opt::CommonUniformElimPass::GetPtr(spvtools::ir::Instruction*, unsigned int*)
 T spvtools::opt::CommonUniformElimPass::HasOnlyNamesAndDecorates(unsigned int) const
 T spvtools::opt::CommonUniformElimPass::HasUnsupportedDecorates(unsigned int) const
 T spvtools::opt::CommonUniformElimPass::InitExtensions()
 T spvtools::opt::CommonUniformElimPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::CommonUniformElimPass::IsAccessChainToVolatileStructType(spvtools::ir::Instruction const&)
 T spvtools::opt::CommonUniformElimPass::IsConstantIndexAccessChain(spvtools::ir::Instruction*)
 T spvtools::opt::CommonUniformElimPass::IsNonPtrAccessChain(SpvOp_) const
 T spvtools::opt::CommonUniformElimPass::IsSamplerOrImageType(spvtools::ir::Instruction const*) const
 T spvtools::opt::CommonUniformElimPass::IsSamplerOrImageVar(unsigned int) const
 T spvtools::opt::CommonUniformElimPass::IsUniformVar(unsigned int)
 T spvtools::opt::CommonUniformElimPass::IsVolatileLoad(spvtools::ir::Instruction const&)
 T spvtools::opt::CommonUniformElimPass::IsVolatileStruct(unsigned int)
 T spvtools::opt::CommonUniformElimPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::CommonUniformElimPass::ProcessImpl()
 T spvtools::opt::CommonUniformElimPass::ReplaceAndDeleteLoad(spvtools::ir::Instruction*, unsigned int, spvtools::ir::Instruction*)
 T spvtools::opt::CommonUniformElimPass::UniformAccessChainConvert(spvtools::ir::Function*)
 T spvtools::opt::CompactIdsPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::ComputeSameValue::operator()(spvtools::ir::Instruction const&, spvtools::ir::Instruction const&) const
 T spvtools::opt::ConstantFoldingRules::ConstantFoldingRules()
 T spvtools::opt::Constraint::operator!=(spvtools::opt::Constraint const&) const
 T spvtools::opt::Constraint::operator==(spvtools::opt::Constraint const&) const
 T spvtools::opt::CopyPropagateArrays::BuildMemoryObjectFromCompositeConstruct(spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::BuildMemoryObjectFromExtract(spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::BuildMemoryObjectFromInsert(spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::BuildMemoryObjectFromLoad(spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::BuildNewAccessChain(spvtools::ir::Instruction*, spvtools::opt::CopyPropagateArrays::MemoryObject*) const
 T spvtools::opt::CopyPropagateArrays::CanUpdateUses(spvtools::ir::Instruction*, unsigned int)
 T spvtools::opt::CopyPropagateArrays::FindSourceObjectIfPossible(spvtools::ir::Instruction*, spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::FindStoreInstruction(spvtools::ir::Instruction const*) const
 T spvtools::opt::CopyPropagateArrays::GenerateCopy(spvtools::ir::Instruction*, unsigned int, spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::GetSourceObjectIfAny(unsigned int)
 T spvtools::opt::CopyPropagateArrays::HasNoStores(spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::HasValidReferencesOnly(spvtools::ir::Instruction*, spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::IsPointerToArrayType(unsigned int)
 T spvtools::opt::CopyPropagateArrays::MemoryObject::Contains(spvtools::opt::CopyPropagateArrays::MemoryObject*)
 T spvtools::opt::CopyPropagateArrays::MemoryObject::GetAccessIds() const
 T spvtools::opt::CopyPropagateArrays::MemoryObject::GetMember(std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spvtools::opt::CopyPropagateArrays::MemoryObject::GetNumberOfMembers()
 T spvtools::opt::CopyPropagateArrays::Process(spvtools::ir::IRContext*)
 T spvtools::opt::CopyPropagateArrays::PropagateObject(spvtools::ir::Instruction*, spvtools::opt::CopyPropagateArrays::MemoryObject*, spvtools::ir::Instruction*)
 T spvtools::opt::CopyPropagateArrays::UpdateUses(spvtools::ir::Instruction*, spvtools::ir::Instruction*)
 T spvtools::opt::DeadBranchElimPass::AddBranch(unsigned int, spvtools::ir::BasicBlock*)
 T spvtools::opt::DeadBranchElimPass::DeadBranchElimPass()
 T spvtools::opt::DeadBranchElimPass::EliminateDeadBranches(spvtools::ir::Function*)
 T spvtools::opt::DeadBranchElimPass::EraseDeadBlocks(spvtools::ir::Function*, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> > const&, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> > const&, std::unordered_map<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*> > > const&)
 T spvtools::opt::DeadBranchElimPass::FixPhiNodesInLiveBlocks(spvtools::ir::Function*, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> > const&, std::unordered_map<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*> > > const&)
 T spvtools::opt::DeadBranchElimPass::GetConstCondition(unsigned int, bool*)
 T spvtools::opt::DeadBranchElimPass::GetConstInteger(unsigned int, unsigned int*)
 T spvtools::opt::DeadBranchElimPass::GetParentBlock(unsigned int)
 T spvtools::opt::DeadBranchElimPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::ir::Function*, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> >*)
 T spvtools::opt::DeadBranchElimPass::MarkUnreachableStructuredTargets(std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> > const&, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> >*, std::unordered_map<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*> > >*)
 T spvtools::opt::DeadBranchElimPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::DeadBranchElimPass::ProcessImpl()
 T spvtools::opt::DeadInsertElimPass::DeadInsertElimPass()
 T spvtools::opt::DeadInsertElimPass::EliminateDeadInserts(spvtools::ir::Function*)
 T spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::ir::Function*)
 T spvtools::opt::DeadInsertElimPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::DeadInsertElimPass::MarkInsertChain(spvtools::ir::Instruction*, std::vector<unsigned int, std::allocator<unsigned int> >*, unsigned int, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*)
 T spvtools::opt::DeadInsertElimPass::NumComponents(spvtools::ir::Instruction*)
 T spvtools::opt::DeadInsertElimPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::DeadInsertElimPass::ProcessImpl()
 T spvtools::opt::DeadVariableElimination::DeleteVariable(unsigned int)
 T spvtools::opt::DeadVariableElimination::Process(spvtools::ir::IRContext*)
 T spvtools::opt::DominatorAnalysisBase::CommonDominator(spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*) const
 T spvtools::opt::DominatorAnalysisBase::Dominates(spvtools::ir::Instruction*, spvtools::ir::Instruction*) const
 T spvtools::opt::DominatorTree::Dominates(spvtools::ir::BasicBlock const*, spvtools::ir::BasicBlock const*) const
 T spvtools::opt::DominatorTree::Dominates(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*) const
 T spvtools::opt::DominatorTree::Dominates(unsigned int, unsigned int) const
 T spvtools::opt::DominatorTree::DumpTreeAsDot(std::ostream&) const
 T spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::ir::Function const*, spvtools::ir::BasicBlock const*, std::vector<std::pair<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*> > >*)
 T spvtools::opt::DominatorTree::GetOrInsertNode(spvtools::ir::BasicBlock*)
 T spvtools::opt::DominatorTree::ImmediateDominator(spvtools::ir::BasicBlock const*) const
 T spvtools::opt::DominatorTree::ImmediateDominator(unsigned int) const
 T spvtools::opt::DominatorTree::InitializeTree(spvtools::ir::Function const*)
 T spvtools::opt::DominatorTree::ResetDFNumbering()
 T spvtools::opt::DominatorTree::StrictlyDominates(spvtools::ir::BasicBlock const*, spvtools::ir::BasicBlock const*) const
 T spvtools::opt::DominatorTree::StrictlyDominates(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*) const
 T spvtools::opt::DominatorTree::StrictlyDominates(unsigned int, unsigned int) const
 T spvtools::opt::EliminateDeadConstantPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::EliminateDeadFunctionsPass::EliminateFunction(spvtools::ir::Function*)
 T spvtools::opt::EliminateDeadFunctionsPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::ExtInsConflict(std::vector<unsigned int, std::allocator<unsigned int> > const&, spvtools::ir::Instruction const*, unsigned int)
 T spvtools::opt::ExtInsMatch(std::vector<unsigned int, std::allocator<unsigned int> > const&, spvtools::ir::Instruction const*, unsigned int)
 T spvtools::opt::FeatureManager::AddCapabilities(spvtools::ir::Module*)
 T spvtools::opt::FeatureManager::AddCapability(SpvCapability_)
 T spvtools::opt::FeatureManager::AddExtInstImportIds(spvtools::ir::Module*)
 T spvtools::opt::FeatureManager::AddExtensions(spvtools::ir::Module*)
 T spvtools::opt::FeatureManager::Analyze(spvtools::ir::Module*)
 T spvtools::opt::FlattenDecorationPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::FoldBinaryBooleanOpToConstant(spvtools::ir::Instruction*, std::function<unsigned int (unsigned int)>, unsigned int*)
 T spvtools::opt::FoldBinaryIntegerOpToConstant(spvtools::ir::Instruction*, std::function<unsigned int (unsigned int)>, unsigned int*)
 T spvtools::opt::FoldInstruction(spvtools::ir::Instruction*)
 T spvtools::opt::FoldInstructionToConstant(spvtools::ir::Instruction*, std::function<unsigned int (unsigned int)>)
 T spvtools::opt::FoldIntegerOpToConstant(spvtools::ir::Instruction*, std::function<unsigned int (unsigned int)>, unsigned int*)
 T spvtools::opt::FoldScalars(SpvOp_, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::DoComponentWiseOperation(spvtools::ir::InstructionList::iterator*)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::DoCompositeExtract(spvtools::ir::InstructionList::iterator*)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::DoVectorShuffle(spvtools::ir::InstructionList::iterator*)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::GetTypeComponent(unsigned int, unsigned int) const
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::ProcessImpl(spvtools::ir::IRContext*)
 T spvtools::opt::FoldSpecConstantOpAndCompositePass::ProcessOpSpecConstantOp(spvtools::ir::InstructionList::iterator*)
 T spvtools::opt::FoldVectors(SpvOp_, unsigned int, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)
 T spvtools::opt::FoldingRules::FoldingRules()
 T spvtools::opt::FreezeSpecConstantValuePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::GetConstantFoldingRules()
 T spvtools::opt::IfConversion::CanHoistInstruction(spvtools::ir::Instruction*, spvtools::ir::BasicBlock*, spvtools::opt::DominatorAnalysis*)
 T spvtools::opt::IfConversion::CheckBlock(spvtools::ir::BasicBlock*, spvtools::opt::DominatorAnalysis*, spvtools::ir::BasicBlock**)
 T spvtools::opt::IfConversion::CheckPhiUsers(spvtools::ir::Instruction*, spvtools::ir::BasicBlock*)
 T spvtools::opt::IfConversion::CheckType(unsigned int)
 T spvtools::opt::IfConversion::GetBlock(unsigned int)
 T spvtools::opt::IfConversion::GetIncomingBlock(spvtools::ir::Instruction*, unsigned int)
 T spvtools::opt::IfConversion::GetIncomingValue(spvtools::ir::Instruction*, unsigned int)
 T spvtools::opt::IfConversion::HoistInstruction(spvtools::ir::Instruction*, spvtools::ir::BasicBlock*, spvtools::opt::DominatorAnalysis*)
 T spvtools::opt::IfConversion::Process(spvtools::ir::IRContext*)
 T spvtools::opt::IfConversion::SplatCondition(spvtools::opt::analysis::Vector*, unsigned int, spvtools::opt::InstructionBuilder*)
 T spvtools::opt::InlineExhaustivePass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::InlineExhaustivePass::InlineExhaustive(spvtools::ir::Function*)
 T spvtools::opt::InlineExhaustivePass::InlineExhaustivePass()
 T spvtools::opt::InlineExhaustivePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::InlineExhaustivePass::ProcessImpl()
 T spvtools::opt::InlineOpaquePass::HasOpaqueArgsOrReturn(spvtools::ir::Instruction const*)
 T spvtools::opt::InlineOpaquePass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::InlineOpaquePass::InlineOpaque(spvtools::ir::Function*)
 T spvtools::opt::InlineOpaquePass::InlineOpaquePass()
 T spvtools::opt::InlineOpaquePass::IsOpaqueType(unsigned int)
 T spvtools::opt::InlineOpaquePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::InlineOpaquePass::ProcessImpl()
 T spvtools::opt::InlinePass::AddBranch(unsigned int, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 T spvtools::opt::InlinePass::AddBranchCond(unsigned int, unsigned int, unsigned int, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 T spvtools::opt::InlinePass::AddLoad(unsigned int, unsigned int, unsigned int, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 T spvtools::opt::InlinePass::AddLoopMerge(unsigned int, unsigned int, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 T spvtools::opt::InlinePass::AddPointerToType(unsigned int, SpvStorageClass_)
 T spvtools::opt::InlinePass::AddStore(unsigned int, unsigned int, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 T spvtools::opt::InlinePass::AnalyzeReturns(spvtools::ir::Function*)
 T spvtools::opt::InlinePass::CloneAndMapLocals(spvtools::ir::Function*, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >*)
 T spvtools::opt::InlinePass::CloneSameBlockOps(std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >*, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >*, std::unordered_map<unsigned int, spvtools::ir::Instruction*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::ir::Instruction*> > >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 T spvtools::opt::InlinePass::ComputeStructuredSuccessors(spvtools::ir::Function*)
 T spvtools::opt::InlinePass::CreateReturnVar(spvtools::ir::Function*, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*)
 T spvtools::opt::InlinePass::GenInlineCode(std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >*, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*, spvtools::ir::InstructionList::iterator, spvtools::ir::UptrVectorIterator<spvtools::ir::BasicBlock, false>)
 T spvtools::opt::InlinePass::GetFalseId()
 T spvtools::opt::InlinePass::HasMultipleReturns(spvtools::ir::Function*)
 T spvtools::opt::InlinePass::HasNoReturnInLoop(spvtools::ir::Function*)
 T spvtools::opt::InlinePass::InitializeInline(spvtools::ir::IRContext*)
 T spvtools::opt::InlinePass::InlinePass()
 T spvtools::opt::InlinePass::IsInlinableFunction(spvtools::ir::Function*)
 T spvtools::opt::InlinePass::IsInlinableFunctionCall(spvtools::ir::Instruction const*)
 T spvtools::opt::InlinePass::IsSameBlockOp(spvtools::ir::Instruction const*) const
 T spvtools::opt::InlinePass::MapParams(spvtools::ir::Function*, spvtools::ir::InstructionList::iterator, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >*)
 T spvtools::opt::InlinePass::NewLabel(unsigned int)
 T spvtools::opt::InlinePass::StructuredSuccessorsFunction()
 T spvtools::opt::InlinePass::UpdateSucceedingPhis(std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >&)
 T spvtools::opt::IsFoldableConstant(spvtools::opt::analysis::Constant const*)
 T spvtools::opt::IsFoldableOpcode(SpvOp_)
 T spvtools::opt::IsFoldableType(spvtools::ir::Instruction*)
 T spvtools::opt::IsSeparator(char)
 T spvtools::opt::LICMPass::AnalyseAndHoistFromBB(spvtools::ir::Loop*, spvtools::ir::Function*, spvtools::ir::BasicBlock*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >*)
 T spvtools::opt::LICMPass::HoistInstruction(spvtools::ir::Loop*, spvtools::ir::Instruction*)
 T spvtools::opt::LICMPass::IsImmediatelyContainedInLoop(spvtools::ir::Loop*, spvtools::ir::Function*, spvtools::ir::BasicBlock*)
 T spvtools::opt::LICMPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LICMPass::ProcessFunction(spvtools::ir::Function*)
 T spvtools::opt::LICMPass::ProcessIRContext()
 T spvtools::opt::LICMPass::ProcessLoop(spvtools::ir::Loop*, spvtools::ir::Function*)
 T spvtools::opt::LocalAccessChainConvertPass::AllExtensionsSupported() const
 T spvtools::opt::LocalAccessChainConvertPass::AppendConstantOperands(spvtools::ir::Instruction const*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >*)
 T spvtools::opt::LocalAccessChainConvertPass::BuildAndAppendInst(SpvOp_, unsigned int, unsigned int, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > const&, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*)
 T spvtools::opt::LocalAccessChainConvertPass::BuildAndAppendVarLoad(spvtools::ir::Instruction const*, unsigned int*, unsigned int*, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*)
 T spvtools::opt::LocalAccessChainConvertPass::ConvertLocalAccessChains(spvtools::ir::Function*)
 T spvtools::opt::LocalAccessChainConvertPass::FindTargetVars(spvtools::ir::Function*)
 T spvtools::opt::LocalAccessChainConvertPass::GenAccessChainLoadReplacement(spvtools::ir::Instruction const*, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*)
 T spvtools::opt::LocalAccessChainConvertPass::GenAccessChainStoreReplacement(spvtools::ir::Instruction const*, unsigned int, std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >*)
 T spvtools::opt::LocalAccessChainConvertPass::HasOnlySupportedRefs(unsigned int)
 T spvtools::opt::LocalAccessChainConvertPass::InitExtensions()
 T spvtools::opt::LocalAccessChainConvertPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::LocalAccessChainConvertPass::IsConstantIndexAccessChain(spvtools::ir::Instruction const*) const
 T spvtools::opt::LocalAccessChainConvertPass::LocalAccessChainConvertPass()
 T spvtools::opt::LocalAccessChainConvertPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LocalAccessChainConvertPass::ProcessImpl()
 T spvtools::opt::LocalMultiStoreElimPass::AllExtensionsSupported() const
 T spvtools::opt::LocalMultiStoreElimPass::InitExtensions()
 T spvtools::opt::LocalMultiStoreElimPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::LocalMultiStoreElimPass::LocalMultiStoreElimPass()
 T spvtools::opt::LocalMultiStoreElimPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LocalMultiStoreElimPass::ProcessImpl()
 T spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::ir::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >*)
 T spvtools::opt::LocalRedundancyEliminationPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::AllExtensionsSupported() const
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::HasOnlySupportedRefs(unsigned int)
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::InitExtensions()
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::LocalSingleBlockLoadStoreElim(spvtools::ir::Function*)
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::LocalSingleBlockLoadStoreElimPass()
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LocalSingleBlockLoadStoreElimPass::ProcessImpl()
 T spvtools::opt::LocalSingleStoreElimPass::AllExtensionsSupported() const
 T spvtools::opt::LocalSingleStoreElimPass::FeedsAStore(spvtools::ir::Instruction*) const
 T spvtools::opt::LocalSingleStoreElimPass::FindSingleStoreAndCheckUses(spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&) const
 T spvtools::opt::LocalSingleStoreElimPass::FindUses(spvtools::ir::Instruction const*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >*) const
 T spvtools::opt::LocalSingleStoreElimPass::InitExtensionWhiteList()
 T spvtools::opt::LocalSingleStoreElimPass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::LocalSingleStoreElimPass::LocalSingleStoreElim(spvtools::ir::Function*)
 T spvtools::opt::LocalSingleStoreElimPass::LocalSingleStoreElimPass()
 T spvtools::opt::LocalSingleStoreElimPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LocalSingleStoreElimPass::ProcessImpl()
 T spvtools::opt::LocalSingleStoreElimPass::ProcessVariable(spvtools::ir::Instruction*)
 T spvtools::opt::LocalSingleStoreElimPass::RewriteLoads(spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&)
 T spvtools::opt::LoopDependenceAnalysis::CheckSupportedLoops(std::vector<spvtools::ir::Loop const*, std::allocator<spvtools::ir::Loop const*> >)
 T spvtools::opt::LoopDependenceAnalysis::CollectLoops(spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::LoopDependenceAnalysis::CollectLoops(std::vector<spvtools::opt::SERecurrentNode*, std::allocator<spvtools::opt::SERecurrentNode*> > const&)
 T spvtools::opt::LoopDependenceAnalysis::CountInductionVariables(spvtools::opt::SENode*)
 T spvtools::opt::LoopDependenceAnalysis::CountInductionVariables(spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::LoopDependenceAnalysis::DeltaTest(std::vector<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*>, std::allocator<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> > > const&, spvtools::opt::DistanceVector*)
 T spvtools::opt::LoopDependenceAnalysis::GCDMIVTest(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 T spvtools::opt::LoopDependenceAnalysis::GetConstantTerm(spvtools::ir::Loop const*, spvtools::opt::SERecurrentNode*)
 T spvtools::opt::LoopDependenceAnalysis::GetDependence(spvtools::ir::Instruction const*, spvtools::ir::Instruction const*, spvtools::opt::DistanceVector*)
 T spvtools::opt::LoopDependenceAnalysis::GetDistanceEntryForLoop(spvtools::ir::Loop const*, spvtools::opt::DistanceVector*)
 T spvtools::opt::LoopDependenceAnalysis::GetDistanceEntryForSubscriptPair(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&, spvtools::opt::DistanceVector*)
 T spvtools::opt::LoopDependenceAnalysis::GetFinalTripInductionNode(spvtools::ir::Loop const*, spvtools::opt::SENode*)
 T spvtools::opt::LoopDependenceAnalysis::GetFirstTripInductionNode(spvtools::ir::Loop const*)
 T spvtools::opt::LoopDependenceAnalysis::GetLoopForSubscriptPair(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 T spvtools::opt::LoopDependenceAnalysis::GetLowerBound(spvtools::ir::Loop const*)
 T spvtools::opt::LoopDependenceAnalysis::GetOperandDefinition(spvtools::ir::Instruction const*, int)
 T spvtools::opt::LoopDependenceAnalysis::GetSubscripts(spvtools::ir::Instruction const*)
 T spvtools::opt::LoopDependenceAnalysis::GetTripCount(spvtools::ir::Loop const*)
 T spvtools::opt::LoopDependenceAnalysis::GetUpperBound(spvtools::ir::Loop const*)
 T spvtools::opt::LoopDependenceAnalysis::IntersectConstraints(spvtools::opt::Constraint*, spvtools::opt::Constraint*, spvtools::opt::SENode const*, spvtools::opt::SENode const*)
 T spvtools::opt::LoopDependenceAnalysis::IsMIV(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 T spvtools::opt::LoopDependenceAnalysis::IsProvablyOutsideOfLoopBounds(spvtools::ir::Loop const*, spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::LoopDependenceAnalysis::IsSIV(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 T spvtools::opt::LoopDependenceAnalysis::IsSupportedLoop(spvtools::ir::Loop const*)
 T spvtools::opt::LoopDependenceAnalysis::IsWithinBounds(long, long, long)
 T spvtools::opt::LoopDependenceAnalysis::IsZIV(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 T spvtools::opt::LoopDependenceAnalysis::MarkUnsusedDistanceEntriesAsIrrelevant(spvtools::ir::Instruction const*, spvtools::ir::Instruction const*, spvtools::opt::DistanceVector*)
 T spvtools::opt::LoopDependenceAnalysis::PartitionSubscripts(std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&)
 T spvtools::opt::LoopDependenceAnalysis::PrintDebug(std::string)
 T spvtools::opt::LoopDependenceAnalysis::PropagateConstraints(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&, std::vector<spvtools::opt::Constraint*, std::allocator<spvtools::opt::Constraint*> > const&)
 T spvtools::opt::LoopDependenceAnalysis::SIVTest(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&, spvtools::opt::DistanceVector*)
 T spvtools::opt::LoopDependenceAnalysis::StrongSIVTest(spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::DistanceEntry*)
 T spvtools::opt::LoopDependenceAnalysis::SymbolicStrongSIVTest(spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::DistanceEntry*)
 T spvtools::opt::LoopDependenceAnalysis::WeakCrossingSIVTest(spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::DistanceEntry*)
 T spvtools::opt::LoopDependenceAnalysis::WeakZeroDestinationSIVTest(spvtools::opt::SERecurrentNode*, spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::DistanceEntry*)
 T spvtools::opt::LoopDependenceAnalysis::WeakZeroSourceSIVTest(spvtools::opt::SENode*, spvtools::opt::SERecurrentNode*, spvtools::opt::SENode*, spvtools::opt::DistanceEntry*)
 T spvtools::opt::LoopDependenceAnalysis::ZIVTest(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 T spvtools::opt::LoopFissionImpl::CanPerformSplit()
 T spvtools::opt::LoopFissionImpl::GroupInstructionsByUseDef()
 T spvtools::opt::LoopFissionImpl::MovableInstruction(spvtools::ir::Instruction const&) const
 T spvtools::opt::LoopFissionImpl::SplitLoop()
 T spvtools::opt::LoopFissionImpl::TraverseUseDef(spvtools::ir::Instruction*, std::set<spvtools::ir::Instruction*, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >*, bool, bool)
 T spvtools::opt::LoopFissionPass::LoopFissionPass()
 T spvtools::opt::LoopFissionPass::LoopFissionPass(unsigned long, bool)
 T spvtools::opt::LoopFissionPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LoopFissionPass::ShouldSplitLoop(spvtools::ir::Loop const&, spvtools::ir::IRContext*)
 T spvtools::opt::LoopFusion::AreCompatible()
 T spvtools::opt::LoopFusion::CheckCondition()
 T spvtools::opt::LoopFusion::CheckInit()
 T spvtools::opt::LoopFusion::CheckStep()
 T spvtools::opt::LoopFusion::ContainsBarriersOrFunctionCalls(spvtools::ir::Loop*)
 T spvtools::opt::LoopFusion::Fuse()
 T spvtools::opt::LoopFusion::GetLoadsAndStoresInLoop(spvtools::ir::Loop*)
 T spvtools::opt::LoopFusion::IsLegal()
 T spvtools::opt::LoopFusion::IsUsedInLoop(spvtools::ir::Instruction*, spvtools::ir::Loop*)
 T spvtools::opt::LoopFusion::LocationToMemOps(std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&)
 T spvtools::opt::LoopFusion::RemoveIfNotUsedContinueOrConditionBlock(std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >*, spvtools::ir::Loop*)
 T spvtools::opt::LoopFusion::UsedInContinueOrConditionBlock(spvtools::ir::Instruction*, spvtools::ir::Loop*)
 T spvtools::opt::LoopFusionPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LoopFusionPass::ProcessFunction(spvtools::ir::Function*)
 T spvtools::opt::LoopPeeling::CreateBlockBefore(spvtools::ir::BasicBlock*)
 T spvtools::opt::LoopPeeling::DuplicateAndConnectLoop(spvtools::opt::LoopUtils::LoopCloningResult*)
 T spvtools::opt::LoopPeeling::FixExitCondition(std::function<unsigned int (spvtools::ir::Instruction*)> const&)
 T spvtools::opt::LoopPeeling::GetIteratingExitValues()
 T spvtools::opt::LoopPeeling::GetIteratorUpdateOperations(spvtools::ir::Loop const*, spvtools::ir::Instruction*, std::unordered_set<spvtools::ir::Instruction*, std::hash<spvtools::ir::Instruction*>, std::equal_to<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >*)
 T spvtools::opt::LoopPeeling::InsertCanonicalInductionVariable(spvtools::opt::LoopUtils::LoopCloningResult*)
 T spvtools::opt::LoopPeeling::IsConditionCheckSideEffectFree() const
 T spvtools::opt::LoopPeeling::PeelAfter(unsigned int)
 T spvtools::opt::LoopPeeling::PeelBefore(unsigned int)
 T spvtools::opt::LoopPeeling::ProtectLoop(spvtools::ir::Loop*, spvtools::ir::Instruction*, spvtools::ir::BasicBlock*)
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::EvalOperator(spvtools::opt::LoopPeelingPass::CmpOperator, spvtools::opt::SExpression, spvtools::opt::SExpression, bool*) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::GetFirstLoopInvariantOperand(spvtools::ir::Instruction*) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::GetFirstNonLoopInvariantOperand(spvtools::ir::Instruction*) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::GetPeelingInfo(spvtools::ir::BasicBlock*) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::GetValueAtFirstIteration(spvtools::opt::SERecurrentNode*) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::GetValueAtIteration(spvtools::opt::SERecurrentNode*, long) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::GetValueAtLastIteration(spvtools::opt::SERecurrentNode*) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::HandleEquality(spvtools::opt::SExpression, spvtools::opt::SExpression) const
 T spvtools::opt::LoopPeelingPass::LoopPeelingInfo::HandleInequality(spvtools::opt::LoopPeelingPass::CmpOperator, spvtools::opt::SExpression, spvtools::opt::SERecurrentNode*) const
 T spvtools::opt::LoopPeelingPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LoopPeelingPass::ProcessFunction(spvtools::ir::Function*)
 T spvtools::opt::LoopPeelingPass::ProcessLoop(spvtools::ir::Loop*, spvtools::opt::CodeMetrics*)
 T spvtools::opt::LoopUnroller::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LoopUnswitchPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::LoopUnswitchPass::ProcessFunction(spvtools::ir::Function*)
 T spvtools::opt::LoopUtils::CanPerformUnroll()
 T spvtools::opt::LoopUtils::CloneAndAttachLoopToHeader(spvtools::opt::LoopUtils::LoopCloningResult*)
 T spvtools::opt::LoopUtils::CloneLoop(spvtools::opt::LoopUtils::LoopCloningResult*) const
 T spvtools::opt::LoopUtils::CloneLoop(spvtools::opt::LoopUtils::LoopCloningResult*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const&) const
 T spvtools::opt::LoopUtils::CreateLoopDedicatedExits()
 T spvtools::opt::LoopUtils::Finalize()
 T spvtools::opt::LoopUtils::FullyUnroll()
 T spvtools::opt::LoopUtils::MakeLoopClosedSSA()
 T spvtools::opt::LoopUtils::PartiallyUnroll(unsigned long)
 T spvtools::opt::LoopUtils::PopulateLoopDesc(spvtools::ir::Loop*, spvtools::ir::Loop*, spvtools::opt::LoopUtils::LoopCloningResult const&) const
 T spvtools::opt::LoopUtils::PopulateLoopNest(spvtools::ir::Loop*, spvtools::opt::LoopUtils::LoopCloningResult const&) const
 T spvtools::opt::MemPass::AddStores(unsigned int, std::queue<spvtools::ir::Instruction*, std::deque<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >*)
 T spvtools::opt::MemPass::CFGCleanup(spvtools::ir::Function*)
 T spvtools::opt::MemPass::CollectTargetVars(spvtools::ir::Function*)
 T spvtools::opt::MemPass::DCEInst(spvtools::ir::Instruction*, std::function<void (spvtools::ir::Instruction*)> const&)
 T spvtools::opt::MemPass::GetPtr(spvtools::ir::Instruction*, unsigned int*)
 T spvtools::opt::MemPass::GetPtr(unsigned int, unsigned int*)
 T spvtools::opt::MemPass::HasLoads(unsigned int) const
 T spvtools::opt::MemPass::HasOnlyNamesAndDecorates(unsigned int) const
 T spvtools::opt::MemPass::HasOnlySupportedRefs(unsigned int)
 T spvtools::opt::MemPass::IsBaseTargetType(spvtools::ir::Instruction const*) const
 T spvtools::opt::MemPass::IsLiveVar(unsigned int) const
 T spvtools::opt::MemPass::IsNonPtrAccessChain(SpvOp_) const
 T spvtools::opt::MemPass::IsPtr(unsigned int)
 T spvtools::opt::MemPass::IsTargetType(spvtools::ir::Instruction const*) const
 T spvtools::opt::MemPass::IsTargetVar(unsigned int)
 T spvtools::opt::MemPass::KillAllInsts(spvtools::ir::BasicBlock*, bool)
 T spvtools::opt::MemPass::MemPass()
 T spvtools::opt::MemPass::RemoveBlock(spvtools::ir::UptrVectorIterator<spvtools::ir::BasicBlock, false>*)
 T spvtools::opt::MemPass::RemovePhiOperands(spvtools::ir::Instruction*, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> > const&)
 T spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::ir::Function*)
 T spvtools::opt::MemPass::Type2Undef(unsigned int)
 T spvtools::opt::MergeReturnPass::AddNewPhiNodes()
 T spvtools::opt::MergeReturnPass::AddNewPhiNodes(spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, unsigned int)
 T spvtools::opt::MergeReturnPass::AddReturnFlag()
 T spvtools::opt::MergeReturnPass::AddReturnValue()
 T spvtools::opt::MergeReturnPass::BranchToBlock(spvtools::ir::BasicBlock*, unsigned int)
 T spvtools::opt::MergeReturnPass::CollectReturnBlocks(spvtools::ir::Function*)
 T spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::ir::BasicBlock*, unsigned int, spvtools::ir::Instruction&)
 T spvtools::opt::MergeReturnPass::CreateReturn(spvtools::ir::BasicBlock*)
 T spvtools::opt::MergeReturnPass::CreateReturnBlock()
 T spvtools::opt::MergeReturnPass::MarkForNewPhiNodes(spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*)
 T spvtools::opt::MergeReturnPass::MergeReturnBlocks(spvtools::ir::Function*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const&)
 T spvtools::opt::MergeReturnPass::PredicateBlock(spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, std::unordered_set<spvtools::ir::BasicBlock*, std::hash<spvtools::ir::BasicBlock*>, std::equal_to<spvtools::ir::BasicBlock*>, std::allocator<spvtools::ir::BasicBlock*> >*)
 T spvtools::opt::MergeReturnPass::PredicateBlocks(std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const&)
 T spvtools::opt::MergeReturnPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::MergeReturnPass::ProcessStructured(spvtools::ir::Function*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const&)
 T spvtools::opt::MergeReturnPass::ProcessStructuredBlock(spvtools::ir::BasicBlock*)
 T spvtools::opt::MergeReturnPass::RecordReturnValue(spvtools::ir::BasicBlock*)
 T spvtools::opt::MergeReturnPass::RecordReturned(spvtools::ir::BasicBlock*)
 T spvtools::opt::MergeReturnPass::RequiresPredication(spvtools::ir::BasicBlock const*, spvtools::ir::BasicBlock const*) const
 T spvtools::opt::Pass::AddCalls(spvtools::ir::Function*, std::queue<unsigned int, std::deque<unsigned int, std::allocator<unsigned int> > >*)
 T spvtools::opt::Pass::GetPointeeTypeId(spvtools::ir::Instruction const*) const
 T spvtools::opt::Pass::Pass()
 T spvtools::opt::Pass::ProcessCallTreeFromRoots(std::function<bool (spvtools::ir::Function*)>&, std::unordered_map<unsigned int, spvtools::ir::Function*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::ir::Function*> > > const&, std::queue<unsigned int, std::deque<unsigned int, std::allocator<unsigned int> > >*)
 T spvtools::opt::Pass::ProcessEntryPointCallTree(std::function<bool (spvtools::ir::Function*)>&, spvtools::ir::Module*)
 T spvtools::opt::Pass::ProcessReachableCallTree(std::function<bool (spvtools::ir::Function*)>&, spvtools::ir::IRContext*)
 T spvtools::opt::Pass::Run(spvtools::ir::IRContext*)
 T spvtools::opt::PassManager::Run(spvtools::ir::IRContext*)
 T spvtools::opt::PrivateToLocalPass::FindLocalFunction(spvtools::ir::Instruction const&) const
 T spvtools::opt::PrivateToLocalPass::GetNewType(unsigned int)
 T spvtools::opt::PrivateToLocalPass::IsValidUse(spvtools::ir::Instruction const*) const
 T spvtools::opt::PrivateToLocalPass::MoveVariable(spvtools::ir::Instruction*, spvtools::ir::Function*)
 T spvtools::opt::PrivateToLocalPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::PrivateToLocalPass::UpdateUse(spvtools::ir::Instruction*)
 T spvtools::opt::PrivateToLocalPass::UpdateUses(unsigned int)
 T spvtools::opt::ReduceLoadSize::Process(spvtools::ir::IRContext*)
 T spvtools::opt::ReduceLoadSize::ReplaceExtract(spvtools::ir::Instruction*)
 T spvtools::opt::ReduceLoadSize::ShouldReplaceExtract(spvtools::ir::Instruction*)
 T spvtools::opt::RedundancyEliminationPass::EliminateRedundanciesFrom(spvtools::opt::DominatorTreeNode*, spvtools::opt::ValueNumberTable const&, std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >)
 T spvtools::opt::RedundancyEliminationPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::RegisterLiveness::Analyze(spvtools::ir::Function*)
 T spvtools::opt::RegisterLiveness::ComputeLoopRegisterPressure(spvtools::ir::Loop const&, spvtools::opt::RegisterLiveness::RegionRegisterLiveness*) const
 T spvtools::opt::RegisterLiveness::RegionRegisterLiveness::AddRegisterClass(spvtools::ir::Instruction*)
 T spvtools::opt::RegisterLiveness::SimulateFission(spvtools::ir::Loop const&, std::unordered_set<spvtools::ir::Instruction*, std::hash<spvtools::ir::Instruction*>, std::equal_to<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> > const&, std::unordered_set<spvtools::ir::Instruction*, std::hash<spvtools::ir::Instruction*>, std::equal_to<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> > const&, spvtools::opt::RegisterLiveness::RegionRegisterLiveness*, spvtools::opt::RegisterLiveness::RegionRegisterLiveness*) const
 T spvtools::opt::RegisterLiveness::SimulateFusion(spvtools::ir::Loop const&, spvtools::ir::Loop const&, spvtools::opt::RegisterLiveness::RegionRegisterLiveness*) const
 T spvtools::opt::RemoveDuplicatesPass::AreTypesEqual(spvtools::ir::Instruction const&, spvtools::ir::Instruction const&, spvtools::ir::IRContext*)
 T spvtools::opt::RemoveDuplicatesPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::RemoveDuplicatesPass::RemoveDuplicateCapabilities(spvtools::ir::IRContext*) const
 T spvtools::opt::RemoveDuplicatesPass::RemoveDuplicateDecorations(spvtools::ir::IRContext*) const
 T spvtools::opt::RemoveDuplicatesPass::RemoveDuplicateTypes(spvtools::ir::IRContext*) const
 T spvtools::opt::RemoveDuplicatesPass::RemoveDuplicatesExtInstImports(spvtools::ir::IRContext*) const
 T spvtools::opt::ReplaceInvalidOpcodePass::BuildWarningMessage(SpvOp_)
 T spvtools::opt::ReplaceInvalidOpcodePass::GetExecutionModel()
 T spvtools::opt::ReplaceInvalidOpcodePass::GetSpecialConstant(unsigned int)
 T spvtools::opt::ReplaceInvalidOpcodePass::IsFragmentShaderOnlyInstruction(spvtools::ir::Instruction*)
 T spvtools::opt::ReplaceInvalidOpcodePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::ReplaceInvalidOpcodePass::ReplaceInstruction(spvtools::ir::Instruction*, char const*, unsigned int, unsigned int)
 T spvtools::opt::ReplaceInvalidOpcodePass::RewriteFunction(spvtools::ir::Function*, SpvExecutionModel_)
 T spvtools::opt::ReplacePhiParentWith(spvtools::ir::Instruction*, unsigned int, unsigned int)
 T spvtools::opt::SENode::AsString() const
 T spvtools::opt::SENode::DumpDot(std::ostream&, bool) const
 T spvtools::opt::SENode::operator!=(spvtools::opt::SENode const&) const
 T spvtools::opt::SENode::operator==(spvtools::opt::SENode const&) const
 T spvtools::opt::SENodeHash::operator()(spvtools::opt::SENode const*) const
 T spvtools::opt::SENodeHash::operator()(std::unique_ptr<spvtools::opt::SENode, std::default_delete<spvtools::opt::SENode> > const&) const
 T spvtools::opt::SENodeSimplifyImpl::AccumulatorsFromMultiply(spvtools::opt::SENode*, bool)
 T spvtools::opt::SENodeSimplifyImpl::EliminateZeroCoefficientRecurrents(spvtools::opt::SENode*)
 T spvtools::opt::SENodeSimplifyImpl::FoldRecurrentAddExpressions(spvtools::opt::SENode*)
 T spvtools::opt::SENodeSimplifyImpl::GatherAccumulatorsFromChildNodes(spvtools::opt::SENode*, spvtools::opt::SENode*, bool)
 T spvtools::opt::SENodeSimplifyImpl::Simplify()
 T spvtools::opt::SENodeSimplifyImpl::SimplifyPolynomial()
 T spvtools::opt::SENodeSimplifyImpl::SimplifyRecurrentAddExpression(spvtools::opt::SERecurrentNode*)
 T spvtools::opt::SENodeSimplifyImpl::UpdateCoefficient(spvtools::opt::SERecurrentNode*, long) const
 T spvtools::opt::SExpression::operator/(spvtools::opt::SExpression) const
 T spvtools::opt::SSAPropagator::AddControlEdge(spvtools::opt::Edge const&)
 T spvtools::opt::SSAPropagator::AddSSAEdges(spvtools::ir::Instruction*)
 T spvtools::opt::SSAPropagator::Initialize(spvtools::ir::Function*)
 T spvtools::opt::SSAPropagator::IsPhiArgExecutable(spvtools::ir::Instruction*, unsigned int) const
 T spvtools::opt::SSAPropagator::Run(spvtools::ir::Function*)
 T spvtools::opt::SSAPropagator::SetStatus(spvtools::ir::Instruction*, spvtools::opt::SSAPropagator::PropStatus)
 T spvtools::opt::SSAPropagator::Simulate(spvtools::ir::BasicBlock*)
 T spvtools::opt::SSAPropagator::Simulate(spvtools::ir::Instruction*)
 T spvtools::opt::SSARewritePass::Initialize(spvtools::ir::IRContext*)
 T spvtools::opt::SSARewritePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::SSARewriter::AddPhiOperands(spvtools::opt::SSARewriter::PhiCandidate*)
 T spvtools::opt::SSARewriter::ApplyReplacements()
 T spvtools::opt::SSARewriter::CreatePhiCandidate(unsigned int, spvtools::ir::BasicBlock*)
 T spvtools::opt::SSARewriter::FinalizePhiCandidate(spvtools::opt::SSARewriter::PhiCandidate*)
 T spvtools::opt::SSARewriter::FinalizePhiCandidates()
 T spvtools::opt::SSARewriter::GenerateSSAReplacements(spvtools::ir::BasicBlock*)
 T spvtools::opt::SSARewriter::GetPhiArgument(spvtools::opt::SSARewriter::PhiCandidate const*, unsigned int)
 T spvtools::opt::SSARewriter::GetReachingDef(unsigned int, spvtools::ir::BasicBlock*)
 T spvtools::opt::SSARewriter::GetReplacement(std::pair<unsigned int, unsigned int>)
 T spvtools::opt::SSARewriter::PhiCandidate::PrettyPrint(spvtools::ir::CFG const*) const
 T spvtools::opt::SSARewriter::PrintPhiCandidates() const
 T spvtools::opt::SSARewriter::PrintReplacementTable() const
 T spvtools::opt::SSARewriter::ProcessLoad(spvtools::ir::Instruction*, spvtools::ir::BasicBlock*)
 T spvtools::opt::SSARewriter::ProcessStore(spvtools::ir::Instruction*, spvtools::ir::BasicBlock*)
 T spvtools::opt::SSARewriter::ReplacePhiUsersWith(spvtools::opt::SSARewriter::PhiCandidate const&, unsigned int)
 T spvtools::opt::SSARewriter::RewriteFunctionIntoSSA(spvtools::ir::Function*)
 T spvtools::opt::SSARewriter::SealBlock(spvtools::ir::BasicBlock*)
 T spvtools::opt::SSARewriter::TryRemoveTrivialPhi(spvtools::opt::SSARewriter::PhiCandidate*)
 T spvtools::opt::ScalarEvolutionAnalysis::AnalyzeAddOp(spvtools::ir::Instruction const*)
 T spvtools::opt::ScalarEvolutionAnalysis::AnalyzeConstant(spvtools::ir::Instruction const*)
 T spvtools::opt::ScalarEvolutionAnalysis::AnalyzeInstruction(spvtools::ir::Instruction const*)
 T spvtools::opt::ScalarEvolutionAnalysis::AnalyzeMultiplyOp(spvtools::ir::Instruction const*)
 T spvtools::opt::ScalarEvolutionAnalysis::AnalyzePhiInstruction(spvtools::ir::Instruction const*)
 T spvtools::opt::ScalarEvolutionAnalysis::BuildGraphWithoutRecurrentTerm(spvtools::opt::SENode*, spvtools::ir::Loop const*)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateAddNode(spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateCantComputeNode()
 T spvtools::opt::ScalarEvolutionAnalysis::CreateConstant(long)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateMultiplyNode(spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateNegation(spvtools::opt::SENode*)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateRecurrentExpression(spvtools::ir::Loop const*, spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateSubtraction(spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::ScalarEvolutionAnalysis::CreateValueUnknownNode(spvtools::ir::Instruction const*)
 T spvtools::opt::ScalarEvolutionAnalysis::GetCachedOrAdd(std::unique_ptr<spvtools::opt::SENode, std::default_delete<spvtools::opt::SENode> >)
 T spvtools::opt::ScalarEvolutionAnalysis::GetCoefficientFromRecurrentTerm(spvtools::opt::SENode*, spvtools::ir::Loop const*)
 T spvtools::opt::ScalarEvolutionAnalysis::GetRecurrentTerm(spvtools::opt::SENode*, spvtools::ir::Loop const*)
 T spvtools::opt::ScalarEvolutionAnalysis::IsAlwaysGreaterOrEqualToZero(spvtools::opt::SENode*, bool*) const
 T spvtools::opt::ScalarEvolutionAnalysis::IsAlwaysGreaterThanZero(spvtools::opt::SENode*, bool*) const
 T spvtools::opt::ScalarEvolutionAnalysis::IsLoopInvariant(spvtools::ir::Loop const*, spvtools::opt::SENode const*) const
 T spvtools::opt::ScalarEvolutionAnalysis::ScalarEvolutionAnalysis(spvtools::ir::IRContext*)
 T spvtools::opt::ScalarEvolutionAnalysis::SimplifyExpression(spvtools::opt::SENode*)
 T spvtools::opt::ScalarEvolutionAnalysis::UpdateChildNode(spvtools::opt::SENode*, spvtools::opt::SENode*, spvtools::opt::SENode*)
 T spvtools::opt::ScalarReplacementPass::CanReplaceVariable(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::CheckAnnotations(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::CheckLoad(spvtools::ir::Instruction const*, unsigned int) const
 T spvtools::opt::ScalarReplacementPass::CheckStore(spvtools::ir::Instruction const*, unsigned int) const
 T spvtools::opt::ScalarReplacementPass::CheckType(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::CheckTypeAnnotations(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::ir::Instruction const*, spvtools::opt::ScalarReplacementPass::VariableStats*) const
 T spvtools::opt::ScalarReplacementPass::CheckUsesRelaxed(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::CreateNullConstant(unsigned int)
 T spvtools::opt::ScalarReplacementPass::CreateReplacementVariables(spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >*)
 T spvtools::opt::ScalarReplacementPass::CreateVariable(unsigned int, spvtools::ir::Instruction*, unsigned int, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >*)
 T spvtools::opt::ScalarReplacementPass::GetArrayLength(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::GetConstantInteger(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::GetIntegerLiteral(spvtools::ir::Operand const&) const
 T spvtools::opt::ScalarReplacementPass::GetNumElements(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::GetOrCreateInitialValue(spvtools::ir::Instruction*, unsigned int, spvtools::ir::Instruction*)
 T spvtools::opt::ScalarReplacementPass::GetOrCreatePointerType(unsigned int)
 T spvtools::opt::ScalarReplacementPass::GetStorageType(spvtools::ir::Instruction const*) const
 T spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::ir::Instruction*)
 T spvtools::opt::ScalarReplacementPass::IsLargerThanSizeLimit(unsigned long) const
 T spvtools::opt::ScalarReplacementPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::ScalarReplacementPass::ProcessFunction(spvtools::ir::Function*)
 T spvtools::opt::ScalarReplacementPass::ReplaceAccessChain(spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&)
 T spvtools::opt::ScalarReplacementPass::ReplaceVariable(spvtools::ir::Instruction*, std::queue<spvtools::ir::Instruction*, std::deque<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >*)
 T spvtools::opt::ScalarReplacementPass::ReplaceWholeLoad(spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&)
 T spvtools::opt::ScalarReplacementPass::ReplaceWholeStore(spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > const&)
 T spvtools::opt::ScalarReplacementPass::TransferAnnotations(spvtools::ir::Instruction const*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >*)
 T spvtools::opt::SetSpecConstantDefaultValuePass::ParseDefaultValuesString(char const*)
 T spvtools::opt::SetSpecConstantDefaultValuePass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::SimplificationPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::ir::Function*)
 T spvtools::opt::StrengthReductionPass::FindIntTypesAndConstants()
 T spvtools::opt::StrengthReductionPass::GetConstantId(unsigned int)
 T spvtools::opt::StrengthReductionPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::StrengthReductionPass::ReplaceMultiplyByPowerOf2(spvtools::ir::InstructionList::iterator*)
 T spvtools::opt::StrengthReductionPass::ScanFunctions()
 T spvtools::opt::StripDebugInfoPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::StripReflectInfoPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::UnifyConstantPass::Process(spvtools::ir::IRContext*)
 T spvtools::opt::ValueNumberTable::AssignValueNumber(spvtools::ir::Instruction*)
 T spvtools::opt::ValueNumberTable::BuildDominatorTreeValueNumberTable()
 T spvtools::opt::ValueNumberTable::GetValueNumber(spvtools::ir::Instruction*) const
 T spvtools::opt::ValueNumberTable::GetValueNumber(unsigned int) const
 T spvtools::opt::ValueTableHash::operator()(spvtools::ir::Instruction const&) const
 T spvtools::opt::VectorDCE::AddItemToWorkListIfNeeded(spvtools::opt::VectorDCE::WorkListItem, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
 T spvtools::opt::VectorDCE::FindLiveComponents(spvtools::ir::Function*, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*)
 T spvtools::opt::VectorDCE::HasScalarResult(spvtools::ir::Instruction const*) const
 T spvtools::opt::VectorDCE::HasVectorOrScalarResult(spvtools::ir::Instruction const*) const
 T spvtools::opt::VectorDCE::HasVectorResult(spvtools::ir::Instruction const*) const
 T spvtools::opt::VectorDCE::MarkCompositeContructUsesAsLive(spvtools::opt::VectorDCE::WorkListItem, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
 T spvtools::opt::VectorDCE::MarkExtractUseAsLive(spvtools::ir::Instruction const*, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
 T spvtools::opt::VectorDCE::MarkInsertUsesAsLive(spvtools::opt::VectorDCE::WorkListItem const&, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
 T spvtools::opt::VectorDCE::MarkUsesAsLive(spvtools::ir::Instruction*, spvtools::utils::BitVector const&, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
 T spvtools::opt::VectorDCE::MarkVectorShuffleUsesAsLive(spvtools::opt::VectorDCE::WorkListItem const&, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
 T spvtools::opt::VectorDCE::Process(spvtools::ir::IRContext*)
 T spvtools::opt::VectorDCE::RewriteInsertInstruction(spvtools::ir::Instruction*, spvtools::utils::BitVector const&)
 T spvtools::opt::VectorDCE::RewriteInstructions(spvtools::ir::Function*, std::unordered_map<unsigned int, spvtools::utils::BitVector, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> > > const&)
 T spvtools::opt::VectorDCE::VectorDCEFunction(spvtools::ir::Function*)
 T spvtools::opt::Workaround1209::Process(spvtools::ir::IRContext*)
 T spvtools::opt::Workaround1209::RemoveOpUnreachableInLoops()
 T spvtools::opt::analysis::Array::Array(spvtools::opt::analysis::Type*, unsigned int)
 T spvtools::opt::analysis::Array::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Array::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Array::ReplaceElementType(spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::Array::str() const
 T spvtools::opt::analysis::Constant::GetDouble() const
 T spvtools::opt::analysis::Constant::GetFloat() const
 T spvtools::opt::analysis::Constant::GetS32() const
 T spvtools::opt::analysis::Constant::GetS64() const
 T spvtools::opt::analysis::Constant::GetU32() const
 T spvtools::opt::analysis::Constant::GetU64() const
 T spvtools::opt::analysis::Constant::GetValueAsDouble() const
 T spvtools::opt::analysis::Constant::GetVectorComponents(spvtools::opt::analysis::ConstantManager*) const
 T spvtools::opt::analysis::ConstantManager::BuildInstructionAndAddToModule(spvtools::opt::analysis::Constant const*, spvtools::ir::InstructionList::iterator*, unsigned int)
 T spvtools::opt::analysis::ConstantManager::ConstantManager(spvtools::ir::IRContext*)
 T spvtools::opt::analysis::ConstantManager::CreateCompositeInstruction(unsigned int, spvtools::opt::analysis::CompositeConstant const*, unsigned int) const
 T spvtools::opt::analysis::ConstantManager::CreateConstant(spvtools::opt::analysis::Type const*, std::vector<unsigned int, std::allocator<unsigned int> > const&) const
 T spvtools::opt::analysis::ConstantManager::CreateInstruction(unsigned int, spvtools::opt::analysis::Constant const*, unsigned int) const
 T spvtools::opt::analysis::ConstantManager::GetConstant(spvtools::opt::analysis::Type const*, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spvtools::opt::analysis::ConstantManager::GetConstantFromInst(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::ConstantManager::GetConstantsFromIds(std::vector<unsigned int, std::allocator<unsigned int> > const&) const
 T spvtools::opt::analysis::ConstantManager::GetDefiningInstruction(spvtools::opt::analysis::Constant const*, spvtools::ir::InstructionList::iterator*)
 T spvtools::opt::analysis::ConstantManager::GetOperandConstants(spvtools::ir::Instruction*) const
 T spvtools::opt::analysis::ConstantManager::GetType(spvtools::ir::Instruction const*) const
 T spvtools::opt::analysis::DecorationManager::AddDecoration(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DecorationManager::AnalyzeDecorations()
 T spvtools::opt::analysis::DecorationManager::AreDecorationsTheSame(spvtools::ir::Instruction const*, spvtools::ir::Instruction const*, bool) const
 T spvtools::opt::analysis::DecorationManager::CloneDecorations(unsigned int, unsigned int)
 T spvtools::opt::analysis::DecorationManager::ForEachDecoration(unsigned int, unsigned int, std::function<void (spvtools::ir::Instruction const&)>)
 T spvtools::opt::analysis::DecorationManager::GetDecorationsFor(unsigned int, bool)
 T spvtools::opt::analysis::DecorationManager::GetDecorationsFor(unsigned int, bool) const
 T spvtools::opt::analysis::DecorationManager::HaveTheSameDecorations(unsigned int, unsigned int) const
 T spvtools::opt::analysis::DecorationManager::RemoveDecoration(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::function<bool (spvtools::ir::Instruction const&)>)
 T spvtools::opt::analysis::DecorationManager::WhileEachDecoration(unsigned int, unsigned int, std::function<bool (spvtools::ir::Instruction const&)>)
 T spvtools::opt::analysis::DefUseManager::AnalyzeDefUse(spvtools::ir::Module*)
 T spvtools::opt::analysis::DefUseManager::AnalyzeInstDef(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DefUseManager::AnalyzeInstDefUse(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DefUseManager::AnalyzeInstUse(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DefUseManager::ClearInst(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DefUseManager::EraseUseRecordsOfOperandIds(spvtools::ir::Instruction const*)
 T spvtools::opt::analysis::DefUseManager::ForEachUse(spvtools::ir::Instruction const*, std::function<void (spvtools::ir::Instruction*, unsigned int)> const&) const
 T spvtools::opt::analysis::DefUseManager::ForEachUse(unsigned int, std::function<void (spvtools::ir::Instruction*, unsigned int)> const&) const
 T spvtools::opt::analysis::DefUseManager::ForEachUser(spvtools::ir::Instruction const*, std::function<void (spvtools::ir::Instruction*)> const&) const
 T spvtools::opt::analysis::DefUseManager::ForEachUser(unsigned int, std::function<void (spvtools::ir::Instruction*)> const&) const
 T spvtools::opt::analysis::DefUseManager::GetAnnotations(unsigned int) const
 T spvtools::opt::analysis::DefUseManager::GetDef(unsigned int)
 T spvtools::opt::analysis::DefUseManager::GetDef(unsigned int) const
 T spvtools::opt::analysis::DefUseManager::NumUsers(spvtools::ir::Instruction const*) const
 T spvtools::opt::analysis::DefUseManager::NumUsers(unsigned int) const
 T spvtools::opt::analysis::DefUseManager::NumUses(spvtools::ir::Instruction const*) const
 T spvtools::opt::analysis::DefUseManager::NumUses(unsigned int) const
 T spvtools::opt::analysis::DefUseManager::UpdateDefUse(spvtools::ir::Instruction*)
 T spvtools::opt::analysis::DefUseManager::UsersBegin(spvtools::ir::Instruction const*) const
 T spvtools::opt::analysis::DefUseManager::UsersNotEnd(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > const&, spvtools::ir::Instruction const*) const
 T spvtools::opt::analysis::DefUseManager::UsersNotEnd(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > const&, std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > const&, spvtools::ir::Instruction const*) const
 T spvtools::opt::analysis::DefUseManager::WhileEachUse(spvtools::ir::Instruction const*, std::function<bool (spvtools::ir::Instruction*, unsigned int)> const&) const
 T spvtools::opt::analysis::DefUseManager::WhileEachUse(unsigned int, std::function<bool (spvtools::ir::Instruction*, unsigned int)> const&) const
 T spvtools::opt::analysis::DefUseManager::WhileEachUser(spvtools::ir::Instruction const*, std::function<bool (spvtools::ir::Instruction*)> const&) const
 T spvtools::opt::analysis::DefUseManager::WhileEachUser(unsigned int, std::function<bool (spvtools::ir::Instruction*)> const&) const
 T spvtools::opt::analysis::Float::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Float::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Float::str() const
 T spvtools::opt::analysis::ForwardPointer::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::ForwardPointer::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::ForwardPointer::str() const
 T spvtools::opt::analysis::Function::Function(spvtools::opt::analysis::Type*, std::vector<spvtools::opt::analysis::Type const*, std::allocator<spvtools::opt::analysis::Type const*> > const&)
 T spvtools::opt::analysis::Function::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Function::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Function::SetReturnType(spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::Function::str() const
 T spvtools::opt::analysis::Image::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Image::Image(spvtools::opt::analysis::Type*, SpvDim_, unsigned int, bool, bool, unsigned int, SpvImageFormat_, SpvAccessQualifier_)
 T spvtools::opt::analysis::Image::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Image::str() const
 T spvtools::opt::analysis::Integer::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Integer::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Integer::str() const
 T spvtools::opt::analysis::Matrix::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Matrix::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Matrix::Matrix(spvtools::opt::analysis::Type*, unsigned int)
 T spvtools::opt::analysis::Matrix::str() const
 T spvtools::opt::analysis::Opaque::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Opaque::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Opaque::str() const
 T spvtools::opt::analysis::Pipe::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Pipe::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Pipe::str() const
 T spvtools::opt::analysis::Pointer::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Pointer::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Pointer::Pointer(spvtools::opt::analysis::Type const*, SpvStorageClass_)
 T spvtools::opt::analysis::Pointer::SetPointeeType(spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::Pointer::str() const
 T spvtools::opt::analysis::RuntimeArray::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::RuntimeArray::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::RuntimeArray::ReplaceElementType(spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::RuntimeArray::RuntimeArray(spvtools::opt::analysis::Type*)
 T spvtools::opt::analysis::RuntimeArray::str() const
 T spvtools::opt::analysis::SampledImage::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::SampledImage::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::SampledImage::str() const
 T spvtools::opt::analysis::Struct::AddMemberDecoration(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> >&&)
 T spvtools::opt::analysis::Struct::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Struct::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Struct::Struct(std::vector<spvtools::opt::analysis::Type const*, std::allocator<spvtools::opt::analysis::Type const*> > const&)
 T spvtools::opt::analysis::Struct::str() const
 T spvtools::opt::analysis::Type::Clone() const
 T spvtools::opt::analysis::Type::GetDecorationStr() const
 T spvtools::opt::analysis::Type::GetHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Type::HasSameDecorations(spvtools::opt::analysis::Type const*) const
 T spvtools::opt::analysis::Type::HashValue() const
 T spvtools::opt::analysis::Type::IsUniqueType(bool) const
 T spvtools::opt::analysis::Type::RemoveDecorations() const
 T spvtools::opt::analysis::Type::operator==(spvtools::opt::analysis::Type const&) const
 T spvtools::opt::analysis::TypeManager::AnalyzeTypes(spvtools::ir::Module const&)
 T spvtools::opt::analysis::TypeManager::AttachDecoration(spvtools::ir::Instruction const&, spvtools::opt::analysis::Type*)
 T spvtools::opt::analysis::TypeManager::AttachDecorations(unsigned int, spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::TypeManager::CreateDecoration(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&, unsigned int)
 T spvtools::opt::analysis::TypeManager::FindPointerToType(unsigned int, SpvStorageClass_)
 T spvtools::opt::analysis::TypeManager::GetId(spvtools::opt::analysis::Type const*) const
 T spvtools::opt::analysis::TypeManager::GetMemberType(spvtools::opt::analysis::Type const*, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T spvtools::opt::analysis::TypeManager::GetRegisteredType(spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::TypeManager::GetType(unsigned int) const
 T spvtools::opt::analysis::TypeManager::GetTypeAndPointerType(unsigned int, SpvStorageClass_) const
 T spvtools::opt::analysis::TypeManager::GetTypeInstruction(spvtools::opt::analysis::Type const*)
 T spvtools::opt::analysis::TypeManager::RebuildType(spvtools::opt::analysis::Type const&)
 T spvtools::opt::analysis::TypeManager::RecordIfTypeDefinition(spvtools::ir::Instruction const&)
 T spvtools::opt::analysis::TypeManager::RegisterType(unsigned int, spvtools::opt::analysis::Type const&)
 T spvtools::opt::analysis::TypeManager::RemoveId(unsigned int)
 T spvtools::opt::analysis::TypeManager::ReplaceForwardPointers(spvtools::opt::analysis::Type*)
 T spvtools::opt::analysis::TypeManager::ReplaceType(spvtools::opt::analysis::Type*, spvtools::opt::analysis::Type*)
 T spvtools::opt::analysis::TypeManager::TypeManager(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spvtools::ir::IRContext*)
 T spvtools::opt::analysis::Vector::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 T spvtools::opt::analysis::Vector::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 T spvtools::opt::analysis::Vector::Vector(spvtools::opt::analysis::Type*, unsigned int)
 T spvtools::opt::analysis::Vector::str() const
 T spvtools::opt::analysis::operator==(spvtools::opt::analysis::DefUseManager const&, spvtools::opt::analysis::DefUseManager const&)
 T spvtools::opt::operator<<(std::ostream&, spvtools::opt::SSAPropagator::PropStatus const&)
 T spvtools::spvInstructionBinaryToText(spv_target_env, unsigned int const*, unsigned long, unsigned int const*, unsigned long, unsigned int)
 T spvtools::utils::BitVector::Or(spvtools::utils::BitVector const&)
 T spvtools::utils::BitVector::ReportDensity(std::ostream&)
 T spvtools::utils::operator<<(std::ostream&, spvtools::utils::BitVector const&)
 T spvutils::CardinalToOrdinal(unsigned long)
 T spvutils::ParseAndEncodeFloatingPointNumber(char const*, spvutils::NumberType const&, std::function<void (unsigned int)>, std::string*)
 T spvutils::ParseAndEncodeIntegerNumber(char const*, spvutils::NumberType const&, std::function<void (unsigned int)>, std::string*)
 T spvutils::ParseAndEncodeNumber(char const*, spvutils::NumberType const&, std::function<void (unsigned int)>, std::string*)
 T yylex(YYSTYPE*, glslang::TParseContext&)
 T yyparse(glslang::TParseContext*)
 ThreadGetCurrentId
 ThreadJoin
 ThreadMultiWait
 ThreadSleep
 ThreadYield
 V typeinfo for Etc::Block4x4Encoding
 V typeinfo for Etc::Block4x4Encoding_ETC1
 V typeinfo for Etc::Block4x4Encoding_R11
 V typeinfo for Etc::Block4x4Encoding_RG11
 V typeinfo for Etc::Block4x4Encoding_RGB8
 V typeinfo for Etc::Block4x4Encoding_RGB8A1
 V typeinfo for Etc::Block4x4Encoding_RGB8A1_Opaque
 V typeinfo for Etc::Block4x4Encoding_RGB8A1_Transparent
 V typeinfo for Etc::Block4x4Encoding_RGBA8
 V typeinfo for Etc::Block4x4Encoding_RGBA8_Opaque
 V typeinfo for Etc::Block4x4Encoding_RGBA8_Transparent
 V typeinfo for TCompiler
 V typeinfo for TGenericCompiler
 V typeinfo for TGenericLinker
 V typeinfo for TIntermNode
 V typeinfo for TLinker
 V typeinfo for TShHandleBase
 V typeinfo for TUniformLinkedMap
 V typeinfo for TUniformMap
 V typeinfo for glslang::HlslGrammar
 V typeinfo for glslang::HlslParseContext
 V typeinfo for glslang::HlslScanContext
 V typeinfo for glslang::HlslTokenStream
 V typeinfo for glslang::TAnonMember
 V typeinfo for glslang::TBuiltInParseables
 V typeinfo for glslang::TBuiltInParseablesHlsl
 V typeinfo for glslang::TBuiltIns
 V typeinfo for glslang::TConstTraverser
 V typeinfo for glslang::TConstUnionArray
 V typeinfo for glslang::TDefaultHlslIoResolver
 V typeinfo for glslang::TDefaultIoResolver
 V typeinfo for glslang::TDefaultIoResolverBase
 V typeinfo for glslang::TDeferredCompiler
 V typeinfo for glslang::TFunction
 V typeinfo for glslang::TIndexTraverser
 V typeinfo for glslang::TInductiveTraverser
 V typeinfo for glslang::TInputScanner
 V typeinfo for glslang::TIntermAggregate
 V typeinfo for glslang::TIntermBinary
 V typeinfo for glslang::TIntermBranch
 V typeinfo for glslang::TIntermConstantUnion
 V typeinfo for glslang::TIntermLoop
 V typeinfo for glslang::TIntermMethod
 V typeinfo for glslang::TIntermOperator
 V typeinfo for glslang::TIntermSelection
 V typeinfo for glslang::TIntermSwitch
 V typeinfo for glslang::TIntermSymbol
 V typeinfo for glslang::TIntermTraverser
 V typeinfo for glslang::TIntermTyped
 V typeinfo for glslang::TIntermUnary
 V typeinfo for glslang::TIoMapResolver
 V typeinfo for glslang::TIoMapper
 V typeinfo for glslang::TLiveTraverser
 V typeinfo for glslang::TOutputTraverser
 V typeinfo for glslang::TParseContext
 V typeinfo for glslang::TParseContextBase
 V typeinfo for glslang::TParseVersions
 V typeinfo for glslang::TPpContext
 V typeinfo for glslang::TPpContext::TokenizableIncludeFile
 V typeinfo for glslang::TPpContext::tInput
 V typeinfo for glslang::TPpContext::tMacroInput
 V typeinfo for glslang::TPpContext::tMarkerInput
 V typeinfo for glslang::TPpContext::tStringInput
 V typeinfo for glslang::TPpContext::tTokenInput
 V typeinfo for glslang::TPpContext::tUngotTokenInput
 V typeinfo for glslang::TPpContext::tZeroInput
 V typeinfo for glslang::TPrecisionManager
 V typeinfo for glslang::TProgram
 V typeinfo for glslang::TReflection
 V typeinfo for glslang::TReflectionTraverser
 V typeinfo for glslang::TRemoveTraverser
 V typeinfo for glslang::TScanContext
 V typeinfo for glslang::TShader
 V typeinfo for glslang::TShader::ForbidIncluder
 V typeinfo for glslang::TSmallArrayVector
 V typeinfo for glslang::TSymbol
 V typeinfo for glslang::TType
 V typeinfo for glslang::TVarGatherTraverser
 V typeinfo for glslang::TVarSetTraverser
 V typeinfo for glslang::TVariable
 V typeinfo for glslang::TextureUpgradeAndSamplerRemovalTransform
 V typeinfo for spv::Block
 V typeinfo for spv::Builder
 V typeinfo for spv::Function
 V typeinfo for spv::Function::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const::{lambda(spv::Block const*)#1}
 V typeinfo for spv::Instruction
 V typeinfo for spv::Module
 V typeinfo for std::_Bind<std::_Mem_fn<int (glslang::TInputScanner::*)() const> (glslang::TInputScanner*)>
 V typeinfo for std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>
 V typeinfo for std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>*
 V typeinfo for std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>
 V typeinfo for std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>*
 V typeinfo for std::_Maybe_get_result_type<true, std::_Mem_fn<int (glslang::TInputScanner::*)() const> >
 V typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo for std::_Sp_make_shared_tag
 V typeinfo for std::_Weak_result_type<std::_Mem_fn<int (glslang::TInputScanner::*)() const> >
 V typeinfo for std::_Weak_result_type_impl<std::_Mem_fn<int (glslang::TInputScanner::*)() const> >
 V typeinfo for std::__future_base::_Async_state_common
 V typeinfo for std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>
 V typeinfo for std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>
 V typeinfo for std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>
 V typeinfo for std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>
 V typeinfo for std::__future_base::_Result<unsigned int>
 V typeinfo for std::__future_base::_Result<void>
 V typeinfo for std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<unsigned int>, std::__future_base::_Result_base::_Deleter>, unsigned int>
 V typeinfo for std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<void>, std::__future_base::_Result_base::_Deleter>, void>
 V typeinfo for std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >
 V typeinfo for std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >
 V typeinfo for std::thread::_Impl_base
 V typeinfo name for Etc::Block4x4Encoding
 V typeinfo name for Etc::Block4x4Encoding_ETC1
 V typeinfo name for Etc::Block4x4Encoding_R11
 V typeinfo name for Etc::Block4x4Encoding_RG11
 V typeinfo name for Etc::Block4x4Encoding_RGB8
 V typeinfo name for Etc::Block4x4Encoding_RGB8A1
 V typeinfo name for Etc::Block4x4Encoding_RGB8A1_Opaque
 V typeinfo name for Etc::Block4x4Encoding_RGB8A1_Transparent
 V typeinfo name for Etc::Block4x4Encoding_RGBA8
 V typeinfo name for Etc::Block4x4Encoding_RGBA8_Opaque
 V typeinfo name for Etc::Block4x4Encoding_RGBA8_Transparent
 V typeinfo name for TCompiler
 V typeinfo name for TGenericCompiler
 V typeinfo name for TGenericLinker
 V typeinfo name for TIntermNode
 V typeinfo name for TLinker
 V typeinfo name for TShHandleBase
 V typeinfo name for TUniformLinkedMap
 V typeinfo name for TUniformMap
 V typeinfo name for glslang::HlslGrammar
 V typeinfo name for glslang::HlslParseContext
 V typeinfo name for glslang::HlslScanContext
 V typeinfo name for glslang::HlslTokenStream
 V typeinfo name for glslang::TAnonMember
 V typeinfo name for glslang::TBuiltInParseables
 V typeinfo name for glslang::TBuiltInParseablesHlsl
 V typeinfo name for glslang::TBuiltIns
 V typeinfo name for glslang::TConstTraverser
 V typeinfo name for glslang::TConstUnionArray
 V typeinfo name for glslang::TDefaultHlslIoResolver
 V typeinfo name for glslang::TDefaultIoResolver
 V typeinfo name for glslang::TDefaultIoResolverBase
 V typeinfo name for glslang::TDeferredCompiler
 V typeinfo name for glslang::TFunction
 V typeinfo name for glslang::TIndexTraverser
 V typeinfo name for glslang::TInductiveTraverser
 V typeinfo name for glslang::TInputScanner
 V typeinfo name for glslang::TIntermAggregate
 V typeinfo name for glslang::TIntermBinary
 V typeinfo name for glslang::TIntermBranch
 V typeinfo name for glslang::TIntermConstantUnion
 V typeinfo name for glslang::TIntermLoop
 V typeinfo name for glslang::TIntermMethod
 V typeinfo name for glslang::TIntermOperator
 V typeinfo name for glslang::TIntermSelection
 V typeinfo name for glslang::TIntermSwitch
 V typeinfo name for glslang::TIntermSymbol
 V typeinfo name for glslang::TIntermTraverser
 V typeinfo name for glslang::TIntermTyped
 V typeinfo name for glslang::TIntermUnary
 V typeinfo name for glslang::TIoMapResolver
 V typeinfo name for glslang::TIoMapper
 V typeinfo name for glslang::TLiveTraverser
 V typeinfo name for glslang::TOutputTraverser
 V typeinfo name for glslang::TParseContext
 V typeinfo name for glslang::TParseContextBase
 V typeinfo name for glslang::TParseVersions
 V typeinfo name for glslang::TPpContext
 V typeinfo name for glslang::TPpContext::TokenizableIncludeFile
 V typeinfo name for glslang::TPpContext::tInput
 V typeinfo name for glslang::TPpContext::tMacroInput
 V typeinfo name for glslang::TPpContext::tMarkerInput
 V typeinfo name for glslang::TPpContext::tStringInput
 V typeinfo name for glslang::TPpContext::tTokenInput
 V typeinfo name for glslang::TPpContext::tUngotTokenInput
 V typeinfo name for glslang::TPpContext::tZeroInput
 V typeinfo name for glslang::TPrecisionManager
 V typeinfo name for glslang::TProgram
 V typeinfo name for glslang::TReflection
 V typeinfo name for glslang::TReflectionTraverser
 V typeinfo name for glslang::TRemoveTraverser
 V typeinfo name for glslang::TScanContext
 V typeinfo name for glslang::TShader
 V typeinfo name for glslang::TShader::ForbidIncluder
 V typeinfo name for glslang::TSmallArrayVector
 V typeinfo name for glslang::TSymbol
 V typeinfo name for glslang::TType
 V typeinfo name for glslang::TVarGatherTraverser
 V typeinfo name for glslang::TVarSetTraverser
 V typeinfo name for glslang::TVariable
 V typeinfo name for glslang::TextureUpgradeAndSamplerRemovalTransform
 V typeinfo name for spv::Block
 V typeinfo name for spv::Builder
 V typeinfo name for spv::Function
 V typeinfo name for spv::Function::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const::{lambda(spv::Block const*)#1}
 V typeinfo name for spv::Instruction
 V typeinfo name for spv::Module
 V typeinfo name for std::_Bind<std::_Mem_fn<int (glslang::TInputScanner::*)() const> (glslang::TInputScanner*)>
 V typeinfo name for std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>
 V typeinfo name for std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>*
 V typeinfo name for std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>
 V typeinfo name for std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>*
 V typeinfo name for std::_Maybe_get_result_type<true, std::_Mem_fn<int (glslang::TInputScanner::*)() const> >
 V typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
 V typeinfo name for std::_Sp_make_shared_tag
 V typeinfo name for std::_Weak_result_type<std::_Mem_fn<int (glslang::TInputScanner::*)() const> >
 V typeinfo name for std::_Weak_result_type_impl<std::_Mem_fn<int (glslang::TInputScanner::*)() const> >
 V typeinfo name for std::__future_base::_Async_state_common
 V typeinfo name for std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>
 V typeinfo name for std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>
 V typeinfo name for std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>
 V typeinfo name for std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>
 V typeinfo name for std::__future_base::_Result<unsigned int>
 V typeinfo name for std::__future_base::_Result<void>
 V typeinfo name for std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<unsigned int>, std::__future_base::_Result_base::_Deleter>, unsigned int>
 V typeinfo name for std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<void>, std::__future_base::_Result_base::_Deleter>, void>
 V typeinfo name for std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >
 V typeinfo name for std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >
 V typeinfo name for std::thread::_Impl_base
 V vtable for Etc::Block4x4Encoding
 V vtable for Etc::Block4x4Encoding_ETC1
 V vtable for Etc::Block4x4Encoding_R11
 V vtable for Etc::Block4x4Encoding_RG11
 V vtable for Etc::Block4x4Encoding_RGB8
 V vtable for Etc::Block4x4Encoding_RGB8A1
 V vtable for Etc::Block4x4Encoding_RGB8A1_Opaque
 V vtable for Etc::Block4x4Encoding_RGB8A1_Transparent
 V vtable for Etc::Block4x4Encoding_RGBA8
 V vtable for Etc::Block4x4Encoding_RGBA8_Opaque
 V vtable for Etc::Block4x4Encoding_RGBA8_Transparent
 V vtable for TCompiler
 V vtable for TGenericCompiler
 V vtable for TGenericLinker
 V vtable for TIntermNode
 V vtable for TLinker
 V vtable for TShHandleBase
 V vtable for TUniformLinkedMap
 V vtable for TUniformMap
 V vtable for glslang::HlslGrammar
 V vtable for glslang::HlslParseContext
 V vtable for glslang::HlslScanContext
 V vtable for glslang::HlslTokenStream
 V vtable for glslang::TAnonMember
 V vtable for glslang::TBuiltInParseables
 V vtable for glslang::TBuiltInParseablesHlsl
 V vtable for glslang::TBuiltIns
 V vtable for glslang::TConstTraverser
 V vtable for glslang::TConstUnionArray
 V vtable for glslang::TDefaultHlslIoResolver
 V vtable for glslang::TDefaultIoResolver
 V vtable for glslang::TDefaultIoResolverBase
 V vtable for glslang::TDeferredCompiler
 V vtable for glslang::TFunction
 V vtable for glslang::TIndexTraverser
 V vtable for glslang::TInductiveTraverser
 V vtable for glslang::TInputScanner
 V vtable for glslang::TIntermAggregate
 V vtable for glslang::TIntermBinary
 V vtable for glslang::TIntermBranch
 V vtable for glslang::TIntermConstantUnion
 V vtable for glslang::TIntermLoop
 V vtable for glslang::TIntermMethod
 V vtable for glslang::TIntermOperator
 V vtable for glslang::TIntermSelection
 V vtable for glslang::TIntermSwitch
 V vtable for glslang::TIntermSymbol
 V vtable for glslang::TIntermTraverser
 V vtable for glslang::TIntermTyped
 V vtable for glslang::TIntermUnary
 V vtable for glslang::TIoMapResolver
 V vtable for glslang::TIoMapper
 V vtable for glslang::TLiveTraverser
 V vtable for glslang::TOutputTraverser
 V vtable for glslang::TParseContext
 V vtable for glslang::TParseContextBase
 V vtable for glslang::TParseVersions
 V vtable for glslang::TPpContext
 V vtable for glslang::TPpContext::TokenizableIncludeFile
 V vtable for glslang::TPpContext::tInput
 V vtable for glslang::TPpContext::tMacroInput
 V vtable for glslang::TPpContext::tMarkerInput
 V vtable for glslang::TPpContext::tStringInput
 V vtable for glslang::TPpContext::tTokenInput
 V vtable for glslang::TPpContext::tUngotTokenInput
 V vtable for glslang::TPpContext::tZeroInput
 V vtable for glslang::TPrecisionManager
 V vtable for glslang::TProgram
 V vtable for glslang::TReflection
 V vtable for glslang::TReflectionTraverser
 V vtable for glslang::TRemoveTraverser
 V vtable for glslang::TScanContext
 V vtable for glslang::TShader
 V vtable for glslang::TShader::ForbidIncluder
 V vtable for glslang::TShader::Includer
 V vtable for glslang::TSmallArrayVector
 V vtable for glslang::TSymbol
 V vtable for glslang::TType
 V vtable for glslang::TVarGatherTraverser
 V vtable for glslang::TVarSetTraverser
 V vtable for glslang::TVariable
 V vtable for glslang::TextureUpgradeAndSamplerRemovalTransform
 V vtable for spv::Block
 V vtable for spv::Builder
 V vtable for spv::Function
 V vtable for spv::Instruction
 V vtable for spv::Module
 V vtable for spvtools::ir::Instruction
 V vtable for spvtools::ir::InstructionList
 V vtable for spvtools::opt::AggressiveDCEPass
 V vtable for spvtools::opt::BlockMergePass
 V vtable for spvtools::opt::CCPPass
 V vtable for spvtools::opt::CFGCleanupPass
 V vtable for spvtools::opt::CommonUniformElimPass
 V vtable for spvtools::opt::CompactIdsPass
 V vtable for spvtools::opt::Constraint
 V vtable for spvtools::opt::CopyPropagateArrays
 V vtable for spvtools::opt::DeadBranchElimPass
 V vtable for spvtools::opt::DeadInsertElimPass
 V vtable for spvtools::opt::DeadVariableElimination
 V vtable for spvtools::opt::DependenceDistance
 V vtable for spvtools::opt::DependenceEmpty
 V vtable for spvtools::opt::DependenceLine
 V vtable for spvtools::opt::DependenceNone
 V vtable for spvtools::opt::DependencePoint
 V vtable for spvtools::opt::EliminateDeadConstantPass
 V vtable for spvtools::opt::EliminateDeadFunctionsPass
 V vtable for spvtools::opt::FlattenDecorationPass
 V vtable for spvtools::opt::FoldSpecConstantOpAndCompositePass
 V vtable for spvtools::opt::FreezeSpecConstantValuePass
 V vtable for spvtools::opt::IfConversion
 V vtable for spvtools::opt::InlineExhaustivePass
 V vtable for spvtools::opt::InlineOpaquePass
 V vtable for spvtools::opt::InlinePass
 V vtable for spvtools::opt::LICMPass
 V vtable for spvtools::opt::LocalAccessChainConvertPass
 V vtable for spvtools::opt::LocalMultiStoreElimPass
 V vtable for spvtools::opt::LocalRedundancyEliminationPass
 V vtable for spvtools::opt::LocalSingleBlockLoadStoreElimPass
 V vtable for spvtools::opt::LocalSingleStoreElimPass
 V vtable for spvtools::opt::LoopFissionPass
 V vtable for spvtools::opt::LoopFusionPass
 V vtable for spvtools::opt::LoopPeelingPass
 V vtable for spvtools::opt::LoopUnroller
 V vtable for spvtools::opt::LoopUnswitchPass
 V vtable for spvtools::opt::MemPass
 V vtable for spvtools::opt::MergeReturnPass
 V vtable for spvtools::opt::NullPass
 V vtable for spvtools::opt::Pass
 V vtable for spvtools::opt::PrivateToLocalPass
 V vtable for spvtools::opt::ReduceLoadSize
 V vtable for spvtools::opt::RedundancyEliminationPass
 V vtable for spvtools::opt::RemoveDuplicatesPass
 V vtable for spvtools::opt::ReplaceInvalidOpcodePass
 V vtable for spvtools::opt::SEAddNode
 V vtable for spvtools::opt::SECantCompute
 V vtable for spvtools::opt::SEConstantNode
 V vtable for spvtools::opt::SEMultiplyNode
 V vtable for spvtools::opt::SENegative
 V vtable for spvtools::opt::SENode
 V vtable for spvtools::opt::SERecurrentNode
 V vtable for spvtools::opt::SEValueUnknown
 V vtable for spvtools::opt::SSARewritePass
 V vtable for spvtools::opt::ScalarReplacementPass
 V vtable for spvtools::opt::SetSpecConstantDefaultValuePass
 V vtable for spvtools::opt::SimplificationPass
 V vtable for spvtools::opt::StrengthReductionPass
 V vtable for spvtools::opt::StripDebugInfoPass
 V vtable for spvtools::opt::StripReflectInfoPass
 V vtable for spvtools::opt::UnifyConstantPass
 V vtable for spvtools::opt::VectorDCE
 V vtable for spvtools::opt::Workaround1209
 V vtable for spvtools::opt::analysis::Array
 V vtable for spvtools::opt::analysis::ArrayConstant
 V vtable for spvtools::opt::analysis::Bool
 V vtable for spvtools::opt::analysis::BoolConstant
 V vtable for spvtools::opt::analysis::CompositeConstant
 V vtable for spvtools::opt::analysis::Constant
 V vtable for spvtools::opt::analysis::DeviceEvent
 V vtable for spvtools::opt::analysis::Event
 V vtable for spvtools::opt::analysis::Float
 V vtable for spvtools::opt::analysis::FloatConstant
 V vtable for spvtools::opt::analysis::ForwardPointer
 V vtable for spvtools::opt::analysis::Function
 V vtable for spvtools::opt::analysis::Image
 V vtable for spvtools::opt::analysis::IntConstant
 V vtable for spvtools::opt::analysis::Integer
 V vtable for spvtools::opt::analysis::Matrix
 V vtable for spvtools::opt::analysis::MatrixConstant
 V vtable for spvtools::opt::analysis::NamedBarrier
 V vtable for spvtools::opt::analysis::NullConstant
 V vtable for spvtools::opt::analysis::Opaque
 V vtable for spvtools::opt::analysis::Pipe
 V vtable for spvtools::opt::analysis::PipeStorage
 V vtable for spvtools::opt::analysis::Pointer
 V vtable for spvtools::opt::analysis::Queue
 V vtable for spvtools::opt::analysis::ReserveId
 V vtable for spvtools::opt::analysis::RuntimeArray
 V vtable for spvtools::opt::analysis::SampledImage
 V vtable for spvtools::opt::analysis::Sampler
 V vtable for spvtools::opt::analysis::ScalarConstant
 V vtable for spvtools::opt::analysis::Struct
 V vtable for spvtools::opt::analysis::StructConstant
 V vtable for spvtools::opt::analysis::Type
 V vtable for spvtools::opt::analysis::Vector
 V vtable for spvtools::opt::analysis::VectorConstant
 V vtable for spvtools::opt::analysis::Void
 V vtable for spvtools::utils::IntrusiveList<spvtools::ir::Instruction>
 V vtable for spvtools::utils::IntrusiveNodeBase<spvtools::ir::Instruction>
 V vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
 V vtable for std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>
 V vtable for std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>
 V vtable for std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>
 V vtable for std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>
 V vtable for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
 V vtable for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
 V vtable for std::__future_base::_Async_state_common
 V vtable for std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>
 V vtable for std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>
 V vtable for std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>
 V vtable for std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>
 V vtable for std::__future_base::_Result<unsigned int>
 V vtable for std::__future_base::_Result<void>
 V vtable for std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >
 V vtable for std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >
 V vtable for std::thread::_Impl_base
 VTT for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 VTT for std::basic_ofstream<char, std::char_traits<char> >@@GLIBCXX_3.4
 VTT for std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 VTT for std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 V_CopyMemory3D
 V_FixDoubleSlashes
 V_FixSlashes
 V_GetErrno
 V_GetFileExtension
 V_IsAbsolutePath
 V_PathContainsPath
 V_PrettifyNum
 V_RemoveDotSlashes
 V_SetErrno
 V_StrTrim
 V_StripTrailingSlash
 V_UTF16ToUTF8
 V_UTF32ToUTF8
 V_UTF8CharsToUTF16
 V_UTF8ToUTF32
 V_UnicodeCaseConvert(char const*, char*, int, int, EStringConvertErrorPolicy)
 V_UnicodeLength(char const*)
 V_UnqualifiedFileName
 V_acosf
 V_asinf
 V_atan2f
 V_atanf
 V_atof
 V_atofloat32
 V_atofloat64
 V_atoi
 V_atoi64
 V_atoui64
 V_cosf
 V_expf
 V_fmodf
 V_fpclassify
 V_frexpf
 V_isnan
 V_localeconv
 V_logf
 V_pow
 V_powf
 V_qsort
 V_qsort_s
 V_sincosf
 V_sinf
 V_snprintf
 V_snwprintf_cch
 V_sscanf
 V_stricmp_fast
 V_stristr_fast(char const*, char const*)
 V_strlower_fast
 V_strnchr
 V_strnlen
 V_strspn
 V_strtod
 V_strtoi64
 V_strtok
 V_strtoui64
 V_strupper_fast
 V_swscanf
 V_tanf
 V_tier0_strstr
 V_vsnprintf
 V_vsnprintfRet
 V_vsnprintfSize
 V_wcstod
 V_wcstoi64
 W Etc::Block4x4Encoding::~Block4x4Encoding()
 W Etc::Block4x4Encoding_ETC1::GetFlip()
 W Etc::Block4x4Encoding_ETC1::HasSeverelyBentDifferentialColors() const
 W Etc::Block4x4Encoding_ETC1::IsDifferential()
 W Etc::Block4x4Encoding_RGB8A1_Opaque::~Block4x4Encoding_RGB8A1_Opaque()
 W Etc::Block4x4Encoding_RGB8A1_Transparent::~Block4x4Encoding_RGB8A1_Transparent()
 W Etc::Block4x4Encoding_RGBA8_Opaque::~Block4x4Encoding_RGBA8_Opaque()
 W Etc::Block4x4Encoding_RGBA8_Transparent::~Block4x4Encoding_RGBA8_Transparent()
 W TCompiler::getAsCompiler()
 W TCompiler::getInfoSink()
 W TCompiler::linkable()
 W TCompiler::~TCompiler()
 W TGenericCompiler::~TGenericCompiler()
 W TGenericLinker::getAttributeBindings(ShBindingTable const**) const
 W TGenericLinker::link(glslang::TVector<TCompiler*>&, TUniformMap*)
 W TGenericLinker::~TGenericLinker()
 W TInfoSink::~TInfoSink()
 W TIntermNode::getAsAggregate()
 W TIntermNode::getAsAggregate() const
 W TIntermNode::getAsBinaryNode()
 W TIntermNode::getAsBinaryNode() const
 W TIntermNode::getAsBranchNode()
 W TIntermNode::getAsBranchNode() const
 W TIntermNode::getAsConstantUnion()
 W TIntermNode::getAsConstantUnion() const
 W TIntermNode::getAsLoopNode()
 W TIntermNode::getAsLoopNode() const
 W TIntermNode::getAsMethodNode()
 W TIntermNode::getAsMethodNode() const
 W TIntermNode::getAsOperator()
 W TIntermNode::getAsOperator() const
 W TIntermNode::getAsSelectionNode()
 W TIntermNode::getAsSelectionNode() const
 W TIntermNode::getAsSwitchNode()
 W TIntermNode::getAsSwitchNode() const
 W TIntermNode::getAsSymbolNode()
 W TIntermNode::getAsSymbolNode() const
 W TIntermNode::getAsTyped()
 W TIntermNode::getAsTyped() const
 W TIntermNode::getAsUnaryNode()
 W TIntermNode::getAsUnaryNode() const
 W TIntermNode::getLoc() const
 W TIntermNode::setLoc(glslang::TSourceLoc const&)
 W TIntermNode::~TIntermNode()
 W TLinker::getAsLinker()
 W TLinker::getInfoSink()
 W TLinker::getObjectCode() const
 W TLinker::getUniformBindings() const
 W TLinker::link(glslang::TVector<TShHandleBase*>&)
 W TLinker::setAppAttributeBindings(ShBindingTable const*)
 W TLinker::setExcludedAttributes(int const*, int)
 W TLinker::setFixedAttributeBindings(ShBindingTable const*)
 W TLinker::~TLinker()
 W TShHandleBase::getAsCompiler()
 W TShHandleBase::getAsLinker()
 W TShHandleBase::getAsUniformMap()
 W TShHandleBase::getPool() const
 W TShHandleBase::~TShHandleBase()
 W TUniformLinkedMap::getLocation(char const*)
 W TUniformLinkedMap::~TUniformLinkedMap()
 W TUniformMap::getAsUniformMap()
 W TUniformMap::getInfoSink()
 W TUniformMap::~TUniformMap()
 W _ZNSt5dequeIN8libspirv11InstructionESaIS1_EE16_M_push_back_auxIIPK24spv_parsed_instruction_tDnS8_EEEvDpOT_
 W _ZNSt6vectorIN8spvtools3opt15MergeReturnPass22StructuredControlStateESaIS3_EE19_M_emplace_back_auxIIDnS7_EEEvDpOT_
 W _ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP11TIntermNodeSt6vectorIS3_N7glslang14pool_allocatorIS3_EEEEEDnET_SC_SC_RKT0_
 W __gnu_cxx::__normal_iterator<TIntermNode**, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > > std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::emplace<TIntermNode*>(__gnu_cxx::__normal_iterator<TIntermNode**, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > >, TIntermNode*&&)
 W __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::vector<int, std::allocator<int> >::emplace<int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&&)
 W __gnu_cxx::__normal_iterator<libspirv::BasicBlock* const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > > std::__find_if<__gnu_cxx::__normal_iterator<libspirv::BasicBlock* const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock*)#1}>(spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock*)#1}, spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock*)#1}, spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock*)#1}, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<spvtools::ir::BasicBlock* const*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > std::__find_if<__gnu_cxx::__normal_iterator<spvtools::ir::BasicBlock* const*, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > >, spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::{lambda(spvtools::ir::BasicBlock*)#1}>(spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::{lambda(spvtools::ir::BasicBlock*)#1}, spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::{lambda(spvtools::ir::BasicBlock*)#1}, spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::{lambda(spvtools::ir::BasicBlock*)#1}, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > std::__find<__gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >, spvtools::ir::Loop*>(__gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >, spvtools::ir::Loop* const&, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > std::__find_if_not<__gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > >, spvtools::opt::SENode::AddChild(spvtools::opt::SENode*)::{lambda(spvtools::opt::SENode const*)#1}>(spvtools::opt::SENode::AddChild(spvtools::opt::SENode*)::{lambda(spvtools::opt::SENode const*)#1}, spvtools::opt::SENode::AddChild(spvtools::opt::SENode*)::{lambda(spvtools::opt::SENode const*)#1}, spvtools::opt::SENode::AddChild(spvtools::opt::SENode*)::{lambda(spvtools::opt::SENode const*)#1}, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long>*, std::vector<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long>, std::allocator<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long>*, std::vector<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long>, std::allocator<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> > > >, spvtools::opt::RegisterLiveness::RegionRegisterLiveness::AddRegisterClass(spvtools::opt::RegisterLiveness::RegisterClass const&)::{lambda(std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> const&)#1}>(spvtools::opt::RegisterLiveness::RegionRegisterLiveness::AddRegisterClass(spvtools::opt::RegisterLiveness::RegisterClass const&)::{lambda(std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> const&)#1}, spvtools::opt::RegisterLiveness::RegionRegisterLiveness::AddRegisterClass(spvtools::opt::RegisterLiveness::RegisterClass const&)::{lambda(std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> const&)#1}, spvtools::opt::RegisterLiveness::RegionRegisterLiveness::AddRegisterClass(spvtools::opt::RegisterLiveness::RegisterClass const&)::{lambda(std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> const&)#1}, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > std::__find<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > >, spvtools::ir::Function::RemoveEmptyBlocks()::{lambda(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > const&)#1}>(spvtools::ir::Function::RemoveEmptyBlocks()::{lambda(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > const&)#1}, spvtools::ir::Function::RemoveEmptyBlocks()::{lambda(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > const&)#1}, spvtools::ir::Function::RemoveEmptyBlocks()::{lambda(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > const&)#1}, std::random_access_iterator_tag)
 W __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > std::vector<unsigned char, std::allocator<unsigned char> >::insert<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, void>(__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)
 W __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__find<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&, std::random_access_iterator_tag)
 W bool glslang::TType::contains<glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}) const
 W bool glslang::TType::contains<glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}) const
 W bool spvutils::ParseNumber<long>(char const*, long*)
 W bool spvutils::ParseNumber<spvutils::HexFloat<spvutils::FloatProxy<double>, spvutils::HexFloatTraits<spvutils::FloatProxy<double> > > >(char const*, spvutils::HexFloat<spvutils::FloatProxy<double>, spvutils::HexFloatTraits<spvutils::FloatProxy<double> > >*)
 W bool spvutils::ParseNumber<spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > > >(char const*, spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >*)
 W bool spvutils::ParseNumber<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(char const*, spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > >*)
 W bool spvutils::ParseNumber<unsigned int>(char const*, unsigned int*)
 W bool spvutils::ParseNumber<unsigned long>(char const*, unsigned long*)
 W bool std::__equal<false>::equal<glslang::TArraySize const*, glslang::TArraySize const*>(glslang::TArraySize const*, glslang::TArraySize const*, glslang::TArraySize const*)
 W char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)
 W glslang::GetBuiltInVariableString(glslang::TBuiltInVariable)
 W glslang::GetStorageQualifierString(glslang::TStorageQualifier)
 W glslang::HlslGrammar::~HlslGrammar()
 W glslang::HlslParseContext::getGlobalUniformBlockName() const
 W glslang::HlslParseContext::lineContinuationCheck(glslang::TSourceLoc const&, bool)
 W glslang::HlslParseContext::lineDirectiveShouldSetNextLine() const
 W glslang::HlslParseContext::reservedPpErrorCheck(glslang::TSourceLoc const&, char const*, char const*)
 W glslang::HlslParseContext::setUniformBlockDefaults(glslang::TType&) const
 W glslang::HlslScanContext::~HlslScanContext()
 W glslang::HlslTokenStream::~HlslTokenStream()
 W glslang::NewPoolTString(char const*)
 W glslang::SameSpecializationConstants(glslang::TIntermTyped*, glslang::TIntermTyped*)
 W glslang::TAnonMember::getAnonContainer() const
 W glslang::TAnonMember::getAnonId() const
 W glslang::TAnonMember::getAsAnonMember() const
 W glslang::TAnonMember::getMemberNumber() const
 W glslang::TAnonMember::getType() const
 W glslang::TAnonMember::getWritableType()
 W glslang::TAnonMember::~TAnonMember()
 W glslang::TArraySizes::isInnerUnsized() const
 W glslang::TBuiltInParseables::getCommonString() const
 W glslang::TBuiltInParseables::getStageString(EShLanguage) const
 W glslang::TBuiltInParseablesHlsl::~TBuiltInParseablesHlsl()
 W glslang::TConstTraverser::~TConstTraverser()
 W glslang::TConstUnion::operator<(glslang::TConstUnion const&) const
 W glslang::TConstUnion::operator==(glslang::TConstUnion const&) const
 W glslang::TConstUnion::operator>(glslang::TConstUnion const&) const
 W glslang::TConstUnionArray::~TConstUnionArray()
 W glslang::TDefaultHlslIoResolver::resolveBinding(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultHlslIoResolver::validateBinding(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultHlslIoResolver::~TDefaultHlslIoResolver()
 W glslang::TDefaultIoResolver::resolveBinding(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolver::validateBinding(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolver::~TDefaultIoResolver()
 W glslang::TDefaultIoResolverBase::beginNotifications(EShLanguage)
 W glslang::TDefaultIoResolverBase::beginResolve(EShLanguage)
 W glslang::TDefaultIoResolverBase::endNotifications(EShLanguage)
 W glslang::TDefaultIoResolverBase::endResolve(EShLanguage)
 W glslang::TDefaultIoResolverBase::notifyBinding(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::notifyInOut(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::resolveInOutComponent(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::resolveInOutIndex(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::resolveInOutLocation(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::resolveSet(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::resolveUniformLocation(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::validateInOut(EShLanguage, char const*, glslang::TType const&, bool)
 W glslang::TDefaultIoResolverBase::~TDefaultIoResolverBase()
 W glslang::TDeferredCompiler::compile(TIntermNode*, int, EProfile)
 W glslang::TDeferredCompiler::~TDeferredCompiler()
 W glslang::TFunction::TFunction(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TType const&, glslang::TOperator)
 W glslang::TFunction::addParameter(glslang::TParameter&)
 W glslang::TFunction::addPrefix(char const*)
 W glslang::TFunction::addThisParameter(glslang::TType&, char const*)
 W glslang::TFunction::getAsFunction()
 W glslang::TFunction::getAsFunction() const
 W glslang::TFunction::getBuiltInOp() const
 W glslang::TFunction::getDeclaredBuiltInType() const
 W glslang::TFunction::getDefaultParamCount() const
 W glslang::TFunction::getFixedParamCount() const
 W glslang::TFunction::getMangledName() const
 W glslang::TFunction::getParamCount() const
 W glslang::TFunction::getType() const
 W glslang::TFunction::getWritableType()
 W glslang::TFunction::hasIllegalImplicitThis() const
 W glslang::TFunction::hasImplicitThis() const
 W glslang::TFunction::isDefined() const
 W glslang::TFunction::isPrototyped() const
 W glslang::TFunction::operator[](int)
 W glslang::TFunction::operator[](int) const
 W glslang::TFunction::relateToOperator(glslang::TOperator)
 W glslang::TFunction::removePrefix(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W glslang::TFunction::setDefined()
 W glslang::TFunction::setIllegalImplicitThis()
 W glslang::TFunction::setImplicitThis()
 W glslang::TFunction::setPrototyped()
 W glslang::TIndexTraverser::~TIndexTraverser()
 W glslang::TInductiveTraverser::~TInductiveTraverser()
 W glslang::TInfoSinkBase::message(glslang::TPrefixType, char const*)
 W glslang::TInfoSinkBase::message(glslang::TPrefixType, char const*, glslang::TSourceLoc const&)
 W glslang::TInfoSinkBase::operator<<(int)
 W glslang::TInfoSinkBase::prefix(glslang::TPrefixType)
 W glslang::TInputScanner::TInputScanner(int, char const* const*, unsigned long*, char const* const*, int, int, bool)
 W glslang::TInputScanner::get()
 W glslang::TInputScanner::getLastValidSourceIndex() const
 W glslang::TInputScanner::unget()
 W glslang::TInputScanner::~TInputScanner()
 W glslang::TIntermAggregate::TIntermAggregate()
 W glslang::TIntermAggregate::TIntermAggregate(glslang::TOperator)
 W glslang::TIntermAggregate::getAsAggregate()
 W glslang::TIntermAggregate::getAsAggregate() const
 W glslang::TIntermAggregate::getName() const
 W glslang::TIntermAggregate::getQualifierList()
 W glslang::TIntermAggregate::getQualifierList() const
 W glslang::TIntermAggregate::getSequence()
 W glslang::TIntermAggregate::getSequence() const
 W glslang::TIntermAggregate::isUserDefined()
 W glslang::TIntermAggregate::setName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W glslang::TIntermAggregate::setOperator(glslang::TOperator)
 W glslang::TIntermAggregate::setUserDefined()
 W glslang::TIntermAggregate::~TIntermAggregate()
 W glslang::TIntermBinary::getAsBinaryNode()
 W glslang::TIntermBinary::getAsBinaryNode() const
 W glslang::TIntermBinary::getLeft() const
 W glslang::TIntermBinary::getRight() const
 W glslang::TIntermBinary::setLeft(glslang::TIntermTyped*)
 W glslang::TIntermBinary::setRight(glslang::TIntermTyped*)
 W glslang::TIntermBinary::~TIntermBinary()
 W glslang::TIntermBranch::getAsBranchNode()
 W glslang::TIntermBranch::getAsBranchNode() const
 W glslang::TIntermBranch::~TIntermBranch()
 W glslang::TIntermConstantUnion::getAsConstantUnion()
 W glslang::TIntermConstantUnion::getAsConstantUnion() const
 W glslang::TIntermConstantUnion::~TIntermConstantUnion()
 W glslang::TIntermLoop::getAsLoopNode()
 W glslang::TIntermLoop::getAsLoopNode() const
 W glslang::TIntermLoop::~TIntermLoop()
 W glslang::TIntermMethod::getAsMethodNode()
 W glslang::TIntermMethod::getAsMethodNode() const
 W glslang::TIntermMethod::getMethodName() const
 W glslang::TIntermMethod::getObject() const
 W glslang::TIntermMethod::~TIntermMethod()
 W glslang::TIntermOperator::getAsOperator()
 W glslang::TIntermOperator::getAsOperator() const
 W glslang::TIntermOperator::~TIntermOperator()
 W glslang::TIntermSelection::getAsSelectionNode()
 W glslang::TIntermSelection::getAsSelectionNode() const
 W glslang::TIntermSelection::getCondition() const
 W glslang::TIntermSelection::getFalseBlock() const
 W glslang::TIntermSelection::getTrueBlock() const
 W glslang::TIntermSelection::~TIntermSelection()
 W glslang::TIntermSwitch::getAsSwitchNode()
 W glslang::TIntermSwitch::getAsSwitchNode() const
 W glslang::TIntermSwitch::getBody() const
 W glslang::TIntermSwitch::getCondition() const
 W glslang::TIntermSwitch::~TIntermSwitch()
 W glslang::TIntermSymbol::getAsSymbolNode()
 W glslang::TIntermSymbol::getAsSymbolNode() const
 W glslang::TIntermSymbol::getId() const
 W glslang::TIntermSymbol::getName() const
 W glslang::TIntermSymbol::switchId(int)
 W glslang::TIntermSymbol::~TIntermSymbol()
 W glslang::TIntermTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 W glslang::TIntermTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
 W glslang::TIntermTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
 W glslang::TIntermTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
 W glslang::TIntermTraverser::visitLoop(glslang::TVisit, glslang::TIntermLoop*)
 W glslang::TIntermTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
 W glslang::TIntermTraverser::visitSwitch(glslang::TVisit, glslang::TIntermSwitch*)
 W glslang::TIntermTraverser::visitSymbol(glslang::TIntermSymbol*)
 W glslang::TIntermTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
 W glslang::TIntermTraverser::~TIntermTraverser()
 W glslang::TIntermTyped* glslang::TIntermediate::addSwizzle<glslang::TMatrixSelector>(glslang::TSwizzleSelectors<glslang::TMatrixSelector>&, glslang::TSourceLoc const&)
 W glslang::TIntermTyped* glslang::TIntermediate::addSwizzle<int>(glslang::TSwizzleSelectors<int>&, glslang::TSourceLoc const&)
 W glslang::TIntermTyped::TIntermTyped(glslang::TBasicType)
 W glslang::TIntermTyped::TIntermTyped(glslang::TType const&)
 W glslang::TIntermTyped::getAsTyped()
 W glslang::TIntermTyped::getAsTyped() const
 W glslang::TIntermTyped::getBasicType() const
 W glslang::TIntermTyped::getMatrixCols() const
 W glslang::TIntermTyped::getMatrixRows() const
 W glslang::TIntermTyped::getQualifier()
 W glslang::TIntermTyped::getQualifier() const
 W glslang::TIntermTyped::getType() const
 W glslang::TIntermTyped::getVectorSize() const
 W glslang::TIntermTyped::getWritableType()
 W glslang::TIntermTyped::isArray() const
 W glslang::TIntermTyped::isFloatingDomain() const
 W glslang::TIntermTyped::isIntegerDomain() const
 W glslang::TIntermTyped::isMatrix() const
 W glslang::TIntermTyped::isScalar() const
 W glslang::TIntermTyped::isStruct() const
 W glslang::TIntermTyped::isVector() const
 W glslang::TIntermTyped::setType(glslang::TType const&)
 W glslang::TIntermTyped::~TIntermTyped()
 W glslang::TIntermUnary::getAsUnaryNode()
 W glslang::TIntermUnary::getAsUnaryNode() const
 W glslang::TIntermUnary::getOperand()
 W glslang::TIntermUnary::getOperand() const
 W glslang::TIntermUnary::setOperand(glslang::TIntermTyped*)
 W glslang::TIntermUnary::~TIntermUnary()
 W glslang::TIntermediate::TIntermediate(EShLanguage, int, EProfile)
 W glslang::TIntermediate::extensionRequested(char const*) const
 W glslang::TIntermediate::setSpv(glslang::SpvVersion const&)
 W glslang::TIntermediate::~TIntermediate()
 W glslang::TIoMapResolver::~TIoMapResolver()
 W glslang::TIoMapper::~TIoMapper()
 W glslang::TLiveTraverser::pushFunction(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W glslang::TLiveTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 W glslang::TLiveTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
 W glslang::TLiveTraverser::~TLiveTraverser()
 W glslang::TOutputTraverser::~TOutputTraverser()
 W glslang::TParseContextBase::finalizeGlobalUniformBlockLayout(glslang::TVariable&)
 W glslang::TParseContextBase::getGlobalUniformBlockName() const
 W glslang::TParseContextBase::notifyErrorDirective(int, char const*)
 W glslang::TParseContextBase::notifyExtensionDirective(int, char const*, char const*)
 W glslang::TParseContextBase::notifyLineDirective(int, int, bool, int, char const*)
 W glslang::TParseContextBase::notifyVersion(int, int, char const*)
 W glslang::TParseContextBase::renameShaderFunction(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*&) const
 W glslang::TParseContextBase::setErrorCallback(std::function<void (int, char const*)> const&)
 W glslang::TParseContextBase::setExtensionCallback(std::function<void (int, char const*, char const*)> const&)
 W glslang::TParseContextBase::setLineCallback(std::function<void (int, int, bool, int, char const*)> const&)
 W glslang::TParseContextBase::setPragmaCallback(std::function<void (int, glslang::TVector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > const&)> const&)
 W glslang::TParseContextBase::setUniformBlockDefaults(glslang::TType&) const
 W glslang::TParseContextBase::setVersionCallback(std::function<void (int, int, char const*)> const&)
 W glslang::TParseContextBase::~TParseContextBase()
 W glslang::TParseVersions::~TParseVersions()
 W glslang::TPpContext::TokenizableIncludeFile::getch()
 W glslang::TPpContext::TokenizableIncludeFile::notifyActivated()
 W glslang::TPpContext::TokenizableIncludeFile::notifyDeleted()
 W glslang::TPpContext::TokenizableIncludeFile::scan(glslang::TPpToken*)
 W glslang::TPpContext::TokenizableIncludeFile::ungetch()
 W glslang::TPpContext::TokenizableIncludeFile::~TokenizableIncludeFile()
 W glslang::TPpContext::pushInput(glslang::TPpContext::tInput*)
 W glslang::TPpContext::scanToken(glslang::TPpToken*)
 W glslang::TPpContext::tInput::endOfReplacementList()
 W glslang::TPpContext::tInput::isMacroInput()
 W glslang::TPpContext::tInput::notifyActivated()
 W glslang::TPpContext::tInput::notifyDeleted()
 W glslang::TPpContext::tInput::peekPasting()
 W glslang::TPpContext::tInput::~tInput()
 W glslang::TPpContext::tMacroInput::endOfReplacementList()
 W glslang::TPpContext::tMacroInput::getch()
 W glslang::TPpContext::tMacroInput::isMacroInput()
 W glslang::TPpContext::tMacroInput::peekPasting()
 W glslang::TPpContext::tMacroInput::ungetch()
 W glslang::TPpContext::tMacroInput::~tMacroInput()
 W glslang::TPpContext::tMarkerInput::getch()
 W glslang::TPpContext::tMarkerInput::scan(glslang::TPpToken*)
 W glslang::TPpContext::tMarkerInput::ungetch()
 W glslang::TPpContext::tMarkerInput::~tMarkerInput()
 W glslang::TPpContext::tStringInput::getch()
 W glslang::TPpContext::tStringInput::ungetch()
 W glslang::TPpContext::tStringInput::~tStringInput()
 W glslang::TPpContext::tTokenInput::getch()
 W glslang::TPpContext::tTokenInput::peekPasting()
 W glslang::TPpContext::tTokenInput::scan(glslang::TPpToken*)
 W glslang::TPpContext::tTokenInput::ungetch()
 W glslang::TPpContext::tTokenInput::~tTokenInput()
 W glslang::TPpContext::tUngotTokenInput::getch()
 W glslang::TPpContext::tUngotTokenInput::ungetch()
 W glslang::TPpContext::tUngotTokenInput::~tUngotTokenInput()
 W glslang::TPpContext::tZeroInput::getch()
 W glslang::TPpContext::tZeroInput::ungetch()
 W glslang::TPpContext::tZeroInput::~tZeroInput()
 W glslang::TPrecisionManager::~TPrecisionManager()
 W glslang::TProcesses::addProcess(char const*)
 W glslang::TPublicType::init(glslang::TSourceLoc const&, bool)
 W glslang::TQualifier::getBlendEquationString(glslang::TBlendEquationShift)
 W glslang::TQualifier::getGeometryString(glslang::TLayoutGeometry)
 W glslang::TQualifier::getLayoutFormatString(glslang::TLayoutFormat)
 W glslang::TQualifier::isArrayedIo(EShLanguage) const
 W glslang::TQualifier::isMemory() const
 W glslang::TQualifier::makeTemporary()
 W glslang::TReflection::~TReflection()
 W glslang::TReflectionTraverser::addBlockName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, int)
 W glslang::TReflectionTraverser::addDereferencedUniform(glslang::TIntermBinary*)
 W glslang::TReflectionTraverser::blowUpActiveAggregate(glslang::TType const&, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TList<glslang::TIntermBinary*> const&, std::_List_const_iterator<glslang::TIntermBinary*>, int, int, int)
 W glslang::TReflectionTraverser::getBlockSize(glslang::TType const&)
 W glslang::TReflectionTraverser::mapToGlType(glslang::TType const&)
 W glslang::TReflectionTraverser::~TReflectionTraverser()
 W glslang::TRemoveTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 W glslang::TRemoveTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
 W glslang::TRemoveTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
 W glslang::TRemoveTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
 W glslang::TRemoveTraverser::visitLoop(glslang::TVisit, glslang::TIntermLoop*)
 W glslang::TRemoveTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
 W glslang::TRemoveTraverser::visitSwitch(glslang::TVisit, glslang::TIntermSwitch*)
 W glslang::TRemoveTraverser::visitSymbol(glslang::TIntermSymbol*)
 W glslang::TRemoveTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
 W glslang::TRemoveTraverser::~TRemoveTraverser()
 W glslang::TSampler::getString() const
 W glslang::TSampler::operator==(glslang::TSampler const&) const
 W glslang::TScanContext::~TScanContext()
 W glslang::TShader::ForbidIncluder::releaseInclude(glslang::TShader::Includer::IncludeResult*)
 W glslang::TShader::ForbidIncluder::~ForbidIncluder()
 W glslang::TShader::Includer::~Includer()
 W glslang::TShaderQualifiers::merge(glslang::TShaderQualifiers const&)
 W glslang::TSmallArrayVector::push_back(unsigned int, glslang::TIntermTyped*)
 W glslang::TSmallArrayVector::~TSmallArrayVector()
 W glslang::TStringAtomMap::getAtom(char const*) const
 W glslang::TSymbol::addPrefix(char const*)
 W glslang::TSymbol::changeName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*)
 W glslang::TSymbol::getAsAnonMember() const
 W glslang::TSymbol::getAsFunction()
 W glslang::TSymbol::getAsFunction() const
 W glslang::TSymbol::getAsVariable()
 W glslang::TSymbol::getAsVariable() const
 W glslang::TSymbol::getExtensions() const
 W glslang::TSymbol::getMangledName() const
 W glslang::TSymbol::getName() const
 W glslang::TSymbol::getNumExtensions() const
 W glslang::TSymbol::getUniqueId() const
 W glslang::TSymbol::isReadOnly() const
 W glslang::TSymbol::makeReadOnly()
 W glslang::TSymbol::setExtensions(int, char const* const*)
 W glslang::TSymbol::setUniqueId(int)
 W glslang::TSymbol::~TSymbol()
 W glslang::TSymbolTable::insert(glslang::TSymbol&)
 W glslang::TSymbolTable::pop(glslang::TPrecisionQualifier*)
 W glslang::TSymbolTable::push()
 W glslang::TSymbolTable::relateToOperator(char const*, glslang::TOperator)
 W glslang::TSymbolTable::setFunctionExtensions(char const*, int, char const* const*)
 W glslang::TSymbolTable::setVariableExtensions(char const*, int, char const* const*)
 W glslang::TSymbolTable::~TSymbolTable()
 W glslang::TSymbolTableLevel::findFunctionNameList(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TVector<glslang::TFunction const*>&)
 W glslang::TSymbolTableLevel::hasFunctionName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 W glslang::TSymbolTableLevel::insert(glslang::TSymbol&, bool)
 W glslang::TType::TType(glslang::TBasicType, glslang::TStorageQualifier, glslang::TPrecisionQualifier, int, int, int, bool)
 W glslang::TType::TType(glslang::TBasicType, glslang::TStorageQualifier, int, int, int, bool)
 W glslang::TType::TType(glslang::TPublicType const&)
 W glslang::TType::TType(glslang::TType const&, int, bool)
 W glslang::TType::TType(glslang::TVector<glslang::TTypeLoc>*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W glslang::TType::adoptImplicitArraySizes(bool)
 W glslang::TType::clone() const
 W glslang::TType::computeNumComponents() const
 W glslang::TType::containsArray() const
 W glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsBasicType(glslang::TBasicType) const
 W glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}, glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsBuiltIn() const
 W glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsNonOpaque() const
 W glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsOpaque() const
 W glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsSpecializationSize() const
 W glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsStructure() const
 W glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::containsUnsizedArray() const
 W glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1} std::__find_if<__gnu_cxx::__normal_iterator<glslang::TTypeLoc*, std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> > >, bool glslang::TType::contains<glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}>(glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}, glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}, bool glslang::TType::contains<glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}) const::{lambda(glslang::TTypeLoc const&)#1}, std::random_access_iterator_tag)
 W glslang::TType::copyArrayInnerSizes(glslang::TArraySizes const*)
 W glslang::TType::deepCopy(glslang::TType const&, glslang::TMap<glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*, std::less<glslang::TVector<glslang::TTypeLoc>*> >&)
 W glslang::TType::getArraySizes()
 W glslang::TType::getArraySizes() const
 W glslang::TType::getBasicString(glslang::TBasicType)
 W glslang::TType::getBasicTypeString() const
 W glslang::TType::getCompleteString() const
 W glslang::TType::getCompleteString() const::{lambda(int)#3}::operator()(int) const
 W glslang::TType::getCompleteString() const::{lambda(unsigned int)#2}::operator()(unsigned int) const
 W glslang::TType::getCumulativeArraySize() const
 W glslang::TType::getFieldName() const
 W glslang::TType::getImplicitArraySize() const
 W glslang::TType::getMatrixCols() const
 W glslang::TType::getMatrixRows() const
 W glslang::TType::getOuterArrayNode() const
 W glslang::TType::getOuterArraySize() const
 W glslang::TType::getQualifier()
 W glslang::TType::getSampler()
 W glslang::TType::getTypeName() const
 W glslang::TType::getVectorSize() const
 W glslang::TType::hiddenMember() const
 W glslang::TType::hideMember()
 W glslang::TType::isArray() const
 W glslang::TType::isArrayOfArrays() const
 W glslang::TType::isArrayVariablyIndexed() const
 W glslang::TType::isBuiltIn() const
 W glslang::TType::isFloatingDomain() const
 W glslang::TType::isImage() const
 W glslang::TType::isIntegerDomain() const
 W glslang::TType::isMatrix() const
 W glslang::TType::isOpaque() const
 W glslang::TType::isScalar() const
 W glslang::TType::isScalarOrVec1() const
 W glslang::TType::isSizedArray() const
 W glslang::TType::isStruct() const
 W glslang::TType::isSubpass() const
 W glslang::TType::isTexture() const
 W glslang::TType::isUnsizedArray() const
 W glslang::TType::isVector() const
 W glslang::TType::operator==(glslang::TType const&) const
 W glslang::TType::sameElementShape(glslang::TType const&) const
 W glslang::TType::sameStructType(glslang::TType const&) const
 W glslang::TType::setArrayVariablyIndexed()
 W glslang::TType::setFieldName(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W glslang::TType::shallowCopy(glslang::TType const&)
 W glslang::TType::updateImplicitArraySize(int)
 W glslang::TType::~TType()
 W glslang::TVarGatherTraverser::visitSymbol(glslang::TIntermSymbol*)
 W glslang::TVarGatherTraverser::~TVarGatherTraverser()
 W glslang::TVarSetTraverser::visitSymbol(glslang::TIntermSymbol*)
 W glslang::TVarSetTraverser::~TVarSetTraverser()
 W glslang::TVariable::TVariable(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TType const&, bool)
 W glslang::TVariable::getAnonId() const
 W glslang::TVariable::getAsVariable()
 W glslang::TVariable::getAsVariable() const
 W glslang::TVariable::getConstArray() const
 W glslang::TVariable::getConstSubtree() const
 W glslang::TVariable::getType() const
 W glslang::TVariable::getWritableConstArray()
 W glslang::TVariable::getWritableType()
 W glslang::TVariable::isUserType() const
 W glslang::TVariable::setAnonId(int)
 W glslang::TVariable::setConstArray(glslang::TConstUnionArray const&)
 W glslang::TVariable::setConstSubtree(glslang::TIntermTyped*)
 W glslang::TVariable::~TVariable()
 W glslang::TextureUpgradeAndSamplerRemovalTransform::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
 W glslang::TextureUpgradeAndSamplerRemovalTransform::visitSymbol(glslang::TIntermSymbol*)
 W glslang::TextureUpgradeAndSamplerRemovalTransform::~TextureUpgradeAndSamplerRemovalTransform()
 W glslang::isTypeInt(glslang::TBasicType)
 W int Etc::FilterTwoPass<float>(float*, int, int, float*, int, int, unsigned int, double (*)(double))
 W libspirv::AssemblyGrammar::lookupOperandName(spv_operand_type_t, unsigned int) const
 W libspirv::DiagnosticStream::DiagnosticStream(spv_position_t, std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spv_result_t)
 W libspirv::EnumSet<SpvCapability_>::AddWord(unsigned int)
 W libspirv::EnumSet<SpvCapability_>::ContainsWord(unsigned int) const
 W libspirv::EnumSet<libspirv::Extension>::ContainsWord(unsigned int) const
 W libspirv::FriendlyNameMapper::ParseInstructionForwarder(void*, spv_parsed_instruction_t const*)
 W libspirv::Instruction::Instruction(libspirv::Instruction const&)
 W libspirv::ValidationState_t::~ValidationState_t()
 W spv::Block::Block(unsigned int, spv::Function&)
 W spv::Block::addInstruction(std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >)
 W spv::Block::~Block()
 W spv::Builder::addExtension(char const*)
 W spv::Builder::makeInt16Constant(int, bool)
 W spv::Builder::makeInt64Constant(long long, bool)
 W spv::Builder::makeInt8Constant(int, bool)
 W spv::Builder::makeIntConstant(int, bool)
 W spv::Builder::makeUint16Constant(unsigned int, bool)
 W spv::Builder::makeUint64Constant(unsigned long long, bool)
 W spv::Builder::makeUint8Constant(unsigned int, bool)
 W spv::Builder::makeUintConstant(unsigned int, bool)
 W spv::Function::~Function()
 W spv::Instruction::addStringOperand(char const*)
 W spv::Instruction::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const
 W spv::Instruction::~Instruction()
 W spv::Module::mapInstruction(spv::Instruction*)
 W spv::Module::~Module()
 W spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)
 W spvtools::CFA<libspirv::BasicBlock>::ComputeAugmentedCFG(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >&, libspirv::BasicBlock*, libspirv::BasicBlock*, std::unordered_map<libspirv::BasicBlock const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >, std::hash<libspirv::BasicBlock const*>, std::equal_to<libspirv::BasicBlock const*>, std::allocator<std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > > > >*, std::unordered_map<libspirv::BasicBlock const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >, std::hash<libspirv::BasicBlock const*>, std::equal_to<libspirv::BasicBlock const*>, std::allocator<std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > > > >*, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)
 W spvtools::CFA<libspirv::BasicBlock>::DepthFirstTraversal(libspirv::BasicBlock const*, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<void (libspirv::BasicBlock const*)>, std::function<void (libspirv::BasicBlock const*)>, std::function<void (libspirv::BasicBlock const*, libspirv::BasicBlock const*)>)
 W spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)
 W spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)
 W spvtools::CFA<spvtools::ir::BasicBlock>::DepthFirstTraversal(spvtools::ir::BasicBlock const*, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>, std::function<void (spvtools::ir::BasicBlock const*)>, std::function<void (spvtools::ir::BasicBlock const*)>, std::function<void (spvtools::ir::BasicBlock const*, spvtools::ir::BasicBlock const*)>)
 W spvtools::CFA<spvtools::opt::DominatorTreeNode>::DepthFirstTraversal(spvtools::opt::DominatorTreeNode const*, std::function<std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > const* (spvtools::opt::DominatorTreeNode const*)>, std::function<void (spvtools::opt::DominatorTreeNode const*)>, std::function<void (spvtools::opt::DominatorTreeNode const*)>, std::function<void (spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)>)
 W spvtools::ir::BasicBlock::ForEachPhiInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)
 W spvtools::ir::BasicBlock::WhileEachInst(std::function<bool (spvtools::ir::Instruction*)> const&, bool)
 W spvtools::ir::BasicBlock::WhileEachPhiInst(std::function<bool (spvtools::ir::Instruction*)> const&, bool)
 W spvtools::ir::BasicBlock::~BasicBlock()
 W spvtools::ir::CFG::ForgetBlock(spvtools::ir::BasicBlock const*)
 W spvtools::ir::CFG::RegisterBlock(spvtools::ir::BasicBlock*)
 W spvtools::ir::CFG::RemoveEdge(unsigned int, unsigned int)
 W spvtools::ir::IRContext::AnalyzeFeatures()
 W spvtools::ir::IRContext::BuildCFG()
 W spvtools::ir::IRContext::BuildDecorationManager()
 W spvtools::ir::IRContext::BuildDefUseManager()
 W spvtools::ir::IRContext::BuildInstrToBlockMapping()
 W spvtools::ir::IRContext::get_constant_mgr()
 W spvtools::ir::IRContext::get_instr_block(spvtools::ir::Instruction*)
 W spvtools::ir::IRContext::get_instr_block(unsigned int)
 W spvtools::ir::IRContext::get_type_mgr()
 W spvtools::ir::IRContext::~IRContext()
 W spvtools::ir::Instruction* spvtools::opt::InstructionBuilder::Add32BitConstantInteger<unsigned int>(unsigned int, bool)
 W spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int*)> const&)
 W spvtools::ir::Instruction::Instruction(spvtools::ir::Instruction const&)
 W spvtools::ir::Instruction::SetInOperands(std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >&&)
 W spvtools::ir::Instruction::~Instruction()
 W spvtools::ir::InstructionList::clear()
 W spvtools::ir::InstructionList::push_back(std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >&&)
 W spvtools::ir::InstructionList::~InstructionList()
 W spvtools::ir::Loop::AddBasicBlock(spvtools::ir::BasicBlock const*)
 W spvtools::ir::Module::~Module()
 W spvtools::ir::Operand* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<spvtools::ir::Operand*>, spvtools::ir::Operand*>(std::move_iterator<spvtools::ir::Operand*>, std::move_iterator<spvtools::ir::Operand*>, spvtools::ir::Operand*)
 W spvtools::ir::UptrVectorIterator<spvtools::ir::BasicBlock, false> std::__find_if<spvtools::ir::UptrVectorIterator<spvtools::ir::BasicBlock, false>, spvtools::ir::Function::FindBlock(unsigned int)::{lambda(spvtools::ir::BasicBlock const&)#1}>(spvtools::ir::Function::FindBlock(unsigned int)::{lambda(spvtools::ir::BasicBlock const&)#1}, spvtools::ir::Function::FindBlock(unsigned int)::{lambda(spvtools::ir::BasicBlock const&)#1}, spvtools::ir::Function::FindBlock(unsigned int)::{lambda(spvtools::ir::BasicBlock const&)#1}, std::random_access_iterator_tag)
 W spvtools::opt::AggressiveDCEPass::AddToWorklist(spvtools::ir::Instruction*)
 W spvtools::opt::AggressiveDCEPass::GetPreservedAnalyses()
 W spvtools::opt::AggressiveDCEPass::name() const
 W spvtools::opt::AggressiveDCEPass::~AggressiveDCEPass()
 W spvtools::opt::BlockMergePass::GetPreservedAnalyses()
 W spvtools::opt::BlockMergePass::name() const
 W spvtools::opt::BlockMergePass::~BlockMergePass()
 W spvtools::opt::CCPPass::GetPreservedAnalyses()
 W spvtools::opt::CCPPass::name() const
 W spvtools::opt::CCPPass::~CCPPass()
 W spvtools::opt::CFGCleanupPass::GetPreservedAnalyses()
 W spvtools::opt::CFGCleanupPass::name() const
 W spvtools::opt::CFGCleanupPass::~CFGCleanupPass()
 W spvtools::opt::CommonUniformElimPass::name() const
 W spvtools::opt::CommonUniformElimPass::~CommonUniformElimPass()
 W spvtools::opt::CompactIdsPass::GetPreservedAnalyses()
 W spvtools::opt::CompactIdsPass::name() const
 W spvtools::opt::CompactIdsPass::~CompactIdsPass()
 W spvtools::opt::Constraint* spvtools::opt::LoopDependenceAnalysis::make_constraint<spvtools::opt::DependenceEmpty>()
 W spvtools::opt::Constraint* spvtools::opt::LoopDependenceAnalysis::make_constraint<spvtools::opt::DependenceNone>()
 W spvtools::opt::Constraint::AsDependenceDistance()
 W spvtools::opt::Constraint::AsDependenceDistance() const
 W spvtools::opt::Constraint::AsDependenceEmpty()
 W spvtools::opt::Constraint::AsDependenceEmpty() const
 W spvtools::opt::Constraint::AsDependenceLine()
 W spvtools::opt::Constraint::AsDependenceLine() const
 W spvtools::opt::Constraint::AsDependenceNone()
 W spvtools::opt::Constraint::AsDependenceNone() const
 W spvtools::opt::Constraint::AsDependencePoint()
 W spvtools::opt::Constraint::AsDependencePoint() const
 W spvtools::opt::Constraint::~Constraint()
 W spvtools::opt::CopyPropagateArrays::GetPreservedAnalyses()
 W spvtools::opt::CopyPropagateArrays::name() const
 W spvtools::opt::CopyPropagateArrays::~CopyPropagateArrays()
 W spvtools::opt::DeadBranchElimPass::GetPreservedAnalyses()
 W spvtools::opt::DeadBranchElimPass::name() const
 W spvtools::opt::DeadBranchElimPass::~DeadBranchElimPass()
 W spvtools::opt::DeadInsertElimPass::GetPreservedAnalyses()
 W spvtools::opt::DeadInsertElimPass::name() const
 W spvtools::opt::DeadInsertElimPass::~DeadInsertElimPass()
 W spvtools::opt::DeadVariableElimination::GetPreservedAnalyses()
 W spvtools::opt::DeadVariableElimination::name() const
 W spvtools::opt::DeadVariableElimination::~DeadVariableElimination()
 W spvtools::opt::DependenceDistance::AsDependenceDistance()
 W spvtools::opt::DependenceDistance::AsDependenceDistance() const
 W spvtools::opt::DependenceDistance::GetType() const
 W spvtools::opt::DependenceDistance::~DependenceDistance()
 W spvtools::opt::DependenceEmpty::AsDependenceEmpty()
 W spvtools::opt::DependenceEmpty::AsDependenceEmpty() const
 W spvtools::opt::DependenceEmpty::GetType() const
 W spvtools::opt::DependenceEmpty::~DependenceEmpty()
 W spvtools::opt::DependenceLine::AsDependenceLine()
 W spvtools::opt::DependenceLine::AsDependenceLine() const
 W spvtools::opt::DependenceLine::GetType() const
 W spvtools::opt::DependenceLine::~DependenceLine()
 W spvtools::opt::DependenceNone::AsDependenceNone()
 W spvtools::opt::DependenceNone::AsDependenceNone() const
 W spvtools::opt::DependenceNone::GetType() const
 W spvtools::opt::DependenceNone::~DependenceNone()
 W spvtools::opt::DependencePoint::AsDependencePoint()
 W spvtools::opt::DependencePoint::AsDependencePoint() const
 W spvtools::opt::DependencePoint::GetType() const
 W spvtools::opt::DependencePoint::~DependencePoint()
 W spvtools::opt::DominatorTree::Visit(std::function<bool (spvtools::opt::DominatorTreeNode const*)>) const
 W spvtools::opt::EliminateDeadConstantPass::name() const
 W spvtools::opt::EliminateDeadConstantPass::~EliminateDeadConstantPass()
 W spvtools::opt::EliminateDeadFunctionsPass::GetPreservedAnalyses()
 W spvtools::opt::EliminateDeadFunctionsPass::name() const
 W spvtools::opt::EliminateDeadFunctionsPass::~EliminateDeadFunctionsPass()
 W spvtools::opt::FlattenDecorationPass::name() const
 W spvtools::opt::FlattenDecorationPass::~FlattenDecorationPass()
 W spvtools::opt::FoldSpecConstantOpAndCompositePass::name() const
 W spvtools::opt::FoldSpecConstantOpAndCompositePass::~FoldSpecConstantOpAndCompositePass()
 W spvtools::opt::FreezeSpecConstantValuePass::name() const
 W spvtools::opt::FreezeSpecConstantValuePass::~FreezeSpecConstantValuePass()
 W spvtools::opt::IfConversion::GetPreservedAnalyses()
 W spvtools::opt::IfConversion::name() const
 W spvtools::opt::IfConversion::~IfConversion()
 W spvtools::opt::InlineExhaustivePass::name() const
 W spvtools::opt::InlineExhaustivePass::~InlineExhaustivePass()
 W spvtools::opt::InlineOpaquePass::name() const
 W spvtools::opt::InlineOpaquePass::~InlineOpaquePass()
 W spvtools::opt::InlinePass::~InlinePass()
 W spvtools::opt::InstructionBuilder::AddBranch(unsigned int)
 W spvtools::opt::InstructionBuilder::AddCompositeConstruct(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 W spvtools::opt::InstructionBuilder::AddCompositeExtract(unsigned int, unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 W spvtools::opt::InstructionBuilder::AddConditionalBranch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddIAdd(unsigned int, unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddInstruction(std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >&&)
 W spvtools::opt::InstructionBuilder::AddLessThan(unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddPhi(unsigned int, std::vector<unsigned int, std::allocator<unsigned int> > const&)
 W spvtools::opt::InstructionBuilder::AddSLessThan(unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddSelect(unsigned int, unsigned int, unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddSelectionMerge(unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddSwitch(unsigned int, unsigned int, std::vector<std::pair<std::vector<unsigned int, std::allocator<unsigned int> >, unsigned int>, std::allocator<std::pair<std::vector<unsigned int, std::allocator<unsigned int> >, unsigned int> > > const&, unsigned int, unsigned int)
 W spvtools::opt::InstructionBuilder::AddULessThan(unsigned int, unsigned int)
 W spvtools::opt::LICMPass::name() const
 W spvtools::opt::LICMPass::~LICMPass()
 W spvtools::opt::LocalAccessChainConvertPass::GetPreservedAnalyses()
 W spvtools::opt::LocalAccessChainConvertPass::name() const
 W spvtools::opt::LocalAccessChainConvertPass::~LocalAccessChainConvertPass()
 W spvtools::opt::LocalMultiStoreElimPass::GetPreservedAnalyses()
 W spvtools::opt::LocalMultiStoreElimPass::name() const
 W spvtools::opt::LocalMultiStoreElimPass::~LocalMultiStoreElimPass()
 W spvtools::opt::LocalRedundancyEliminationPass::GetPreservedAnalyses()
 W spvtools::opt::LocalRedundancyEliminationPass::name() const
 W spvtools::opt::LocalRedundancyEliminationPass::~LocalRedundancyEliminationPass()
 W spvtools::opt::LocalSingleBlockLoadStoreElimPass::GetPreservedAnalyses()
 W spvtools::opt::LocalSingleBlockLoadStoreElimPass::name() const
 W spvtools::opt::LocalSingleBlockLoadStoreElimPass::~LocalSingleBlockLoadStoreElimPass()
 W spvtools::opt::LocalSingleStoreElimPass::GetPreservedAnalyses()
 W spvtools::opt::LocalSingleStoreElimPass::name() const
 W spvtools::opt::LocalSingleStoreElimPass::~LocalSingleStoreElimPass()
 W spvtools::opt::LoopFissionPass::name() const
 W spvtools::opt::LoopFissionPass::~LoopFissionPass()
 W spvtools::opt::LoopFusionPass::name() const
 W spvtools::opt::LoopFusionPass::~LoopFusionPass()
 W spvtools::opt::LoopPeelingPass::name() const
 W spvtools::opt::LoopPeelingPass::~LoopPeelingPass()
 W spvtools::opt::LoopUnroller::name() const
 W spvtools::opt::LoopUnroller::~LoopUnroller()
 W spvtools::opt::LoopUnswitchPass::name() const
 W spvtools::opt::LoopUnswitchPass::~LoopUnswitchPass()
 W spvtools::opt::LoopUtils::LoopCloningResult::~LoopCloningResult()
 W spvtools::opt::MemPass::~MemPass()
 W spvtools::opt::MergeReturnPass::GetPreservedAnalyses()
 W spvtools::opt::MergeReturnPass::name() const
 W spvtools::opt::MergeReturnPass::~MergeReturnPass()
 W spvtools::opt::NullPass::Process(spvtools::ir::IRContext*)
 W spvtools::opt::NullPass::name() const
 W spvtools::opt::NullPass::~NullPass()
 W spvtools::opt::Pass::GetPreservedAnalyses()
 W spvtools::opt::Pass::InitializeProcessing(spvtools::ir::IRContext*)
 W spvtools::opt::Pass::~Pass()
 W spvtools::opt::PostOrderTreeDFIterator<spvtools::ir::Loop>::MoveToNextNode()
 W spvtools::opt::PostOrderTreeDFIterator<spvtools::ir::Loop>::PostOrderTreeDFIterator(spvtools::ir::Loop*)
 W spvtools::opt::PrivateToLocalPass::GetPreservedAnalyses()
 W spvtools::opt::PrivateToLocalPass::name() const
 W spvtools::opt::PrivateToLocalPass::~PrivateToLocalPass()
 W spvtools::opt::ReduceLoadSize::GetPreservedAnalyses()
 W spvtools::opt::ReduceLoadSize::name() const
 W spvtools::opt::ReduceLoadSize::~ReduceLoadSize()
 W spvtools::opt::RedundancyEliminationPass::name() const
 W spvtools::opt::RedundancyEliminationPass::~RedundancyEliminationPass()
 W spvtools::opt::RemoveDuplicatesPass::name() const
 W spvtools::opt::RemoveDuplicatesPass::~RemoveDuplicatesPass()
 W spvtools::opt::ReplaceInvalidOpcodePass::name() const
 W spvtools::opt::ReplaceInvalidOpcodePass::~ReplaceInvalidOpcodePass()
 W spvtools::opt::SEAddNode::AsSEAddNode()
 W spvtools::opt::SEAddNode::AsSEAddNode() const
 W spvtools::opt::SEAddNode::GetType() const
 W spvtools::opt::SEAddNode::~SEAddNode()
 W spvtools::opt::SECantCompute::AsSECantCompute()
 W spvtools::opt::SECantCompute::AsSECantCompute() const
 W spvtools::opt::SECantCompute::GetType() const
 W spvtools::opt::SECantCompute::~SECantCompute()
 W spvtools::opt::SEConstantNode::AddChild(spvtools::opt::SENode*)
 W spvtools::opt::SEConstantNode::AsSEConstantNode()
 W spvtools::opt::SEConstantNode::AsSEConstantNode() const
 W spvtools::opt::SEConstantNode::GetType() const
 W spvtools::opt::SEConstantNode::~SEConstantNode()
 W spvtools::opt::SEMultiplyNode::AsSEMultiplyNode()
 W spvtools::opt::SEMultiplyNode::AsSEMultiplyNode() const
 W spvtools::opt::SEMultiplyNode::GetType() const
 W spvtools::opt::SEMultiplyNode::~SEMultiplyNode()
 W spvtools::opt::SENegative::AsSENegative()
 W spvtools::opt::SENegative::AsSENegative() const
 W spvtools::opt::SENegative::GetType() const
 W spvtools::opt::SENegative::~SENegative()
 W spvtools::opt::SENode::AddChild(spvtools::opt::SENode*)
 W spvtools::opt::SENode::AsSEAddNode()
 W spvtools::opt::SENode::AsSEAddNode() const
 W spvtools::opt::SENode::AsSECantCompute()
 W spvtools::opt::SENode::AsSECantCompute() const
 W spvtools::opt::SENode::AsSEConstantNode()
 W spvtools::opt::SENode::AsSEConstantNode() const
 W spvtools::opt::SENode::AsSEMultiplyNode()
 W spvtools::opt::SENode::AsSEMultiplyNode() const
 W spvtools::opt::SENode::AsSENegative()
 W spvtools::opt::SENode::AsSENegative() const
 W spvtools::opt::SENode::AsSERecurrentNode()
 W spvtools::opt::SENode::AsSERecurrentNode() const
 W spvtools::opt::SENode::AsSEValueUnknown()
 W spvtools::opt::SENode::AsSEValueUnknown() const
 W spvtools::opt::SENode::CollectRecurrentNodes()
 W spvtools::opt::SENode::CollectValueUnknownNodes()
 W spvtools::opt::SENode::~SENode()
 W spvtools::opt::SERecurrentNode::AsSERecurrentNode()
 W spvtools::opt::SERecurrentNode::AsSERecurrentNode() const
 W spvtools::opt::SERecurrentNode::GetType() const
 W spvtools::opt::SERecurrentNode::~SERecurrentNode()
 W spvtools::opt::SEValueUnknown::AsSEValueUnknown()
 W spvtools::opt::SEValueUnknown::AsSEValueUnknown() const
 W spvtools::opt::SEValueUnknown::GetType() const
 W spvtools::opt::SEValueUnknown::~SEValueUnknown()
 W spvtools::opt::SSARewritePass::name() const
 W spvtools::opt::SSARewritePass::~SSARewritePass()
 W spvtools::opt::ScalarEvolutionAnalysis::~ScalarEvolutionAnalysis()
 W spvtools::opt::ScalarReplacementPass::GetPreservedAnalyses()
 W spvtools::opt::ScalarReplacementPass::name() const
 W spvtools::opt::ScalarReplacementPass::~ScalarReplacementPass()
 W spvtools::opt::SetSpecConstantDefaultValuePass::name() const
 W spvtools::opt::SetSpecConstantDefaultValuePass::~SetSpecConstantDefaultValuePass()
 W spvtools::opt::SimplificationPass::GetPreservedAnalyses()
 W spvtools::opt::SimplificationPass::name() const
 W spvtools::opt::SimplificationPass::~SimplificationPass()
 W spvtools::opt::StrengthReductionPass::name() const
 W spvtools::opt::StrengthReductionPass::~StrengthReductionPass()
 W spvtools::opt::StripDebugInfoPass::name() const
 W spvtools::opt::StripDebugInfoPass::~StripDebugInfoPass()
 W spvtools::opt::StripReflectInfoPass::GetPreservedAnalyses()
 W spvtools::opt::StripReflectInfoPass::name() const
 W spvtools::opt::StripReflectInfoPass::~StripReflectInfoPass()
 W spvtools::opt::TreeDFIterator<spvtools::ir::Loop>::MoveToNextNode()
 W spvtools::opt::TreeDFIterator<spvtools::ir::Loop>::TreeDFIterator(spvtools::ir::Loop*)
 W spvtools::opt::TreeDFIterator<spvtools::opt::DominatorTreeNode>::TreeDFIterator(spvtools::opt::DominatorTreeNode*)
 W spvtools::opt::UnifyConstantPass::name() const
 W spvtools::opt::UnifyConstantPass::~UnifyConstantPass()
 W spvtools::opt::VectorDCE::GetPreservedAnalyses()
 W spvtools::opt::VectorDCE::name() const
 W spvtools::opt::VectorDCE::~VectorDCE()
 W spvtools::opt::Workaround1209::name() const
 W spvtools::opt::Workaround1209::~Workaround1209()
 W spvtools::opt::analysis::Array::AsArray()
 W spvtools::opt::analysis::Array::AsArray() const
 W spvtools::opt::analysis::Array::~Array()
 W spvtools::opt::analysis::ArrayConstant::AsArrayConstant()
 W spvtools::opt::analysis::ArrayConstant::AsArrayConstant() const
 W spvtools::opt::analysis::ArrayConstant::Copy() const
 W spvtools::opt::analysis::ArrayConstant::~ArrayConstant()
 W spvtools::opt::analysis::Bool::AsBool()
 W spvtools::opt::analysis::Bool::AsBool() const
 W spvtools::opt::analysis::Bool::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::Bool::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::Bool::str() const
 W spvtools::opt::analysis::Bool::~Bool()
 W spvtools::opt::analysis::BoolConstant::AsBoolConstant()
 W spvtools::opt::analysis::BoolConstant::AsBoolConstant() const
 W spvtools::opt::analysis::BoolConstant::Copy() const
 W spvtools::opt::analysis::BoolConstant::~BoolConstant()
 W spvtools::opt::analysis::CompositeConstant::AsCompositeConstant()
 W spvtools::opt::analysis::CompositeConstant::AsCompositeConstant() const
 W spvtools::opt::analysis::CompositeConstant::GetComponents() const
 W spvtools::opt::analysis::CompositeConstant::IsZero() const
 W spvtools::opt::analysis::CompositeConstant::~CompositeConstant()
 W spvtools::opt::analysis::Constant::AsArrayConstant()
 W spvtools::opt::analysis::Constant::AsArrayConstant() const
 W spvtools::opt::analysis::Constant::AsBoolConstant()
 W spvtools::opt::analysis::Constant::AsBoolConstant() const
 W spvtools::opt::analysis::Constant::AsCompositeConstant()
 W spvtools::opt::analysis::Constant::AsCompositeConstant() const
 W spvtools::opt::analysis::Constant::AsFloatConstant()
 W spvtools::opt::analysis::Constant::AsFloatConstant() const
 W spvtools::opt::analysis::Constant::AsIntConstant()
 W spvtools::opt::analysis::Constant::AsIntConstant() const
 W spvtools::opt::analysis::Constant::AsMatrixConstant()
 W spvtools::opt::analysis::Constant::AsMatrixConstant() const
 W spvtools::opt::analysis::Constant::AsNullConstant()
 W spvtools::opt::analysis::Constant::AsNullConstant() const
 W spvtools::opt::analysis::Constant::AsScalarConstant()
 W spvtools::opt::analysis::Constant::AsScalarConstant() const
 W spvtools::opt::analysis::Constant::AsStructConstant()
 W spvtools::opt::analysis::Constant::AsStructConstant() const
 W spvtools::opt::analysis::Constant::AsVectorConstant()
 W spvtools::opt::analysis::Constant::AsVectorConstant() const
 W spvtools::opt::analysis::Constant::IsZero() const
 W spvtools::opt::analysis::Constant::~Constant()
 W spvtools::opt::analysis::DeviceEvent::AsDeviceEvent()
 W spvtools::opt::analysis::DeviceEvent::AsDeviceEvent() const
 W spvtools::opt::analysis::DeviceEvent::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::DeviceEvent::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::DeviceEvent::str() const
 W spvtools::opt::analysis::DeviceEvent::~DeviceEvent()
 W spvtools::opt::analysis::Event::AsEvent()
 W spvtools::opt::analysis::Event::AsEvent() const
 W spvtools::opt::analysis::Event::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::Event::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::Event::str() const
 W spvtools::opt::analysis::Event::~Event()
 W spvtools::opt::analysis::Float::AsFloat()
 W spvtools::opt::analysis::Float::AsFloat() const
 W spvtools::opt::analysis::Float::~Float()
 W spvtools::opt::analysis::FloatConstant::AsFloatConstant()
 W spvtools::opt::analysis::FloatConstant::AsFloatConstant() const
 W spvtools::opt::analysis::FloatConstant::Copy() const
 W spvtools::opt::analysis::FloatConstant::~FloatConstant()
 W spvtools::opt::analysis::ForwardPointer::AsForwardPointer()
 W spvtools::opt::analysis::ForwardPointer::AsForwardPointer() const
 W spvtools::opt::analysis::ForwardPointer::~ForwardPointer()
 W spvtools::opt::analysis::Function::AsFunction()
 W spvtools::opt::analysis::Function::AsFunction() const
 W spvtools::opt::analysis::Function::~Function()
 W spvtools::opt::analysis::Image::AsImage()
 W spvtools::opt::analysis::Image::AsImage() const
 W spvtools::opt::analysis::Image::~Image()
 W spvtools::opt::analysis::IntConstant::AsIntConstant()
 W spvtools::opt::analysis::IntConstant::AsIntConstant() const
 W spvtools::opt::analysis::IntConstant::Copy() const
 W spvtools::opt::analysis::IntConstant::~IntConstant()
 W spvtools::opt::analysis::Integer::AsInteger()
 W spvtools::opt::analysis::Integer::AsInteger() const
 W spvtools::opt::analysis::Integer::~Integer()
 W spvtools::opt::analysis::Matrix::AsMatrix()
 W spvtools::opt::analysis::Matrix::AsMatrix() const
 W spvtools::opt::analysis::Matrix::~Matrix()
 W spvtools::opt::analysis::MatrixConstant::AsMatrixConstant()
 W spvtools::opt::analysis::MatrixConstant::AsMatrixConstant() const
 W spvtools::opt::analysis::MatrixConstant::Copy() const
 W spvtools::opt::analysis::MatrixConstant::~MatrixConstant()
 W spvtools::opt::analysis::NamedBarrier::AsNamedBarrier()
 W spvtools::opt::analysis::NamedBarrier::AsNamedBarrier() const
 W spvtools::opt::analysis::NamedBarrier::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::NamedBarrier::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::NamedBarrier::str() const
 W spvtools::opt::analysis::NamedBarrier::~NamedBarrier()
 W spvtools::opt::analysis::NullConstant::AsNullConstant()
 W spvtools::opt::analysis::NullConstant::AsNullConstant() const
 W spvtools::opt::analysis::NullConstant::Copy() const
 W spvtools::opt::analysis::NullConstant::IsZero() const
 W spvtools::opt::analysis::NullConstant::~NullConstant()
 W spvtools::opt::analysis::Opaque::AsOpaque()
 W spvtools::opt::analysis::Opaque::AsOpaque() const
 W spvtools::opt::analysis::Opaque::~Opaque()
 W spvtools::opt::analysis::Pipe::AsPipe()
 W spvtools::opt::analysis::Pipe::AsPipe() const
 W spvtools::opt::analysis::Pipe::~Pipe()
 W spvtools::opt::analysis::PipeStorage::AsPipeStorage()
 W spvtools::opt::analysis::PipeStorage::AsPipeStorage() const
 W spvtools::opt::analysis::PipeStorage::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::PipeStorage::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::PipeStorage::str() const
 W spvtools::opt::analysis::PipeStorage::~PipeStorage()
 W spvtools::opt::analysis::Pointer::AsPointer()
 W spvtools::opt::analysis::Pointer::AsPointer() const
 W spvtools::opt::analysis::Pointer::~Pointer()
 W spvtools::opt::analysis::Queue::AsQueue()
 W spvtools::opt::analysis::Queue::AsQueue() const
 W spvtools::opt::analysis::Queue::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::Queue::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::Queue::str() const
 W spvtools::opt::analysis::Queue::~Queue()
 W spvtools::opt::analysis::ReserveId::AsReserveId()
 W spvtools::opt::analysis::ReserveId::AsReserveId() const
 W spvtools::opt::analysis::ReserveId::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::ReserveId::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::ReserveId::str() const
 W spvtools::opt::analysis::ReserveId::~ReserveId()
 W spvtools::opt::analysis::RuntimeArray::AsRuntimeArray()
 W spvtools::opt::analysis::RuntimeArray::AsRuntimeArray() const
 W spvtools::opt::analysis::RuntimeArray::~RuntimeArray()
 W spvtools::opt::analysis::SampledImage::AsSampledImage()
 W spvtools::opt::analysis::SampledImage::AsSampledImage() const
 W spvtools::opt::analysis::SampledImage::~SampledImage()
 W spvtools::opt::analysis::Sampler::AsSampler()
 W spvtools::opt::analysis::Sampler::AsSampler() const
 W spvtools::opt::analysis::Sampler::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::Sampler::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::Sampler::str() const
 W spvtools::opt::analysis::Sampler::~Sampler()
 W spvtools::opt::analysis::ScalarConstant::AsScalarConstant()
 W spvtools::opt::analysis::ScalarConstant::AsScalarConstant() const
 W spvtools::opt::analysis::ScalarConstant::IsZero() const
 W spvtools::opt::analysis::ScalarConstant::words() const
 W spvtools::opt::analysis::ScalarConstant::~ScalarConstant()
 W spvtools::opt::analysis::Struct::AsStruct()
 W spvtools::opt::analysis::Struct::AsStruct() const
 W spvtools::opt::analysis::Struct::ClearDecorations()
 W spvtools::opt::analysis::Struct::decoration_empty() const
 W spvtools::opt::analysis::Struct::~Struct()
 W spvtools::opt::analysis::StructConstant::AsStructConstant()
 W spvtools::opt::analysis::StructConstant::AsStructConstant() const
 W spvtools::opt::analysis::StructConstant::Copy() const
 W spvtools::opt::analysis::StructConstant::~StructConstant()
 W spvtools::opt::analysis::Type::AsArray()
 W spvtools::opt::analysis::Type::AsArray() const
 W spvtools::opt::analysis::Type::AsBool()
 W spvtools::opt::analysis::Type::AsBool() const
 W spvtools::opt::analysis::Type::AsDeviceEvent()
 W spvtools::opt::analysis::Type::AsDeviceEvent() const
 W spvtools::opt::analysis::Type::AsEvent()
 W spvtools::opt::analysis::Type::AsEvent() const
 W spvtools::opt::analysis::Type::AsFloat()
 W spvtools::opt::analysis::Type::AsFloat() const
 W spvtools::opt::analysis::Type::AsForwardPointer()
 W spvtools::opt::analysis::Type::AsForwardPointer() const
 W spvtools::opt::analysis::Type::AsFunction()
 W spvtools::opt::analysis::Type::AsFunction() const
 W spvtools::opt::analysis::Type::AsImage()
 W spvtools::opt::analysis::Type::AsImage() const
 W spvtools::opt::analysis::Type::AsInteger()
 W spvtools::opt::analysis::Type::AsInteger() const
 W spvtools::opt::analysis::Type::AsMatrix()
 W spvtools::opt::analysis::Type::AsMatrix() const
 W spvtools::opt::analysis::Type::AsNamedBarrier()
 W spvtools::opt::analysis::Type::AsNamedBarrier() const
 W spvtools::opt::analysis::Type::AsOpaque()
 W spvtools::opt::analysis::Type::AsOpaque() const
 W spvtools::opt::analysis::Type::AsPipe()
 W spvtools::opt::analysis::Type::AsPipe() const
 W spvtools::opt::analysis::Type::AsPipeStorage()
 W spvtools::opt::analysis::Type::AsPipeStorage() const
 W spvtools::opt::analysis::Type::AsPointer()
 W spvtools::opt::analysis::Type::AsPointer() const
 W spvtools::opt::analysis::Type::AsQueue()
 W spvtools::opt::analysis::Type::AsQueue() const
 W spvtools::opt::analysis::Type::AsReserveId()
 W spvtools::opt::analysis::Type::AsReserveId() const
 W spvtools::opt::analysis::Type::AsRuntimeArray()
 W spvtools::opt::analysis::Type::AsRuntimeArray() const
 W spvtools::opt::analysis::Type::AsSampledImage()
 W spvtools::opt::analysis::Type::AsSampledImage() const
 W spvtools::opt::analysis::Type::AsSampler()
 W spvtools::opt::analysis::Type::AsSampler() const
 W spvtools::opt::analysis::Type::AsStruct()
 W spvtools::opt::analysis::Type::AsStruct() const
 W spvtools::opt::analysis::Type::AsVector()
 W spvtools::opt::analysis::Type::AsVector() const
 W spvtools::opt::analysis::Type::AsVoid()
 W spvtools::opt::analysis::Type::AsVoid() const
 W spvtools::opt::analysis::Type::ClearDecorations()
 W spvtools::opt::analysis::Type::decoration_empty() const
 W spvtools::opt::analysis::Type::~Type()
 W spvtools::opt::analysis::Vector::AsVector()
 W spvtools::opt::analysis::Vector::AsVector() const
 W spvtools::opt::analysis::Vector::~Vector()
 W spvtools::opt::analysis::VectorConstant::AsVectorConstant()
 W spvtools::opt::analysis::VectorConstant::AsVectorConstant() const
 W spvtools::opt::analysis::VectorConstant::Copy() const
 W spvtools::opt::analysis::VectorConstant::~VectorConstant()
 W spvtools::opt::analysis::Void::AsVoid()
 W spvtools::opt::analysis::Void::AsVoid() const
 W spvtools::opt::analysis::Void::GetExtraHashWords(std::vector<unsigned int, std::allocator<unsigned int> >*, std::unordered_set<spvtools::opt::analysis::Type const*, std::hash<spvtools::opt::analysis::Type const*>, std::equal_to<spvtools::opt::analysis::Type const*>, std::allocator<spvtools::opt::analysis::Type const*> >*) const
 W spvtools::opt::analysis::Void::IsSameImpl(spvtools::opt::analysis::Type const*, std::set<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
 W spvtools::opt::analysis::Void::str() const
 W spvtools::opt::analysis::Void::~Void()
 W spvtools::utils::IntrusiveList<spvtools::ir::Instruction>::~IntrusiveList()
 W spvtools::utils::IntrusiveNodeBase<spvtools::ir::Instruction>::~IntrusiveNodeBase()
 W spvutils::FloatProxy<double>::GetWords() const
 W std::_Deque_base<bool, std::allocator<bool> >::_M_initialize_map(unsigned long)
 W std::_Deque_base<bool, std::allocator<bool> >::~_Deque_base()
 W std::_Deque_base<spv::Block*, std::allocator<spv::Block*> >::_M_initialize_map(unsigned long)
 W std::_Deque_base<spv::Builder::LoopBlocks, std::allocator<spv::Builder::LoopBlocks> >::_M_initialize_map(unsigned long)
 W std::_Deque_base<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> >::_M_initialize_map(unsigned long)
 W std::_Deque_base<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> >::~_Deque_base()
 W std::_Deque_base<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::_M_initialize_map(unsigned long)
 W std::_Deque_base<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::~_Deque_base()
 W std::_Deque_base<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >::_Deque_base(std::_Deque_base<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >&&)
 W std::_Deque_base<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >::_M_initialize_map(unsigned long)
 W std::_Deque_base<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >::~_Deque_base()
 W std::_Deque_base<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >::_Deque_base(std::_Deque_base<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >&&)
 W std::_Deque_base<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >::_M_initialize_map(unsigned long)
 W std::_Deque_base<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >::~_Deque_base()
 W std::_Deque_base<unsigned int, std::allocator<unsigned int> >::_M_initialize_map(unsigned long)
 W std::_Deque_base<unsigned int, std::allocator<unsigned int> >::~_Deque_base()
 W std::_Function_base::_Base_manager<libspirv::FriendlyNameMapper::GetNameMapper()::{lambda(unsigned int)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<libspirv::FriendlyNameMapper::GetNameMapper()::{lambda(unsigned int)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spv::Function::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const::{lambda(spv::Block const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spv::Function::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const::{lambda(spv::Block const*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*)#2}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*, libspirv::BasicBlock const*)#3}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*, libspirv::BasicBlock const*)#3}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::BasicBlock::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const::{lambda(spvtools::ir::Instruction const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::BasicBlock::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const::{lambda(spvtools::ir::Instruction const*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::BasicBlock::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::BasicBlock::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::BasicBlock::ForEachPhiInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::BasicBlock::ForEachPhiInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::CFG::RemoveSuccessorEdges(spvtools::ir::BasicBlock const*)::{lambda(unsigned int)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::CFG::RemoveSuccessorEdges(spvtools::ir::BasicBlock const*)::{lambda(unsigned int)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::IRContext::BuildInstrToBlockMapping()::{lambda(spvtools::ir::Instruction*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::IRContext::BuildInstrToBlockMapping()::{lambda(spvtools::ir::Instruction*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInOperand(std::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInOperand(std::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInOperand(std::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInOperand(std::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const::{lambda(spvtools::ir::Instruction const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const::{lambda(spvtools::ir::Instruction const*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::ir::Instruction::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::function<bool (spvtools::ir::Instruction const&)>)::{default arg#1}::{lambda(spvtools::ir::Instruction const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::function<bool (spvtools::ir::Instruction const&)>)::{default arg#1}::{lambda(spvtools::ir::Instruction const&)#1}> const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<std::_Bind<std::_Mem_fn<int (glslang::TInputScanner::*)() const> (glslang::TInputScanner*)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<std::_Bind<std::_Mem_fn<void (spvtools::opt::analysis::DefUseManager::*)(spvtools::ir::Instruction*)> (spvtools::opt::analysis::DefUseManager*, std::_Placeholder<1>)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<unsigned int>, std::__future_base::_Result_base::_Deleter>, unsigned int> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<void>, std::__future_base::_Result_base::_Deleter>, void> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >* (spvtools::ir::BasicBlock const*)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Base_manager<std::string (*)(unsigned int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Ref_manager<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_base::_Ref_manager<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 W std::_Function_handler<bool (spvtools::ir::Instruction const&), spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::function<bool (spvtools::ir::Instruction const&)>)::{default arg#1}::{lambda(spvtools::ir::Instruction const&)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction const&)
 W std::_Function_handler<bool (spvtools::ir::Instruction const*), spvtools::ir::BasicBlock::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const::{lambda(spvtools::ir::Instruction const*)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction const*)
 W std::_Function_handler<bool (spvtools::ir::Instruction const*), spvtools::ir::Instruction::ForEachInst(std::function<void (spvtools::ir::Instruction const*)> const&, bool) const::{lambda(spvtools::ir::Instruction const*)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction const*)
 W std::_Function_handler<bool (spvtools::ir::Instruction*), spvtools::ir::BasicBlock::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction*)
 W std::_Function_handler<bool (spvtools::ir::Instruction*), spvtools::ir::BasicBlock::ForEachPhiInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction*)
 W std::_Function_handler<bool (spvtools::ir::Instruction*), spvtools::ir::Instruction::ForEachInst(std::function<void (spvtools::ir::Instruction*)> const&, bool)::{lambda(spvtools::ir::Instruction*)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction*)
 W std::_Function_handler<bool (unsigned int const*), spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}>::_M_invoke(std::_Any_data const&, unsigned int const*)
 W std::_Function_handler<bool (unsigned int const*), spvtools::ir::Instruction::ForEachInOperand(std::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}>::_M_invoke(std::_Any_data const&, unsigned int const*)
 W std::_Function_handler<bool (unsigned int*), spvtools::ir::Instruction::ForEachInId(std::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}>::_M_invoke(std::_Any_data const&, unsigned int*)
 W std::_Function_handler<bool (unsigned int*), spvtools::ir::Instruction::ForEachInOperand(std::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}>::_M_invoke(std::_Any_data const&, unsigned int*)
 W std::_Function_handler<int (), std::_Bind<std::_Mem_fn<int (glslang::TInputScanner::*)() const> (glslang::TInputScanner*)> >::_M_invoke(std::_Any_data const&)
 W std::_Function_handler<std::string (unsigned int), libspirv::FriendlyNameMapper::GetNameMapper()::{lambda(unsigned int)#1}>::_M_invoke(std::_Any_data const&, unsigned int)
 W std::_Function_handler<std::string (unsigned int), std::string (*)(unsigned int)>::_M_invoke(std::_Any_data const&, unsigned int)
 W std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<unsigned int>, std::__future_base::_Result_base::_Deleter>, unsigned int> >::_M_invoke(std::_Any_data const&)
 W std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<void>, std::__future_base::_Result_base::_Deleter>, void> >::_M_invoke(std::_Any_data const&)
 W std::_Function_handler<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*), std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >* (spvtools::ir::BasicBlock const*)> >::_M_invoke(std::_Any_data const&, spvtools::ir::BasicBlock const*)
 W std::_Function_handler<unsigned int (), std::reference_wrapper<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)> > >::_M_invoke(std::_Any_data const&)
 W std::_Function_handler<void (), std::reference_wrapper<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)> > >::_M_invoke(std::_Any_data const&)
 W std::_Function_handler<void (libspirv::BasicBlock const*), spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*)#1}>::_M_invoke(std::_Any_data const&, libspirv::BasicBlock const*)
 W std::_Function_handler<void (libspirv::BasicBlock const*), spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*)#2}>::_M_invoke(std::_Any_data const&, libspirv::BasicBlock const*)
 W std::_Function_handler<void (libspirv::BasicBlock const*, libspirv::BasicBlock const*), spvtools::CFA<libspirv::BasicBlock>::TraversalRoots(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::{lambda(libspirv::BasicBlock const*, libspirv::BasicBlock const*)#3}>::_M_invoke(std::_Any_data const&, libspirv::BasicBlock const*, libspirv::BasicBlock const*)
 W std::_Function_handler<void (spv::Block*), spv::Function::dump(std::vector<unsigned int, std::allocator<unsigned int> >&) const::{lambda(spv::Block const*)#1}>::_M_invoke(std::_Any_data const&, spv::Block*)
 W std::_Function_handler<void (spvtools::ir::Instruction*), spvtools::ir::IRContext::BuildInstrToBlockMapping()::{lambda(spvtools::ir::Instruction*)#1}>::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction*)
 W std::_Function_handler<void (spvtools::ir::Instruction*), std::_Bind<std::_Mem_fn<void (spvtools::opt::analysis::DefUseManager::*)(spvtools::ir::Instruction*)> (spvtools::opt::analysis::DefUseManager*, std::_Placeholder<1>)> >::_M_invoke(std::_Any_data const&, spvtools::ir::Instruction*)
 W std::_Function_handler<void (unsigned int), spvtools::ir::CFG::RemoveSuccessorEdges(spvtools::ir::BasicBlock const*)::{lambda(unsigned int)#1}>::_M_invoke(std::_Any_data const&, unsigned int)
 W std::_Hashtable<char const*, std::pair<char const* const, unsigned int>, std::allocator<std::pair<char const* const, unsigned int> >, std::__detail::_Select1st, std::equal_to<char const*>, std::hash<char const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char const* const, unsigned int>, false>*)
 W std::_Hashtable<glslang::TIntermBranch*, glslang::TIntermBranch*, std::allocator<glslang::TIntermBranch*>, std::__detail::_Identity, std::equal_to<glslang::TIntermBranch*>, std::hash<glslang::TIntermBranch*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<glslang::TIntermBranch*, false>*)
 W std::_Hashtable<glslang::TIntermTyped*, std::pair<glslang::TIntermTyped* const, std::string>, std::allocator<std::pair<glslang::TIntermTyped* const, std::string> >, std::__detail::_Select1st, std::equal_to<glslang::TIntermTyped*>, std::hash<glslang::TIntermTyped*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<glslang::TIntermTyped* const, std::string>, false>*)
 W std::_Hashtable<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > >, std::allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, std::hash<glslang::TVector<glslang::TTypeLoc> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > >, false>*)
 W std::_Hashtable<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, unsigned int>, std::allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, unsigned int> >, std::__detail::_Select1st, std::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, std::hash<glslang::TVector<glslang::TTypeLoc> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, unsigned int>, false>*)
 W std::_Hashtable<int, int, std::allocator<int>, std::__detail::_Identity, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<int, false>*)
 W std::_Hashtable<int, std::pair<int const, std::vector<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::vector<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::vector<int, std::allocator<int> > >, false>*)
 W std::_Hashtable<int, std::pair<int const, unsigned int>, std::allocator<std::pair<int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, unsigned int>, false>*)
 W std::_Hashtable<libspirv::BasicBlock const*, libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*>, std::__detail::_Identity, std::equal_to<libspirv::BasicBlock const*>, std::hash<libspirv::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<libspirv::BasicBlock const*, false>*)
 W std::_Hashtable<libspirv::BasicBlock const*, std::pair<libspirv::BasicBlock const* const, spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::block_detail>, std::allocator<std::pair<libspirv::BasicBlock const* const, spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::block_detail> >, std::__detail::_Select1st, std::equal_to<libspirv::BasicBlock const*>, std::hash<libspirv::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<libspirv::BasicBlock const* const, spvtools::CFA<libspirv::BasicBlock>::CalculateDominators(std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> > const&, std::function<std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const* (libspirv::BasicBlock const*)>)::block_detail>, false>*)
 W std::_Hashtable<libspirv::BasicBlock const*, std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, std::allocator<std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > > >, std::__detail::_Select1st, std::equal_to<libspirv::BasicBlock const*>, std::hash<libspirv::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, false>*)
 W std::_Hashtable<libspirv::BasicBlock*, std::pair<libspirv::BasicBlock* const, int>, std::allocator<std::pair<libspirv::BasicBlock* const, int> >, std::__detail::_Select1st, std::equal_to<libspirv::BasicBlock*>, std::hash<libspirv::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<libspirv::BasicBlock* const, int>, false>*)
 W std::_Hashtable<libspirv::BasicBlock*, std::pair<libspirv::BasicBlock* const, libspirv::BasicBlock*>, std::allocator<std::pair<libspirv::BasicBlock* const, libspirv::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<libspirv::BasicBlock*>, std::hash<libspirv::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<libspirv::BasicBlock* const, libspirv::BasicBlock*>, false>*)
 W std::_Hashtable<libspirv::Instruction const*, libspirv::Instruction const*, std::allocator<libspirv::Instruction const*>, std::__detail::_Identity, std::equal_to<libspirv::Instruction const*>, std::hash<libspirv::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<libspirv::Instruction const*, false>*)
 W std::_Hashtable<spv::Block const*, spv::Block const*, std::allocator<spv::Block const*>, std::__detail::_Identity, std::equal_to<spv::Block const*>, std::hash<spv::Block const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spv::Block const*, false>*)
 W std::_Hashtable<spv::Block*, spv::Block*, std::allocator<spv::Block*>, std::__detail::_Identity, std::equal_to<spv::Block*>, std::hash<spv::Block*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spv::Block*, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock const*, std::pair<spvtools::ir::BasicBlock const* const, spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::block_detail>, std::allocator<std::pair<spvtools::ir::BasicBlock const* const, spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::block_detail> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock const*>, std::hash<spvtools::ir::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock const* const, spvtools::CFA<spvtools::ir::BasicBlock>::CalculateDominators(std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> > const&, std::function<std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > const* (spvtools::ir::BasicBlock const*)>)::block_detail>, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock const*, std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > >, std::allocator<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock const*>, std::hash<spvtools::ir::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > >, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*>, std::__detail::_Identity, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::ir::BasicBlock*, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*>, std::__detail::_Identity, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear()
 W std::_Hashtable<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*>, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::Instruction*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::Instruction*>, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<spvtools::ir::BasicBlock* const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock* const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, std::vector<spvtools::opt::Edge, std::allocator<spvtools::opt::Edge> > >, std::allocator<std::pair<spvtools::ir::BasicBlock* const, std::vector<spvtools::opt::Edge, std::allocator<spvtools::opt::Edge> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock* const, std::vector<spvtools::opt::Edge, std::allocator<spvtools::opt::Edge> > >, false>*)
 W std::_Hashtable<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, unsigned int>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, unsigned int> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::BasicBlock* const, unsigned int>, false>*)
 W std::_Hashtable<spvtools::ir::Function const*, spvtools::ir::Function const*, std::allocator<spvtools::ir::Function const*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Function const*>, std::hash<spvtools::ir::Function const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::ir::Function const*, false>*)
 W std::_Hashtable<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::ir::LoopDescriptor>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::ir::LoopDescriptor> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Function const*>, std::hash<spvtools::ir::Function const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Function const* const, spvtools::ir::LoopDescriptor>, false>*)
 W std::_Hashtable<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Function const*>, std::hash<spvtools::ir::Function const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness>, false>*)
 W std::_Hashtable<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Function const*>, std::hash<spvtools::ir::Function const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()
 W std::_Hashtable<spvtools::ir::Instruction const*, spvtools::ir::Instruction const*, std::allocator<spvtools::ir::Instruction const*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction const*>, std::hash<spvtools::ir::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::ir::Instruction const*, false>*)
 W std::_Hashtable<spvtools::ir::Instruction const*, std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction const*>, std::hash<spvtools::ir::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > >, false>*)
 W std::_Hashtable<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> > const&)
 W std::_Hashtable<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::ir::Instruction*, false>*)
 W std::_Hashtable<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
 W std::_Hashtable<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear()
 W std::_Hashtable<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::Instruction* const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Instruction* const, spvtools::ir::BasicBlock*>, false>*)
 W std::_Hashtable<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, spvtools::ir::Instruction*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Instruction* const, spvtools::ir::Instruction*>, false>*)
 W std::_Hashtable<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, spvtools::opt::SSAPropagator::PropStatus>, std::allocator<std::pair<spvtools::ir::Instruction* const, spvtools::opt::SSAPropagator::PropStatus> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Instruction* const, spvtools::opt::SSAPropagator::PropStatus>, false>*)
 W std::_Hashtable<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, unsigned long>, std::allocator<std::pair<spvtools::ir::Instruction* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Instruction* const, unsigned long>, false>*)
 W std::_Hashtable<spvtools::ir::Instruction, std::pair<spvtools::ir::Instruction const, unsigned int>, std::allocator<std::pair<spvtools::ir::Instruction const, unsigned int> >, std::__detail::_Select1st, spvtools::opt::ComputeSameValue, spvtools::opt::ValueTableHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Instruction const, unsigned int>, true>*)
 W std::_Hashtable<spvtools::ir::Instruction, std::pair<spvtools::ir::Instruction const, unsigned int>, std::allocator<std::pair<spvtools::ir::Instruction const, unsigned int> >, std::__detail::_Select1st, spvtools::opt::ComputeSameValue, spvtools::opt::ValueTableHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()
 W std::_Hashtable<spvtools::ir::Loop const*, spvtools::ir::Loop const*, std::allocator<spvtools::ir::Loop const*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Loop const*>, std::hash<spvtools::ir::Loop const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::ir::Loop const*, false>*)
 W std::_Hashtable<spvtools::ir::Loop*, spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Loop*>, std::hash<spvtools::ir::Loop*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::ir::Loop*, false>*)
 W std::_Hashtable<spvtools::ir::Loop*, std::pair<spvtools::ir::Loop* const, spvtools::ir::Loop*>, std::allocator<std::pair<spvtools::ir::Loop* const, spvtools::ir::Loop*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Loop*>, std::hash<spvtools::ir::Loop*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::ir::Loop* const, spvtools::ir::Loop*>, false>*)
 W std::_Hashtable<spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*>, std::__detail::_Identity, spvtools::opt::analysis::ConstantEqual, spvtools::opt::analysis::ConstantHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::opt::analysis::Constant const*, true>*)
 W std::_Hashtable<spvtools::opt::analysis::Constant const*, std::pair<spvtools::opt::analysis::Constant const* const, unsigned int>, std::allocator<std::pair<spvtools::opt::analysis::Constant const* const, unsigned int> >, std::__detail::_Select1st, std::equal_to<spvtools::opt::analysis::Constant const*>, std::hash<spvtools::opt::analysis::Constant const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::opt::analysis::Constant const* const, unsigned int>, false>*)
 W std::_Hashtable<spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Type const*, std::allocator<spvtools::opt::analysis::Type const*>, std::__detail::_Identity, std::equal_to<spvtools::opt::analysis::Type const*>, std::hash<spvtools::opt::analysis::Type const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<spvtools::opt::analysis::Type const*, false>*)
 W std::_Hashtable<spvtools::opt::analysis::Type const*, std::pair<spvtools::opt::analysis::Type const* const, unsigned int>, std::allocator<std::pair<spvtools::opt::analysis::Type const* const, unsigned int> >, std::__detail::_Select1st, spvtools::opt::analysis::CompareTypePointers, spvtools::opt::analysis::HashTypePointer, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, spvtools::opt::analysis::Type const* const&, unsigned long) const
 W std::_Hashtable<spvtools::opt::analysis::Type const*, std::pair<spvtools::opt::analysis::Type const* const, unsigned int>, std::allocator<std::pair<spvtools::opt::analysis::Type const* const, unsigned int> >, std::__detail::_Select1st, spvtools::opt::analysis::CompareTypePointers, spvtools::opt::analysis::HashTypePointer, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<spvtools::opt::analysis::Type const* const, unsigned int>, true>*)
 W std::_Hashtable<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::__detail::_Identity, std::equal_to<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::hash<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, true>*)
 W std::_Hashtable<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::__detail::_Select1st, std::equal_to<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::hash<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, true>*)
 W std::_Hashtable<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType>, std::pair<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> const, libspirv::Construct*>, std::allocator<std::pair<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> const, libspirv::Construct*> >, std::__detail::_Select1st, std::equal_to<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> >, libspirv::bb_constr_type_pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> const, libspirv::Construct*>, true>*)
 W std::_Hashtable<std::string, std::pair<std::string const, glslang::TIntermOperator*>, std::allocator<std::pair<std::string const, glslang::TIntermOperator*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(unsigned long, std::__detail::_Hash_node<std::pair<std::string const, glslang::TIntermOperator*>, true>*)
 W std::_Hashtable<std::string, std::pair<std::string const, glslang::TIntermOperator*>, std::allocator<std::pair<std::string const, glslang::TIntermOperator*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, false>)
 W std::_Hashtable<std::string, std::pair<std::string const, glslang::TIntermOperator*>, std::allocator<std::pair<std::string const, glslang::TIntermOperator*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::equal_range(std::string const&)
 W std::_Hashtable<std::string, std::pair<std::string const, glslang::TIntermSymbol const*>, std::allocator<std::pair<std::string const, glslang::TIntermSymbol const*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, glslang::TIntermSymbol const*>, true>*)
 W std::_Hashtable<std::string, std::pair<std::string const, glslang::TIntermSymbol const*>, std::allocator<std::pair<std::string const, glslang::TIntermSymbol const*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)
 W std::_Hashtable<std::string, std::pair<std::string const, spv::Function*>, std::allocator<std::pair<std::string const, spv::Function*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, spv::Function*>, true>*)
 W std::_Hashtable<std::string, std::pair<std::string const, unsigned int>, std::allocator<std::pair<std::string const, unsigned int> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, unsigned int>, true>*)
 W std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::string, true>*)
 W std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
 W std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::clear()
 W std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::count(std::string const&) const
 W std::_Hashtable<std::unique_ptr<spvtools::opt::SENode, std::default_delete<spvtools::opt::SENode> >, std::unique_ptr<spvtools::opt::SENode, std::default_delete<spvtools::opt::SENode> >, std::allocator<std::unique_ptr<spvtools::opt::SENode, std::default_delete<spvtools::opt::SENode> > >, std::__detail::_Identity, spvtools::opt::ScalarEvolutionAnalysis::NodePointersEquality, spvtools::opt::SENodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::unique_ptr<spvtools::opt::SENode, std::default_delete<spvtools::opt::SENode> >, true>*)
 W std::_Hashtable<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >, std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >, std::allocator<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> > >, std::__detail::_Identity, spvtools::opt::analysis::CompareTypeUniquePointers, spvtools::opt::analysis::HashTypeUniquePointer, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >, true>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, bool>, std::allocator<std::pair<unsigned int const, bool> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, bool>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, libspirv::BasicBlock>, std::allocator<std::pair<unsigned int const, libspirv::BasicBlock> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, libspirv::BasicBlock>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, libspirv::Function*>, std::allocator<std::pair<unsigned int const, libspirv::Function*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, libspirv::Function*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, libspirv::IdType>, std::allocator<std::pair<unsigned int const, libspirv::IdType> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, libspirv::IdType>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spv_ext_inst_type_t>, std::allocator<std::pair<unsigned int const, spv_ext_inst_type_t> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spv_ext_inst_type_t>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::ir::BasicBlock*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(unsigned int const&) const
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::ir::Function*>, std::allocator<std::pair<unsigned int const, spvtools::ir::Function*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::ir::Function*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::ir::Instruction*>, std::allocator<std::pair<unsigned int const, spvtools::ir::Instruction*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::ir::Instruction*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::ir::Loop*>, std::allocator<std::pair<unsigned int const, spvtools::ir::Loop*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::ir::Loop*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, std::allocator<std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, std::allocator<std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, std::allocator<std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(unsigned int const&) const
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::SSARewriter::PhiCandidate>, std::allocator<std::pair<unsigned int const, spvtools::opt::SSARewriter::PhiCandidate> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::opt::SSARewriter::PhiCandidate>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Constant const*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Constant const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::opt::analysis::Constant const*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Constant const*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Constant const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<unsigned int const, spvtools::opt::analysis::Constant const*>, false, false>)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Constant const*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Constant const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(unsigned int const&) const
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData>, false, false>)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Type*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Type*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::opt::analysis::Type*>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Type*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Type*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::utils::BitVector>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::utils::BitVector>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::utils::BitVector>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, spvtools::utils::BitVector>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >, std::allocator<std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::set<SpvExecutionMode_, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> > >, std::allocator<std::pair<unsigned int const, std::set<SpvExecutionMode_, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::set<SpvExecutionMode_, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::set<SpvExecutionModel_, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> > >, std::allocator<std::pair<unsigned int const, std::set<SpvExecutionModel_, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::set<SpvExecutionModel_, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::string>, std::allocator<std::pair<unsigned int const, std::string> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<unsigned int, std::pair<unsigned int const, std::string>, std::allocator<std::pair<unsigned int const, std::string> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::string>, std::allocator<std::pair<unsigned int const, std::string> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::string>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > > > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > >, std::allocator<std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > >, std::allocator<std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::allocator<std::pair<unsigned int const, std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::allocator<std::pair<unsigned int const, std::vector<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::vector<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*)
 W std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned long>, std::allocator<std::pair<unsigned int const, unsigned long> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned long>, false>*)
 W std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> > const&)
 W std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<unsigned int, false>*)
 W std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear()
 W std::_Hashtable<unsigned long, unsigned long, std::allocator<unsigned long>, std::__detail::_Identity, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<unsigned long, false>*)
 W std::_Hashtable<unsigned long, unsigned long, std::allocator<unsigned long>, std::__detail::_Identity, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
 W std::_Rb_tree<SpvExecutionMode_, SpvExecutionMode_, std::_Identity<SpvExecutionMode_>, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> >::_M_erase(std::_Rb_tree_node<SpvExecutionMode_>*)
 W std::_Rb_tree<SpvExecutionModel_, SpvExecutionModel_, std::_Identity<SpvExecutionModel_>, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> >::_M_erase(std::_Rb_tree_node<SpvExecutionModel_>*)
 W std::_Rb_tree<SpvExecutionModel_, SpvExecutionModel_, std::_Identity<SpvExecutionModel_>, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> >::_M_get_insert_unique_pos(SpvExecutionModel_ const&)
 W std::_Rb_tree<TIntermNode const*, TIntermNode const*, std::_Identity<TIntermNode const*>, std::less<TIntermNode const*>, std::allocator<TIntermNode const*> >::_M_erase(std::_Rb_tree_node<TIntermNode const*>*)
 W std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, glslang::HlslParseContext::tInterstageIoData, std::_Identity<glslang::HlslParseContext::tInterstageIoData>, std::less<glslang::HlslParseContext::tInterstageIoData>, std::allocator<glslang::HlslParseContext::tInterstageIoData> >::_M_copy(std::_Rb_tree_node<glslang::HlslParseContext::tInterstageIoData> const*, std::_Rb_tree_node<glslang::HlslParseContext::tInterstageIoData>*)
 W std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, glslang::HlslParseContext::tInterstageIoData, std::_Identity<glslang::HlslParseContext::tInterstageIoData>, std::less<glslang::HlslParseContext::tInterstageIoData>, std::allocator<glslang::HlslParseContext::tInterstageIoData> >::_M_erase(std::_Rb_tree_node<glslang::HlslParseContext::tInterstageIoData>*)
 W std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, glslang::HlslParseContext::tInterstageIoData, std::_Identity<glslang::HlslParseContext::tInterstageIoData>, std::less<glslang::HlslParseContext::tInterstageIoData>, std::allocator<glslang::HlslParseContext::tInterstageIoData> >::equal_range(glslang::HlslParseContext::tInterstageIoData const&)
 W std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*>, std::_Select1st<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> >, std::less<glslang::HlslParseContext::tInterstageIoData>, glslang::pool_allocator<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> > >::_M_erase(std::_Rb_tree_node<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> >*)
 W std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*>, std::_Select1st<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> >, std::less<glslang::HlslParseContext::tInterstageIoData>, glslang::pool_allocator<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> >, glslang::HlslParseContext::tInterstageIoData const&)
 W std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*>, std::_Select1st<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> >, std::less<glslang::HlslParseContext::tInterstageIoData>, glslang::pool_allocator<std::pair<glslang::HlslParseContext::tInterstageIoData const, glslang::TVariable*> > >::_M_get_insert_unique_pos(glslang::HlslParseContext::tInterstageIoData const&)
 W std::_Rb_tree<glslang::TBuiltInVariable, std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*>, std::_Select1st<std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*> >, std::less<glslang::TBuiltInVariable>, glslang::pool_allocator<std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*> > >::_M_erase(std::_Rb_tree_node<std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*> >*)
 W std::_Rb_tree<glslang::TBuiltInVariable, std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*>, std::_Select1st<std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*> >, std::less<glslang::TBuiltInVariable>, glslang::pool_allocator<std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<glslang::TBuiltInVariable const, glslang::TSymbol*> >, glslang::TBuiltInVariable const&)
 W std::_Rb_tree<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds>, std::_Select1st<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> >, std::less<glslang::TVector<glslang::TTypeLoc> const*>, glslang::pool_allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> > >::_M_erase(std::_Rb_tree_node<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> >*)
 W std::_Rb_tree<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds>, std::_Select1st<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> >, std::less<glslang::TVector<glslang::TTypeLoc> const*>, glslang::pool_allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> >, glslang::TVector<glslang::TTypeLoc> const* const&)
 W std::_Rb_tree<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds>, std::_Select1st<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> >, std::less<glslang::TVector<glslang::TTypeLoc> const*>, glslang::pool_allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> > >::find(glslang::TVector<glslang::TTypeLoc> const* const&)
 W std::_Rb_tree<glslang::TVector<glslang::TTypeLoc>*, std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*>, std::_Select1st<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> >, std::less<glslang::TVector<glslang::TTypeLoc>*>, glslang::pool_allocator<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> > >::_M_erase(std::_Rb_tree_node<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> >*)
 W std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
 W std::_Rb_tree<int, std::pair<int const, glslang::HlslParseContext::TFlattenData>, std::_Select1st<std::pair<int const, glslang::HlslParseContext::TFlattenData> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::HlslParseContext::TFlattenData> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, glslang::HlslParseContext::TFlattenData> >*)
 W std::_Rb_tree<int, std::pair<int const, glslang::HlslParseContext::TFlattenData>, std::_Select1st<std::pair<int const, glslang::HlslParseContext::TFlattenData> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::HlslParseContext::TFlattenData> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, glslang::HlslParseContext::TFlattenData> >, int const&)
 W std::_Rb_tree<int, std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*>, std::_Select1st<std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*> >*)
 W std::_Rb_tree<int, std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*>, std::_Select1st<std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, glslang::HlslParseContext::tShadowTextureSymbols*> >, int const&)
 W std::_Rb_tree<int, std::pair<int const, glslang::TPpContext::MacroSymbol>, std::_Select1st<std::pair<int const, glslang::TPpContext::MacroSymbol> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TPpContext::MacroSymbol> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, glslang::TPpContext::MacroSymbol> >*)
 W std::_Rb_tree<int, std::pair<int const, glslang::TPpContext::MacroSymbol>, std::_Select1st<std::pair<int const, glslang::TPpContext::MacroSymbol> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TPpContext::MacroSymbol> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, glslang::TPpContext::MacroSymbol> >, int const&)
 W std::_Rb_tree<int, std::pair<int const, glslang::TPpContext::MacroSymbol>, std::_Select1st<std::pair<int const, glslang::TPpContext::MacroSymbol> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TPpContext::MacroSymbol> > >::find(int const&)
 W std::_Rb_tree<int, std::pair<int const, glslang::TVariable*>, std::_Select1st<std::pair<int const, glslang::TVariable*> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVariable*> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, glslang::TVariable*> >*)
 W std::_Rb_tree<int, std::pair<int const, glslang::TVariable*>, std::_Select1st<std::pair<int const, glslang::TVariable*> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVariable*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, glslang::TVariable*> >, int const&)
 W std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*)
 W std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, int> >, int const&)
 W std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_unique_pos(int const&)
 W std::_Rb_tree<spv::Capability, spv::Capability, std::_Identity<spv::Capability>, std::less<spv::Capability>, std::allocator<spv::Capability> >::_M_erase(std::_Rb_tree_node<spv::Capability>*)
 W std::_Rb_tree<spvtools::ir::BasicBlock const*, std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > >, std::_Select1st<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > >, std::less<spvtools::ir::BasicBlock const*>, std::allocator<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > >*)
 W std::_Rb_tree<spvtools::ir::BasicBlock const*, std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > >, std::_Select1st<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > >, std::less<spvtools::ir::BasicBlock const*>, std::allocator<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > >, spvtools::ir::BasicBlock const* const&)
 W std::_Rb_tree<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis>, std::_Select1st<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> >, std::less<spvtools::ir::Function const*>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> >*)
 W std::_Rb_tree<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis>, std::_Select1st<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> >, std::less<spvtools::ir::Function const*>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> > >::erase(spvtools::ir::Function const* const&)
 W std::_Rb_tree<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis>, std::_Select1st<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> >, std::less<spvtools::ir::Function const*>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> >*)
 W std::_Rb_tree<spvtools::ir::Instruction const*, std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*>, std::_Select1st<std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*> >, std::less<spvtools::ir::Instruction const*>, std::allocator<std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*> >*)
 W std::_Rb_tree<spvtools::ir::Instruction const*, std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*>, std::_Select1st<std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*> >, std::less<spvtools::ir::Instruction const*>, std::allocator<std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction const* const, spvtools::opt::SENode*> >, spvtools::ir::Instruction const* const&)
 W std::_Rb_tree<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::_Identity<spvtools::ir::Instruction*>, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >::_M_erase(std::_Rb_tree_node<spvtools::ir::Instruction*>*)
 W std::_Rb_tree<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >, std::_Select1st<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > >, std::less<spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > >*)
 W std::_Rb_tree<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >, std::_Select1st<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > >, std::less<spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > >, spvtools::ir::Instruction* const&)
 W std::_Rb_tree<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, unsigned long>, std::_Select1st<std::pair<spvtools::ir::Instruction* const, unsigned long> >, std::less<spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Instruction* const, unsigned long> >*)
 W std::_Rb_tree<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, unsigned long>, std::_Select1st<std::pair<spvtools::ir::Instruction* const, unsigned long> >, std::less<spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, unsigned long> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction* const, unsigned long> >, spvtools::ir::Instruction* const&)
 W std::_Rb_tree<spvtools::ir::Loop const*, spvtools::ir::Loop const*, std::_Identity<spvtools::ir::Loop const*>, std::less<spvtools::ir::Loop const*>, std::allocator<spvtools::ir::Loop const*> >::_M_erase(std::_Rb_tree_node<spvtools::ir::Loop const*>*)
 W std::_Rb_tree<spvtools::ir::Loop const*, std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*>, std::_Select1st<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> >, std::less<spvtools::ir::Loop const*>, std::allocator<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> >*)
 W std::_Rb_tree<spvtools::ir::Loop const*, std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*>, std::_Select1st<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> >, std::less<spvtools::ir::Loop const*>, std::allocator<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> >, spvtools::ir::Loop const* const&)
 W std::_Rb_tree<spvtools::ir::Loop const*, std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > >, std::_Select1st<std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > > >, std::less<spvtools::ir::Loop const*>, std::allocator<std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > > >*)
 W std::_Rb_tree<spvtools::ir::Loop const*, std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > >, std::_Select1st<std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > > >, std::less<spvtools::ir::Loop const*>, std::allocator<std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Loop const* const, std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > > > >, spvtools::ir::Loop const* const&)
 W std::_Rb_tree<spvtools::opt::Edge, spvtools::opt::Edge, std::_Identity<spvtools::opt::Edge>, std::less<spvtools::opt::Edge>, std::allocator<spvtools::opt::Edge> >::_M_erase(std::_Rb_tree_node<spvtools::opt::Edge>*)
 W std::_Rb_tree<spvtools::opt::SENode*, std::pair<spvtools::opt::SENode* const, long>, std::_Select1st<std::pair<spvtools::opt::SENode* const, long> >, std::less<spvtools::opt::SENode*>, std::allocator<std::pair<spvtools::opt::SENode* const, long> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::opt::SENode* const, long> >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::_Identity<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::_M_erase(std::_Rb_tree_node<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::_Identity<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::_M_get_insert_unique_pos(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::_Identity<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::find(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> > >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> > >::_M_get_insert_unique_pos(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> > >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> > >::_M_get_insert_unique_pos(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> > >::find(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> > >::find(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> > >::_M_get_insert_unique_pos(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> > >::find(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > > >::_M_copy(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > > const*, std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >*)
 W std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >*)
 W std::_Rb_tree<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >, std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >, std::_Identity<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >, std::less<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >, std::allocator<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > > >::_M_erase(std::_Rb_tree_node<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >*)
 W std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, spvtools::opt::analysis::UserEntryLess, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >*)
 W std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, spvtools::opt::analysis::UserEntryLess, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::equal_range(std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> const&)
 W std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, spvtools::opt::analysis::UserEntryLess, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::find(std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> const&) const
 W std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::_M_copy(std::_Rb_tree_node<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > const*, std::_Rb_tree_node<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >*)
 W std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >*)
 W std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::_M_get_insert_unique_pos(std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> const&)
 W std::_Rb_tree<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::_Identity<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >::_M_erase(std::_Rb_tree_node<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >*)
 W std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node<std::string>*)
 W std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)
 W std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_unique_pos(std::string const&)
 W std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const
 W std::_Rb_tree<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<unsigned int, std::allocator<unsigned int> >, std::_Identity<std::vector<unsigned int, std::allocator<unsigned int> > >, std::less<std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >::_M_erase(std::_Rb_tree_node<std::vector<unsigned int, std::allocator<unsigned int> > >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::_Select1st<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::_Select1st<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, unsigned int const&)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, spvtools::ir::Instruction*>, std::_Select1st<std::pair<unsigned int const, spvtools::ir::Instruction*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::ir::Instruction*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, spvtools::ir::Instruction*> >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, spvtools::opt::DominatorTreeNode>, std::_Select1st<std::pair<unsigned int const, spvtools::opt::DominatorTreeNode> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::opt::DominatorTreeNode> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, spvtools::opt::DominatorTreeNode> >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > >, std::_Select1st<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > >, std::_Select1st<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > >, unsigned int const&)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > >, std::_Select1st<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > > >::_M_get_insert_unique_pos(unsigned int const&)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > >, std::_Select1st<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > >, std::_Select1st<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > >, std::_Select1st<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > > const*, std::_Rb_tree_node<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > >, std::_Select1st<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > >, std::_Select1st<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > > > >, unsigned int const&)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> > const*, std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >*)
 W std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >*)
 W std::_Rb_tree<unsigned int, unsigned int, std::_Identity<unsigned int>, std::less<unsigned int>, std::allocator<unsigned int> >::_M_copy(std::_Rb_tree_node<unsigned int> const*, std::_Rb_tree_node<unsigned int>*)
 W std::_Rb_tree<unsigned int, unsigned int, std::_Identity<unsigned int>, std::less<unsigned int>, std::allocator<unsigned int> >::_M_erase(std::_Rb_tree_node<unsigned int>*)
 W std::_Rb_tree_iterator<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> > std::_Rb_tree<glslang::TVector<glslang::TTypeLoc>*, std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*>, std::_Select1st<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> >, std::less<glslang::TVector<glslang::TTypeLoc>*>, glslang::pool_allocator<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<glslang::TVector<glslang::TTypeLoc>* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<glslang::TVector<glslang::TTypeLoc>* const, glslang::TVector<glslang::TTypeLoc>*> >, std::piecewise_construct_t const&, std::tuple<glslang::TVector<glslang::TTypeLoc>* const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<int const, glslang::HlslParseContext::TFlattenData> > std::_Rb_tree<int, std::pair<int const, glslang::HlslParseContext::TFlattenData>, std::_Select1st<std::pair<int const, glslang::HlslParseContext::TFlattenData> >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::HlslParseContext::TFlattenData> > >::_M_insert_<std::pair<int, glslang::HlslParseContext::TFlattenData> >(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<int, glslang::HlslParseContext::TFlattenData>&&)
 W std::_Rb_tree_iterator<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> > std::_Rb_tree<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis>, std::_Select1st<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> >, std::less<spvtools::ir::Function const*>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<spvtools::ir::Function const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Function const* const, spvtools::opt::DominatorAnalysis> >, std::piecewise_construct_t const&, std::tuple<spvtools::ir::Function const* const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> > std::_Rb_tree<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis>, std::_Select1st<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> >, std::less<spvtools::ir::Function const*>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<spvtools::ir::Function const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Function const* const, spvtools::opt::PostDominatorAnalysis> >, std::piecewise_construct_t const&, std::tuple<spvtools::ir::Function const* const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::_M_insert_unique_<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> const&>(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> const&)
 W std::_Rb_tree_iterator<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> > std::_Rb_tree<spvtools::ir::Loop const*, std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*>, std::_Select1st<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> >, std::less<spvtools::ir::Loop const*>, std::allocator<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<spvtools::ir::Loop const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<spvtools::ir::Loop const* const, spvtools::ir::Loop const*> >, std::piecewise_construct_t const&, std::tuple<spvtools::ir::Loop const* const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> >, std::piecewise_construct_t const&, std::tuple<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> >, std::piecewise_construct_t const&, std::tuple<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::piecewise_construct_t const&, std::tuple<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > > std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > >, std::_Select1st<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned int const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned int const, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> > > >, std::piecewise_construct_t const&, std::tuple<unsigned int const&>&&, std::tuple<>&&)
 W std::_Rb_tree_iterator<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > > std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > >, std::_Select1st<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned int const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > >, std::piecewise_construct_t const&, std::tuple<unsigned int const&>&&, std::tuple<>&&)
 W std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
 W std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 W std::_Sp_counted_ptr_inplace<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>, std::allocator<std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 W std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 W std::_Tuple_impl<1ul, libspirv::Decoration, libspirv::Instruction, libspirv::Instruction, std::_Placeholder<1> >::~_Tuple_impl()
 W std::_Tuple_impl<3ul, libspirv::Decoration, libspirv::Instruction, libspirv::Instruction, std::_Placeholder<1> >::_Tuple_impl(libspirv::Decoration const&, libspirv::Instruction const&, libspirv::Instruction const&, std::_Placeholder<1> const&)
 W std::_Tuple_impl<3ul, libspirv::Decoration, libspirv::Instruction, libspirv::Instruction, std::_Placeholder<1> >::~_Tuple_impl()
 W std::__basic_future<unsigned int>::_Reset::~_Reset()
 W std::__basic_future<void>::_Reset::~_Reset()
 W std::__detail::_Equality<spvtools::ir::Instruction const*, std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction const*>, std::hash<spvtools::ir::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::_M_equal(std::_Hashtable<spvtools::ir::Instruction const*, std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction const*>, std::hash<spvtools::ir::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) const
 W std::__detail::_Hash_node<std::pair<unsigned int const, libspirv::BasicBlock>, false>* std::_Hashtable<unsigned int, std::pair<unsigned int const, libspirv::BasicBlock>, std::allocator<std::pair<unsigned int const, libspirv::BasicBlock> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_node<std::pair<unsigned int const, libspirv::BasicBlock> const&>(std::pair<unsigned int const, libspirv::BasicBlock> const&)
 W std::__detail::_Hash_node<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, false>* std::_Hashtable<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_node<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > const&>(std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > const&)
 W std::__detail::_Map_base<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > >, std::allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, std::hash<glslang::TVector<glslang::TTypeLoc> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](glslang::TVector<glslang::TTypeLoc> const* const&)
 W std::__detail::_Map_base<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > >, std::allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::vector<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, std::hash<glslang::TVector<glslang::TTypeLoc> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](glslang::TVector<glslang::TTypeLoc> const*&&)
 W std::__detail::_Map_base<glslang::TVector<glslang::TTypeLoc> const*, std::pair<glslang::TVector<glslang::TTypeLoc> const* const, unsigned int>, std::allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, unsigned int> >, std::__detail::_Select1st, std::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, std::hash<glslang::TVector<glslang::TTypeLoc> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](glslang::TVector<glslang::TTypeLoc> const* const&)
 W std::__detail::_Map_base<int, std::pair<int const, std::vector<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::vector<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)
 W std::__detail::_Map_base<libspirv::BasicBlock const*, std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, std::allocator<std::pair<libspirv::BasicBlock const* const, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > > >, std::__detail::_Select1st, std::equal_to<libspirv::BasicBlock const*>, std::hash<libspirv::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](libspirv::BasicBlock const*&&)
 W std::__detail::_Map_base<spvtools::ir::BasicBlock const*, std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > >, std::allocator<std::pair<spvtools::ir::BasicBlock const* const, std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock const*>, std::hash<spvtools::ir::BasicBlock const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::BasicBlock const*&&)
 W std::__detail::_Map_base<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::BasicBlock* const&)
 W std::__detail::_Map_base<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, spvtools::ir::Instruction*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::BasicBlock* const&)
 W std::__detail::_Map_base<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, std::vector<spvtools::opt::Edge, std::allocator<spvtools::opt::Edge> > >, std::allocator<std::pair<spvtools::ir::BasicBlock* const, std::vector<spvtools::opt::Edge, std::allocator<spvtools::opt::Edge> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::BasicBlock*&&)
 W std::__detail::_Map_base<spvtools::ir::BasicBlock*, std::pair<spvtools::ir::BasicBlock* const, unsigned int>, std::allocator<std::pair<spvtools::ir::BasicBlock* const, unsigned int> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::BasicBlock*>, std::hash<spvtools::ir::BasicBlock*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::BasicBlock* const&)
 W std::__detail::_Map_base<spvtools::ir::Instruction const*, std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<spvtools::ir::Instruction const* const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction const*>, std::hash<spvtools::ir::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::Instruction const*&&)
 W std::__detail::_Map_base<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::Instruction* const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::Instruction* const&)
 W std::__detail::_Map_base<spvtools::ir::Instruction*, std::pair<spvtools::ir::Instruction* const, spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, spvtools::ir::Instruction*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::Instruction* const&)
 W std::__detail::_Map_base<spvtools::ir::Loop*, std::pair<spvtools::ir::Loop* const, spvtools::ir::Loop*>, std::allocator<std::pair<spvtools::ir::Loop* const, spvtools::ir::Loop*> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Loop*>, std::hash<spvtools::ir::Loop*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](spvtools::ir::Loop* const&)
 W std::__detail::_Map_base<spvtools::opt::analysis::Type const*, std::pair<spvtools::opt::analysis::Type const* const, unsigned int>, std::allocator<std::pair<spvtools::opt::analysis::Type const* const, unsigned int> >, std::__detail::_Select1st, spvtools::opt::analysis::CompareTypePointers, spvtools::opt::analysis::HashTypePointer, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](spvtools::opt::analysis::Type const*&&)
 W std::__detail::_Map_base<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType>, std::pair<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> const, libspirv::Construct*>, std::allocator<std::pair<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> const, libspirv::Construct*> >, std::__detail::_Select1st, std::equal_to<std::pair<libspirv::BasicBlock const*, libspirv::ConstructType> >, libspirv::bb_constr_type_pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::pair<libspirv::BasicBlock const*, libspirv::ConstructType>&&)
 W std::__detail::_Map_base<std::string, std::pair<std::string const, glslang::TIntermSymbol const*>, std::allocator<std::pair<std::string const, glslang::TIntermSymbol const*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)
 W std::__detail::_Map_base<std::string, std::pair<std::string const, spv::Function*>, std::allocator<std::pair<std::string const, spv::Function*> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, libspirv::IdType>, std::allocator<std::pair<unsigned int const, libspirv::IdType> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::at(unsigned int const&) const
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::ir::BasicBlock*>, std::allocator<std::pair<unsigned int const, spvtools::ir::BasicBlock*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::ir::Instruction*>, std::allocator<std::pair<unsigned int const, spvtools::ir::Instruction*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::ir::Loop*>, std::allocator<std::pair<unsigned int const, spvtools::ir::Loop*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, std::allocator<std::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::DecorationManager::TargetData> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Type*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Type*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, spvtools::opt::analysis::Type*>, std::allocator<std::pair<unsigned int const, spvtools::opt::analysis::Type*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >, std::allocator<std::pair<unsigned int const, std::list<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::set<SpvExecutionMode_, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> > >, std::allocator<std::pair<unsigned int const, std::set<SpvExecutionMode_, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::set<SpvExecutionModel_, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> > >, std::allocator<std::pair<unsigned int const, std::set<SpvExecutionModel_, std::less<SpvExecutionModel_>, std::allocator<SpvExecutionModel_> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > >, std::allocator<std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > >, std::allocator<std::pair<unsigned int const, std::vector<spv::Instruction*, std::allocator<spv::Instruction*> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::allocator<std::pair<unsigned int const, std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::allocator<std::pair<unsigned int const, std::vector<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::at(unsigned int const&) const
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::pair<unsigned int const, std::vector<unsigned int, std::allocator<unsigned int> > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::at(unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)
 W std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)
 W std::__future_base::_Async_state_common::_M_run_deferred()
 W std::__future_base::_Async_state_common::~_Async_state_common()
 W std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::~_Async_state_impl()
 W std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::~_Async_state_impl()
 W std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_M_run_deferred()
 W std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::~_Deferred_state()
 W std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_M_run_deferred()
 W std::__future_base::_Deferred_state<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::~_Deferred_state()
 W std::__future_base::_Result<unsigned int>::_M_destroy()
 W std::__future_base::_Result<unsigned int>::~_Result()
 W std::__future_base::_Result<void>::_M_destroy()
 W std::__future_base::_Result<void>::~_Result()
 W std::__future_base::_State_base::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>&, bool&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > std::operator+<char, std::char_traits<char>, glslang::pool_allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::_M_leak_hard()
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::_M_mutate(unsigned long, unsigned long, unsigned long)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::_Rep::_M_refcopy()
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::_Rep::_S_create(unsigned long, unsigned long, glslang::pool_allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::append(char const*)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::append(char const*, unsigned long)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::append(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::assign(char const*, unsigned long)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::assign(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::basic_string(char const*, glslang::pool_allocator<char> const&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, unsigned long, unsigned long)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::compare(char const*) const
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::compare(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&) const
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::compare(unsigned long, unsigned long, char const*) const
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::insert(unsigned long, char const*, unsigned long)
 W std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >::reserve(unsigned long)
 W std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >::reserve(unsigned long)
 W std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()
 W std::ctype<char>::do_widen(char) const
 W std::dec(std::ios_base&)
 W std::deque<bool, std::allocator<bool> >::_M_reallocate_map(unsigned long, bool)
 W std::deque<libspirv::Instruction, std::allocator<libspirv::Instruction> >::_M_destroy_data_aux(std::_Deque_iterator<libspirv::Instruction, libspirv::Instruction&, libspirv::Instruction*>, std::_Deque_iterator<libspirv::Instruction, libspirv::Instruction&, libspirv::Instruction*>)
 W std::deque<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> >::_M_reallocate_map(unsigned long, bool)
 W std::deque<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::_M_reallocate_map(unsigned long, bool)
 W std::deque<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >::deque(std::deque<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > > const&)
 W std::deque<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >::deque(std::deque<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > > const&)
 W std::deque<unsigned int, std::allocator<unsigned int> >::_M_reallocate_map(unsigned long, bool)
 W std::function<spv_result_t (std::string const&)>::operator()(std::string const&) const
 W std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>::operator=(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>&&)
 W std::future<std::result_of<void (Etc::Image::*(Etc::Image* const, int&, unsigned int&))(unsigned int, unsigned int)>::type> std::async<void (Etc::Image::*)(unsigned int, unsigned int), Etc::Image* const, int&, unsigned int&>(std::launch, void (Etc::Image::*&&)(unsigned int, unsigned int), Etc::Image* const&&, int&, unsigned int&)
 W std::hex(std::ios_base&)
 W std::istream& spvutils::operator>><spvutils::FloatProxy<double>, spvutils::HexFloatTraits<spvutils::FloatProxy<double> > >(std::istream&, spvutils::HexFloat<spvutils::FloatProxy<double>, spvutils::HexFloatTraits<spvutils::FloatProxy<double> > >&)
 W std::istream& spvutils::operator>><spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >(std::istream&, spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >&)
 W std::istream& spvutils::operator>><spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > >(std::istream&, spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > >&)
 W std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > >::push_back(std::function<spv_result_t (libspirv::Instruction const&)>&&)
 W std::map<glslang::TVector<glslang::TTypeLoc> const*, glslang::HlslParseContext::tIoKinds, std::less<glslang::TVector<glslang::TTypeLoc> const*>, glslang::pool_allocator<std::pair<glslang::TVector<glslang::TTypeLoc> const* const, glslang::HlslParseContext::tIoKinds> > >::operator[](glslang::TVector<glslang::TTypeLoc> const*&&)
 W std::map<spvtools::ir::Instruction*, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >, std::less<spvtools::ir::Instruction*>, std::allocator<std::pair<spvtools::ir::Instruction* const, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > > > >::operator[](spvtools::ir::Instruction* const&)
 W std::map<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, bool, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, bool> > >::operator[](std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::map<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TExtensionBehavior> > >::operator[](std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&&)
 W std::map<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, int, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> > >::operator[](std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::map<unsigned int, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::list<std::function<spv_result_t (libspirv::Instruction const&)>, std::allocator<std::function<spv_result_t (libspirv::Instruction const&)> > > > > >::operator[](unsigned int&&)
 W std::map<unsigned int, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > > >::at(unsigned int const&) const
 W std::ostream& spvutils::operator<< <spvutils::FloatProxy<double>, spvutils::HexFloatTraits<spvutils::FloatProxy<double> > >(std::ostream&, spvutils::HexFloat<spvutils::FloatProxy<double>, spvutils::HexFloatTraits<spvutils::FloatProxy<double> > > const&)
 W std::ostream& spvutils::operator<< <spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >(std::ostream&, spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > > const&)
 W std::ostream& spvutils::operator<< <spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > >(std::ostream&, spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > const&)
 W std::ostream_iterator<std::string, char, std::char_traits<char> > std::transform<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::ostream_iterator<std::string, char, std::char_traits<char> >, std::_Bind<std::_Mem_fn<std::string (libspirv::ValidationState_t::*)(unsigned int) const> (std::reference_wrapper<libspirv::ValidationState_t>, std::_Placeholder<1>)> >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::ostream_iterator<std::string, char, std::char_traits<char> >, std::_Bind<std::_Mem_fn<std::string (libspirv::ValidationState_t::*)(unsigned int) const> (std::reference_wrapper<libspirv::ValidationState_t>, std::_Placeholder<1>)>)
 W std::pair<std::_Rb_tree_iterator<SpvExecutionMode_>, bool> std::_Rb_tree<SpvExecutionMode_, SpvExecutionMode_, std::_Identity<SpvExecutionMode_>, std::less<SpvExecutionMode_>, std::allocator<SpvExecutionMode_> >::_M_insert_unique<SpvExecutionMode_ const&>(SpvExecutionMode_ const&)
 W std::pair<std::_Rb_tree_iterator<TIntermNode const*>, bool> std::_Rb_tree<TIntermNode const*, TIntermNode const*, std::_Identity<TIntermNode const*>, std::less<TIntermNode const*>, std::allocator<TIntermNode const*> >::_M_insert_unique<TIntermNode const*>(TIntermNode const*&&)
 W std::pair<std::_Rb_tree_iterator<glslang::HlslParseContext::tInterstageIoData>, bool> std::_Rb_tree<glslang::HlslParseContext::tInterstageIoData, glslang::HlslParseContext::tInterstageIoData, std::_Identity<glslang::HlslParseContext::tInterstageIoData>, std::less<glslang::HlslParseContext::tInterstageIoData>, std::allocator<glslang::HlslParseContext::tInterstageIoData> >::_M_insert_unique<glslang::HlslParseContext::tInterstageIoData>(glslang::HlslParseContext::tInterstageIoData&&)
 W std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
 W std::pair<std::_Rb_tree_iterator<spv::Capability>, bool> std::_Rb_tree<spv::Capability, spv::Capability, std::_Identity<spv::Capability>, std::less<spv::Capability>, std::allocator<spv::Capability> >::_M_insert_unique<spv::Capability const&>(spv::Capability const&)
 W std::pair<std::_Rb_tree_iterator<spvtools::ir::Instruction*>, bool> std::_Rb_tree<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::_Identity<spvtools::ir::Instruction*>, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >::_M_insert_unique<spvtools::ir::Instruction* const&>(spvtools::ir::Instruction* const&)
 W std::pair<std::_Rb_tree_iterator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, bool> std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::_Identity<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::_M_insert_unique<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W std::pair<std::_Rb_tree_iterator<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >, bool> std::_Rb_tree<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >, std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >, std::_Identity<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >, std::less<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >, std::allocator<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > > >::_M_emplace_unique<std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> > >(std::basic_string<char32_t, std::char_traits<char32_t>, std::allocator<char32_t> >&&)
 W std::pair<std::_Rb_tree_iterator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, bool> std::_Rb_tree<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::_Identity<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, spvtools::opt::analysis::UserEntryLess, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >::_M_insert_unique<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >(std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>&&)
 W std::pair<std::_Rb_tree_iterator<std::pair<spvtools::opt::SENode* const, long> >, bool> std::_Rb_tree<spvtools::opt::SENode*, std::pair<spvtools::opt::SENode* const, long>, std::_Select1st<std::pair<spvtools::opt::SENode* const, long> >, std::less<spvtools::opt::SENode*>, std::allocator<std::pair<spvtools::opt::SENode* const, long> > >::_M_insert_unique<std::pair<spvtools::opt::SENode* const, long> const&>(std::pair<spvtools::opt::SENode* const, long> const&)
 W std::pair<std::_Rb_tree_iterator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, bool> std::_Rb_tree<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::_Identity<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::less<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::allocator<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >::_M_insert_unique<std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >(std::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>&&)
 W std::pair<std::_Rb_tree_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> >, bool> std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*>, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> > >::_M_insert_unique<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> const>(std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> const&&)
 W std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, spvtools::opt::DominatorTreeNode> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, spvtools::opt::DominatorTreeNode>, std::_Select1st<std::pair<unsigned int const, spvtools::opt::DominatorTreeNode> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, spvtools::opt::DominatorTreeNode> > >::_M_emplace_unique<std::pair<unsigned int, spvtools::opt::DominatorTreeNode> >(std::pair<unsigned int, spvtools::opt::DominatorTreeNode>&&)
 W std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, unsigned int> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_insert_unique<std::pair<unsigned int const, unsigned int> const&>(std::pair<unsigned int const, unsigned int> const&)
 W std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&)
 W std::pair<std::_Rb_tree_iterator<std::vector<unsigned int, std::allocator<unsigned int> > >, bool> std::_Rb_tree<std::vector<unsigned int, std::allocator<unsigned int> >, std::vector<unsigned int, std::allocator<unsigned int> >, std::_Identity<std::vector<unsigned int, std::allocator<unsigned int> > >, std::less<std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >::_M_insert_unique<std::vector<unsigned int, std::allocator<unsigned int> > >(std::vector<unsigned int, std::allocator<unsigned int> >&&)
 W std::pair<std::_Rb_tree_iterator<unsigned int>, bool> std::_Rb_tree<unsigned int, unsigned int, std::_Identity<unsigned int>, std::less<unsigned int>, std::allocator<unsigned int> >::_M_insert_unique<unsigned int const&>(unsigned int const&)
 W std::pair<std::_Rb_tree_iterator<unsigned int>, bool> std::_Rb_tree<unsigned int, unsigned int, std::_Identity<unsigned int>, std::less<unsigned int>, std::allocator<unsigned int> >::_M_insert_unique<unsigned int>(unsigned int&&)
 W std::pair<std::__detail::_Node_iterator<spvtools::ir::Instruction const*, true, false>, bool> std::_Hashtable<spvtools::ir::Instruction const*, spvtools::ir::Instruction const*, std::allocator<spvtools::ir::Instruction const*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction const*>, std::hash<spvtools::ir::Instruction const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_emplace<spvtools::ir::Instruction*&>(std::integral_constant<bool, true>, spvtools::ir::Instruction*&)
 W std::pair<std::__detail::_Node_iterator<spvtools::opt::analysis::Constant const*, true, true>, bool> std::_Hashtable<spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*>, std::__detail::_Identity, spvtools::opt::analysis::ConstantEqual, spvtools::opt::analysis::ConstantHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert<spvtools::opt::analysis::Constant const* const&>(spvtools::opt::analysis::Constant const* const&, std::integral_constant<bool, true>)
 W std::pair<std::__detail::_Node_iterator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, true, true>, bool> std::_Hashtable<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::__detail::_Identity, std::equal_to<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::hash<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&, std::integral_constant<bool, true>)
 W std::pair<std::__detail::_Node_iterator<std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness>, false, false>, bool> std::_Hashtable<spvtools::ir::Function const*, std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness>, std::allocator<std::pair<spvtools::ir::Function const* const, spvtools::opt::RegisterLiveness> >, std::__detail::_Select1st, std::equal_to<spvtools::ir::Function const*>, std::hash<spvtools::ir::Function const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<spvtools::ir::Function*&, spvtools::opt::RegisterLiveness>(std::integral_constant<bool, true>, spvtools::ir::Function*&, spvtools::opt::RegisterLiveness&&)
 W std::pair<std::__detail::_Node_iterator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, false, true>, bool> std::_Hashtable<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int>, glslang::pool_allocator<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const, int> >, std::__detail::_Select1st, std::equal_to<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::hash<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, int> >(std::integral_constant<bool, true>, std::pair<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, int>&&)
 W std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const, libspirv::Instruction*>, false, false>, bool> std::_Hashtable<unsigned int, std::pair<unsigned int const, libspirv::Instruction*>, std::allocator<std::pair<unsigned int const, libspirv::Instruction*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<std::pair<unsigned int, libspirv::Instruction*> >(std::integral_constant<bool, true>, std::pair<unsigned int, libspirv::Instruction*>&&)
 W std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const, spvtools::utils::BitVector>, false, false>, bool> std::_Hashtable<unsigned int, std::pair<unsigned int const, spvtools::utils::BitVector>, std::allocator<std::pair<unsigned int const, spvtools::utils::BitVector> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<std::pair<unsigned int, spvtools::utils::BitVector> >(std::integral_constant<bool, true>, std::pair<unsigned int, spvtools::utils::BitVector>&&)
 W std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const, unsigned int>, false, false>, bool> std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<unsigned int&, unsigned int const&>(std::integral_constant<bool, true>, unsigned int&, unsigned int const&)
 W std::pair<std::__detail::_Node_iterator<std::string, true, true>, bool> std::_Hashtable<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert<std::string const&>(std::string const&, std::integral_constant<bool, true>)
 W std::pair<std::__detail::_Node_iterator<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >, true, true>, bool> std::_Hashtable<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >, std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >, std::allocator<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> > >, std::__detail::_Identity, spvtools::opt::analysis::CompareTypeUniquePointers, spvtools::opt::analysis::HashTypeUniquePointer, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert<std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> > >(std::unique_ptr<spvtools::opt::analysis::Type, std::default_delete<spvtools::opt::analysis::Type> >&&, std::integral_constant<bool, true>)
 W std::pair<std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >, std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> > >::~pair()
 W std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
 W std::string spvutils::ToString<unsigned long>(unsigned long)
 W std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >::_M_run()
 W std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>, unsigned int>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<unsigned int (Etc::Image::*)(unsigned int, unsigned int, unsigned int)> (Etc::Image*, unsigned int, int, unsigned int)>&&)::{lambda()#1} ()> >::~_Impl()
 W std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >::_M_run()
 W std::thread::_Impl<std::_Bind_simple<std::__future_base::_Async_state_impl<std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>, void>::_Async_state_impl(std::_Bind_simple<std::_Mem_fn<void (Etc::Image::*)(unsigned int, unsigned int)> (Etc::Image*, int, unsigned int)>&&)::{lambda()#1} ()> >::~_Impl()
 W std::thread::_Impl_base::~_Impl_base()
 W std::unique_lock<std::mutex>::unlock()
 W std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >* std::__copy_move<true, false, std::random_access_iterator_tag>::__copy_m<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*>(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 W std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >* std::__copy_move_backward<true, false, std::random_access_iterator_tag>::__copy_move_b<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*>(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 W std::unique_ptr<spvtools::ir::IRContext, std::default_delete<spvtools::ir::IRContext> > spvtools::MakeUnique<spvtools::ir::IRContext, spv_target_env&, std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>&>(spv_target_env&, std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>&)
 W std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > spvtools::MakeUnique<spvtools::ir::Instruction, spvtools::ir::IRContext*&, SpvOp_, int, int, std::initializer_list<spvtools::ir::Operand> >(spvtools::ir::IRContext*&, SpvOp_&&, int&&, int&&, std::initializer_list<spvtools::ir::Operand>&&)
 W std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > spvtools::MakeUnique<spvtools::ir::Instruction, spvtools::ir::IRContext*, SpvOp_, int, int, std::initializer_list<spvtools::ir::Operand> >(spvtools::ir::IRContext*&&, SpvOp_&&, int&&, int&&, std::initializer_list<spvtools::ir::Operand>&&)
 W std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > spvtools::MakeUnique<spvtools::ir::Instruction, spvtools::ir::IRContext*, SpvOp_, unsigned int&, unsigned int&, std::initializer_list<spvtools::ir::Operand> >(spvtools::ir::IRContext*&&, SpvOp_&&, unsigned int&, unsigned int&, std::initializer_list<spvtools::ir::Operand>&&)
 W std::unique_ptr<spvtools::opt::ScalarReplacementPass, std::default_delete<spvtools::opt::ScalarReplacementPass> > spvtools::MakeUnique<spvtools::opt::ScalarReplacementPass, unsigned int&>(unsigned int&)
 W std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::_M_check_len(unsigned long, char const*) const
 W std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::_M_default_append(unsigned long)
 W std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::operator=(std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > const&)
 W std::vector<bool, std::allocator<bool> >::vector(unsigned long, bool const&, std::allocator<bool> const&)
 W std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> >::operator=(std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> > const&)
 W std::vector<glslang::TFunction const*, glslang::pool_allocator<glslang::TFunction const*> >::vector(std::vector<glslang::TFunction const*, glslang::pool_allocator<glslang::TFunction const*> > const&)
 W std::vector<glslang::TFunctionDeclarator, glslang::pool_allocator<glslang::TFunctionDeclarator> >::_M_default_append(unsigned long)
 W std::vector<glslang::TPpContext::TokenStream*, glslang::pool_allocator<glslang::TPpContext::TokenStream*> >::_M_default_append(unsigned long)
 W std::vector<glslang::TPpContext::TokenStream*, glslang::pool_allocator<glslang::TPpContext::TokenStream*> >::resize(unsigned long)
 W std::vector<glslang::TStorageQualifier, glslang::pool_allocator<glslang::TStorageQualifier> >::_M_default_append(unsigned long)
 W std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> >::push_back(glslang::TTypeLoc const&)
 W std::vector<glslang::TXfbBuffer, std::allocator<glslang::TXfbBuffer> >::_M_default_append(unsigned long)
 W std::vector<int, glslang::pool_allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, glslang::pool_allocator<int> > >, unsigned long, int const&)
 W std::vector<int, glslang::pool_allocator<int> >::operator=(std::vector<int, glslang::pool_allocator<int> > const&)
 W std::vector<int, std::allocator<int> >::resize(unsigned long)
 W std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >::operator=(std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > const&)
 W std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >::reserve(unsigned long)
 W std::vector<spv::Instruction*, std::allocator<spv::Instruction*> >::_M_default_append(unsigned long)
 W std::vector<spv::Instruction*, std::allocator<spv::Instruction*> >::push_back(spv::Instruction* const&)
 W std::vector<spv_instruction_t, std::allocator<spv_instruction_t> >::reserve(unsigned long)
 W std::vector<spvtools::ir::Instruction, std::allocator<spvtools::ir::Instruction> >::operator=(std::vector<spvtools::ir::Instruction, std::allocator<spvtools::ir::Instruction> > const&)
 W std::vector<spvtools::ir::Loop const*, std::allocator<spvtools::ir::Loop const*> >::vector(std::vector<spvtools::ir::Loop const*, std::allocator<spvtools::ir::Loop const*> > const&)
 W std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::erase(__gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >)
 W std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::push_back(spvtools::ir::Loop* const&)
 W std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_shrink_to_fit()
 W std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::erase(__gnu_cxx::__normal_iterator<spvtools::ir::Operand*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >)
 W std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::operator=(std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > const&)
 W std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::~vector()
 W std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> >::push_back(spvtools::opt::DominatorTreeNode* const&)
 W std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<spvtools::opt::analysis::Constant const**, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > >, unsigned long, spvtools::opt::analysis::Constant const* const&)
 W std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> >::operator=(std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)
 W std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> >::vector(std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)
 W std::vector<spvtools::opt::analysis::Type const*, std::allocator<spvtools::opt::analysis::Type const*> >::reserve(unsigned long)
 W std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const**, std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const*> > >, unsigned long, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const* const&)
 W std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*> >::push_back(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >* const&)
 W std::vector<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >, std::allocator<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > > > >::erase(__gnu_cxx::__normal_iterator<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >*, std::vector<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >, std::allocator<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > > > > >, __gnu_cxx::__normal_iterator<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >*, std::vector<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >, std::allocator<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > > > > >)
 W std::vector<std::string, std::allocator<std::string> >::operator=(std::vector<std::string, std::allocator<std::string> > const&)
 W std::vector<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >, std::allocator<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> > > >::~vector()
 W std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::_M_default_append(unsigned long)
 W std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::erase(__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > >)
 W std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::reserve(unsigned long)
 W std::vector<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> >, std::allocator<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> > > >::erase(__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> >*, std::vector<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> >, std::allocator<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> > > > >)
 W std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >::reserve(unsigned long)
 W std::vector<std::vector<spv::Decoration, std::allocator<spv::Decoration> >, std::allocator<std::vector<spv::Decoration, std::allocator<spv::Decoration> > > >::_M_default_append(unsigned long)
 W std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::~vector()
 W std::vector<std::vector<unsigned int, std::allocator<unsigned int> > const*, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > const*> >::reserve(unsigned long)
 W std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >::~vector()
 W std::vector<unsigned char, glslang::pool_allocator<unsigned char> >::operator=(std::vector<unsigned char, glslang::pool_allocator<unsigned char> > const&)
 W std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)
 W std::vector<unsigned char, std::allocator<unsigned char> >::vector(unsigned long, std::allocator<unsigned char> const&)
 W std::vector<unsigned int, std::allocator<unsigned int> >::_M_default_append(unsigned long)
 W std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)
 W std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)
 W std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)
 W std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&)
 W std::vector<unsigned long, std::allocator<unsigned long> >::operator=(std::vector<unsigned long, std::allocator<unsigned long> > const&)
 W void spvtools::Logf<SpvOp_ const&>(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spv_message_level_t, char const*, spv_position_t const&, char const*, SpvOp_ const&)
 W void std::_Destroy_aux<false>::__destroy<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*>(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*)
 W void std::_Rb_tree<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::_Identity<spvtools::ir::Instruction*>, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >::_M_insert_unique<std::_Rb_tree_const_iterator<spvtools::ir::Instruction*> >(std::_Rb_tree_const_iterator<spvtools::ir::Instruction*>, std::_Rb_tree_const_iterator<spvtools::ir::Instruction*>)
 W void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, std::_Identity<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::less<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::_M_insert_unique<std::_Rb_tree_const_iterator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >(std::_Rb_tree_const_iterator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >, std::_Rb_tree_const_iterator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >)
 W void std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::_Rb_tree_const_iterator<std::string> >(std::_Rb_tree_const_iterator<std::string>, std::_Rb_tree_const_iterator<std::string>)
 W void std::__adjust_heap<__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, long, glslang::TVarEntryInfo, glslang::TVarEntryInfo::TOrderById>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, long, long, glslang::TVarEntryInfo, glslang::TVarEntryInfo::TOrderById)
 W void std::__adjust_heap<__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, long, glslang::TVarEntryInfo, glslang::TVarEntryInfo::TOrderByPriority>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, long, long, glslang::TVarEntryInfo, glslang::TVarEntryInfo::TOrderByPriority)
 W void std::__adjust_heap<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, long, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, long, long, unsigned int)
 W void std::__detail::_Insert_base<spvtools::ir::Instruction*, spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*>, std::__detail::_Identity, std::equal_to<spvtools::ir::Instruction*>, std::hash<spvtools::ir::Instruction*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert<std::__detail::_Node_iterator<spvtools::ir::Instruction*, true, false> >(std::__detail::_Node_iterator<spvtools::ir::Instruction*, true, false>, std::__detail::_Node_iterator<spvtools::ir::Instruction*, true, false>)
 W void std::__detail::_Insert_base<std::string, std::string, std::allocator<std::string>, std::__detail::_Identity, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::insert<std::string const*>(std::string const*, std::string const*)
 W void std::__detail::_Insert_base<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert<unsigned int const*>(unsigned int const*, unsigned int const*)
 W void std::__detail::_Insert_base<unsigned long, unsigned long, std::allocator<unsigned long>, std::__detail::_Identity, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)
 W void std::__detail::_Insert_base<unsigned long, unsigned long, std::allocator<unsigned long>, std::__detail::_Identity, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert<std::__detail::_Node_iterator<unsigned long, true, false> >(std::__detail::_Node_iterator<unsigned long, true, false>, std::__detail::_Node_iterator<unsigned long, true, false>)
 W void std::__heap_select<__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderByPriority>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, __gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, __gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderByPriority)
 W void std::__insertion_sort<__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderById>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, __gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderById)
 W void std::__insertion_sort<__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderByPriority>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, __gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderByPriority)
 W void std::__introsort_loop<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, long>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, long)
 W void std::__once_call_impl<std::_Bind_simple<std::_Mem_fn<void (std::__future_base::_State_base::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>&, bool&)> (std::__future_base::_State_base*, std::reference_wrapper<std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()> >, std::reference_wrapper<bool>)> >()
 W void std::__once_call_impl<std::_Bind_simple<std::_Mem_fn<void (std::thread::*)()> (std::reference_wrapper<std::thread>)> >()
 W void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderByPriority>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo::TOrderByPriority)
 W void std::deque<bool, std::allocator<bool> >::_M_push_back_aux<bool>(bool&&)
 W void std::deque<libspirv::Function, std::allocator<libspirv::Function> >::_M_push_back_aux<unsigned int&, unsigned int&, SpvFunctionControlMask_&, unsigned int&>(unsigned int&, unsigned int&, SpvFunctionControlMask_&, unsigned int&)
 W void std::deque<libspirv::Instruction, std::allocator<libspirv::Instruction> >::_M_push_back_aux<spv_parsed_instruction_t const*, decltype(nullptr), decltype(nullptr)>(spv_parsed_instruction_t const*&&, decltype(nullptr)&&, decltype(nullptr)&&)
 W void std::deque<libspirv::Instruction, std::allocator<libspirv::Instruction> >::_M_push_back_aux<spv_parsed_instruction_t const*, libspirv::Function*, libspirv::BasicBlock*>(spv_parsed_instruction_t const*&&, libspirv::Function*&&, libspirv::BasicBlock*&&)
 W void std::deque<spv::Block*, std::allocator<spv::Block*> >::_M_push_back_aux<spv::Block* const&>(spv::Block* const&)
 W void std::deque<spv::Builder::LoopBlocks, std::allocator<spv::Builder::LoopBlocks> >::_M_push_back_aux<spv::Builder::LoopBlocks const&>(spv::Builder::LoopBlocks const&)
 W void std::deque<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >::_M_push_back_aux<spvtools::ir::BasicBlock* const&>(spvtools::ir::BasicBlock* const&)
 W void std::deque<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::_M_push_back_aux<spvtools::ir::Instruction* const&>(spvtools::ir::Instruction* const&)
 W void std::deque<spvtools::opt::SSARewriter::PhiCandidate*, std::allocator<spvtools::opt::SSARewriter::PhiCandidate*> >::_M_push_back_aux<spvtools::opt::SSARewriter::PhiCandidate* const&>(spvtools::opt::SSARewriter::PhiCandidate* const&)
 W void std::deque<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >::_M_push_back_aux<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > >(std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >&&)
 W void std::deque<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >, std::allocator<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > > >::emplace_back<std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > > >(std::pair<spvtools::ir::Loop*, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >&&)
 W void std::deque<std::pair<spvtools::opt::DominatorTreeNode const*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode* const*, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode const*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode* const*, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >::emplace_back<std::pair<spvtools::opt::DominatorTreeNode const*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode* const*, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > >(std::pair<spvtools::opt::DominatorTreeNode const*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode* const*, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >&&)
 W void std::deque<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >, std::allocator<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > > >::emplace_back<std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > > >(std::pair<spvtools::opt::DominatorTreeNode*, __gnu_cxx::__normal_iterator<spvtools::opt::DominatorTreeNode**, std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> > > >&&)
 W void std::deque<std::pair<spvtools::opt::SENode const*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode* const*, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > >, std::allocator<std::pair<spvtools::opt::SENode const*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode* const*, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > > > >::emplace_back<std::pair<spvtools::opt::SENode const*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode* const*, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > > >(std::pair<spvtools::opt::SENode const*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode* const*, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > >&&)
 W void std::deque<std::pair<spvtools::opt::SENode*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > >, std::allocator<std::pair<spvtools::opt::SENode*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > > > >::emplace_back<std::pair<spvtools::opt::SENode*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > > >(std::pair<spvtools::opt::SENode*, __gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > > >&&)
 W void std::deque<unsigned int, std::allocator<unsigned int> >::_M_push_back_aux<unsigned int const&>(unsigned int const&)
 W void std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::_M_emplace_back_aux<TIntermNode* const&>(TIntermNode* const&)
 W void std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::_M_emplace_back_aux<TIntermNode*>(TIntermNode*&&)
 W void std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::_M_range_insert<__gnu_cxx::__normal_iterator<TIntermNode* const*, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > > >(__gnu_cxx::__normal_iterator<TIntermNode**, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > >, __gnu_cxx::__normal_iterator<TIntermNode* const*, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > >, __gnu_cxx::__normal_iterator<TIntermNode* const*, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > >, std::forward_iterator_tag)
 W void std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::_M_range_insert<__gnu_cxx::__normal_iterator<glslang::TIntermTyped* const*, std::vector<glslang::TIntermTyped*, glslang::pool_allocator<glslang::TIntermTyped*> > > >(__gnu_cxx::__normal_iterator<TIntermNode**, std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> > >, __gnu_cxx::__normal_iterator<glslang::TIntermTyped* const*, std::vector<glslang::TIntermTyped*, glslang::pool_allocator<glslang::TIntermTyped*> > >, __gnu_cxx::__normal_iterator<glslang::TIntermTyped* const*, std::vector<glslang::TIntermTyped*, glslang::pool_allocator<glslang::TIntermTyped*> > >, std::forward_iterator_tag)
 W void std::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::emplace_back<TIntermNode*>(TIntermNode*&&)
 W void std::vector<TIntermNode*, std::allocator<TIntermNode*> >::_M_emplace_back_aux<TIntermNode* const&>(TIntermNode* const&)
 W void std::vector<TIntermNode*, std::allocator<TIntermNode*> >::_M_emplace_back_aux<TIntermNode*>(TIntermNode*&&)
 W void std::vector<TShHandleBase*, glslang::pool_allocator<TShHandleBase*> >::_M_emplace_back_aux<TShHandleBase*>(TShHandleBase*&&)
 W void std::vector<char const*, std::allocator<char const*> >::_M_emplace_back_aux<char const* const&>(char const* const&)
 W void std::vector<char const*, std::allocator<char const*> >::_M_emplace_back_aux<char const*>(char const*&&)
 W void std::vector<glslang::HlslParseContext::tGsAppendData, glslang::pool_allocator<glslang::HlslParseContext::tGsAppendData> >::_M_emplace_back_aux<glslang::HlslParseContext::tGsAppendData>(glslang::HlslParseContext::tGsAppendData&&)
 W void std::vector<glslang::HlslParseContext::tMipsOperatorData, glslang::pool_allocator<glslang::HlslParseContext::tMipsOperatorData> >::_M_emplace_back_aux<glslang::HlslParseContext::tMipsOperatorData>(glslang::HlslParseContext::tMipsOperatorData&&)
 W void std::vector<glslang::HlslToken, glslang::pool_allocator<glslang::HlslToken> >::_M_emplace_back_aux<glslang::HlslToken const&>(glslang::HlslToken const&)
 W void std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> >::_M_emplace_back_aux<glslang::TArraySize const&>(glslang::TArraySize const&)
 W void std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> >::_M_range_insert<__gnu_cxx::__normal_iterator<glslang::TArraySize*, std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> > > >(__gnu_cxx::__normal_iterator<glslang::TArraySize*, std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> > >, __gnu_cxx::__normal_iterator<glslang::TArraySize*, std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> > >, __gnu_cxx::__normal_iterator<glslang::TArraySize*, std::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> > >, std::forward_iterator_tag)
 W void std::vector<glslang::TConstUnionArray, glslang::pool_allocator<glslang::TConstUnionArray> >::_M_emplace_back_aux<glslang::TConstUnionArray const&>(glslang::TConstUnionArray const&)
 W void std::vector<glslang::TFunction const*, glslang::pool_allocator<glslang::TFunction const*> >::_M_emplace_back_aux<glslang::TFunction const*>(glslang::TFunction const*&&)
 W void std::vector<glslang::TIntermTyped*, glslang::pool_allocator<glslang::TIntermTyped*> >::_M_emplace_back_aux<glslang::TIntermTyped* const&>(glslang::TIntermTyped* const&)
 W void std::vector<glslang::TIntermTyped*, glslang::pool_allocator<glslang::TIntermTyped*> >::_M_emplace_back_aux<glslang::TIntermTyped*>(glslang::TIntermTyped*&&)
 W void std::vector<glslang::TIoRange, std::allocator<glslang::TIoRange> >::_M_emplace_back_aux<glslang::TIoRange const&>(glslang::TIoRange const&)
 W void std::vector<glslang::TObjectReflection, std::allocator<glslang::TObjectReflection> >::_M_emplace_back_aux<glslang::TObjectReflection>(glslang::TObjectReflection&&)
 W void std::vector<glslang::TObjectReflection, std::allocator<glslang::TObjectReflection> >::emplace_back<glslang::TObjectReflection>(glslang::TObjectReflection&&)
 W void std::vector<glslang::TOffsetRange, std::allocator<glslang::TOffsetRange> >::_M_emplace_back_aux<glslang::TOffsetRange const&>(glslang::TOffsetRange const&)
 W void std::vector<glslang::TParameter, glslang::pool_allocator<glslang::TParameter> >::_M_emplace_back_aux<glslang::TParameter const&>(glslang::TParameter const&)
 W void std::vector<glslang::TParameter, glslang::pool_allocator<glslang::TParameter> >::_M_insert_aux<glslang::TParameter const&>(__gnu_cxx::__normal_iterator<glslang::TParameter*, std::vector<glslang::TParameter, glslang::pool_allocator<glslang::TParameter> > >, glslang::TParameter const&)
 W void std::vector<glslang::TParameter, glslang::pool_allocator<glslang::TParameter> >::_M_insert_aux<glslang::TParameter>(__gnu_cxx::__normal_iterator<glslang::TParameter*, std::vector<glslang::TParameter, glslang::pool_allocator<glslang::TParameter> > >, glslang::TParameter&&)
 W void std::vector<glslang::TPoolAllocator::tAllocState, std::allocator<glslang::TPoolAllocator::tAllocState> >::_M_emplace_back_aux<glslang::TPoolAllocator::tAllocState const&>(glslang::TPoolAllocator::tAllocState const&)
 W void std::vector<glslang::TPpContext::tInput*, std::allocator<glslang::TPpContext::tInput*> >::_M_emplace_back_aux<glslang::TPpContext::tInput* const&>(glslang::TPpContext::tInput* const&)
 W void std::vector<glslang::TRange, std::allocator<glslang::TRange> >::_M_emplace_back_aux<glslang::TRange const&>(glslang::TRange const&)
 W void std::vector<glslang::TStorageQualifier, glslang::pool_allocator<glslang::TStorageQualifier> >::_M_emplace_back_aux<glslang::TStorageQualifier const&>(glslang::TStorageQualifier const&)
 W void std::vector<glslang::TSymbol*, glslang::pool_allocator<glslang::TSymbol*> >::_M_emplace_back_aux<glslang::TSymbol* const&>(glslang::TSymbol* const&)
 W void std::vector<glslang::TSymbol*, glslang::pool_allocator<glslang::TSymbol*> >::_M_emplace_back_aux<glslang::TSymbol*>(glslang::TSymbol*&&)
 W void std::vector<glslang::TSymbolTableLevel*, std::allocator<glslang::TSymbolTableLevel*> >::_M_emplace_back_aux<glslang::TSymbolTableLevel* const&>(glslang::TSymbolTableLevel* const&)
 W void std::vector<glslang::TSymbolTableLevel*, std::allocator<glslang::TSymbolTableLevel*> >::_M_emplace_back_aux<glslang::TSymbolTableLevel*>(glslang::TSymbolTableLevel*&&)
 W void std::vector<glslang::TType const*, std::allocator<glslang::TType const*> >::_M_emplace_back_aux<glslang::TType const*>(glslang::TType const*&&)
 W void std::vector<glslang::TType*, glslang::pool_allocator<glslang::TType*> >::_M_emplace_back_aux<glslang::TType* const&>(glslang::TType* const&)
 W void std::vector<glslang::TTypeLoc, glslang::pool_allocator<glslang::TTypeLoc> >::_M_emplace_back_aux<glslang::TTypeLoc const&>(glslang::TTypeLoc const&)
 W void std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> >::_M_insert_aux<glslang::TVarEntryInfo const&>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo const&)
 W void std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> >::_M_insert_aux<glslang::TVarEntryInfo>(__gnu_cxx::__normal_iterator<glslang::TVarEntryInfo*, std::vector<glslang::TVarEntryInfo, std::allocator<glslang::TVarEntryInfo> > >, glslang::TVarEntryInfo&&)
 W void std::vector<glslang::TVariable*, glslang::pool_allocator<glslang::TVariable*> >::_M_emplace_back_aux<glslang::TVariable* const&>(glslang::TVariable* const&)
 W void std::vector<glslang::TVariable*, glslang::pool_allocator<glslang::TVariable*> >::_M_emplace_back_aux<glslang::TVariable*>(glslang::TVariable*&&)
 W void std::vector<glslang::TVector<glslang::HlslToken> const*, glslang::pool_allocator<glslang::TVector<glslang::HlslToken> const*> >::_M_emplace_back_aux<glslang::TVector<glslang::HlslToken> const* const&>(glslang::TVector<glslang::HlslToken> const* const&)
 W void std::vector<glslang::TVector<glslang::TTypeLoc>*, glslang::pool_allocator<glslang::TVector<glslang::TTypeLoc>*> >::_M_emplace_back_aux<glslang::TVector<glslang::TTypeLoc>* const&>(glslang::TVector<glslang::TTypeLoc>* const&)
 W void std::vector<int, glslang::pool_allocator<int> >::_M_emplace_back_aux<int const&>(int const&)
 W void std::vector<int, glslang::pool_allocator<int> >::_M_emplace_back_aux<int>(int&&)
 W void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)
 W void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)
 W void std::vector<libspirv::BasicBlock const*, std::allocator<libspirv::BasicBlock const*> >::_M_emplace_back_aux<libspirv::BasicBlock const* const&>(libspirv::BasicBlock const* const&)
 W void std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >::_M_emplace_back_aux<libspirv::BasicBlock* const&>(libspirv::BasicBlock* const&)
 W void std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >::_M_emplace_back_aux<libspirv::BasicBlock*>(libspirv::BasicBlock*&&)
 W void std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> >::_M_range_insert<__gnu_cxx::__normal_iterator<libspirv::BasicBlock* const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > > >(__gnu_cxx::__normal_iterator<libspirv::BasicBlock**, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, __gnu_cxx::__normal_iterator<libspirv::BasicBlock* const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, __gnu_cxx::__normal_iterator<libspirv::BasicBlock* const*, std::vector<libspirv::BasicBlock*, std::allocator<libspirv::BasicBlock*> > >, std::forward_iterator_tag)
 W void std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> >::_M_emplace_back_aux<libspirv::Decoration const&>(libspirv::Decoration const&)
 W void std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> >::_M_range_insert<__gnu_cxx::__normal_iterator<libspirv::Decoration*, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > > >(__gnu_cxx::__normal_iterator<libspirv::Decoration*, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > >, __gnu_cxx::__normal_iterator<libspirv::Decoration*, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > >, __gnu_cxx::__normal_iterator<libspirv::Decoration*, std::vector<libspirv::Decoration, std::allocator<libspirv::Decoration> > >, std::forward_iterator_tag)
 W void std::vector<spv::Block*, std::allocator<spv::Block*> >::_M_emplace_back_aux<spv::Block* const&>(spv::Block* const&)
 W void std::vector<spv::Block*, std::allocator<spv::Block*> >::_M_emplace_back_aux<spv::Block*>(spv::Block*&&)
 W void std::vector<spv::Builder::AccessChain, std::allocator<spv::Builder::AccessChain> >::_M_emplace_back_aux<spv::Builder::AccessChain>(spv::Builder::AccessChain&&)
 W void std::vector<spv::Decoration, std::allocator<spv::Decoration> >::_M_emplace_back_aux<spv::Decoration const&>(spv::Decoration const&)
 W void std::vector<spv::Decoration, std::allocator<spv::Decoration> >::_M_emplace_back_aux<spv::Decoration>(spv::Decoration&&)
 W void std::vector<spv::Function*, std::allocator<spv::Function*> >::_M_emplace_back_aux<spv::Function* const&>(spv::Function* const&)
 W void std::vector<spv::Instruction*, std::allocator<spv::Instruction*> >::_M_emplace_back_aux<spv::Instruction* const&>(spv::Instruction* const&)
 W void std::vector<spv_instruction_t, std::allocator<spv_instruction_t> >::_M_emplace_back_aux<spv_instruction_t>(spv_instruction_t&&)
 W void std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >::_M_emplace_back_aux<spv_operand_type_t const&>(spv_operand_type_t const&)
 W void std::vector<spv_operand_type_t, std::allocator<spv_operand_type_t> >::_M_emplace_back_aux<spv_operand_type_t>(spv_operand_type_t&&)
 W void std::vector<spv_parsed_operand_t, std::allocator<spv_parsed_operand_t> >::_M_emplace_back_aux<spv_parsed_operand_t const&>(spv_parsed_operand_t const&)
 W void std::vector<spvtools::CFA<libspirv::BasicBlock>::block_info, std::allocator<spvtools::CFA<libspirv::BasicBlock>::block_info> >::_M_emplace_back_aux<spvtools::CFA<libspirv::BasicBlock>::block_info>(spvtools::CFA<libspirv::BasicBlock>::block_info&&)
 W void std::vector<spvtools::CFA<spvtools::ir::BasicBlock>::block_info, std::allocator<spvtools::CFA<spvtools::ir::BasicBlock>::block_info> >::_M_emplace_back_aux<spvtools::CFA<spvtools::ir::BasicBlock>::block_info>(spvtools::CFA<spvtools::ir::BasicBlock>::block_info&&)
 W void std::vector<spvtools::CFA<spvtools::opt::DominatorTreeNode>::block_info, std::allocator<spvtools::CFA<spvtools::opt::DominatorTreeNode>::block_info> >::_M_emplace_back_aux<spvtools::CFA<spvtools::opt::DominatorTreeNode>::block_info>(spvtools::CFA<spvtools::opt::DominatorTreeNode>::block_info&&)
 W void std::vector<spvtools::ir::BasicBlock const*, std::allocator<spvtools::ir::BasicBlock const*> >::_M_emplace_back_aux<spvtools::ir::BasicBlock const* const&>(spvtools::ir::BasicBlock const* const&)
 W void std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >::_M_emplace_back_aux<spvtools::ir::BasicBlock* const&>(spvtools::ir::BasicBlock* const&)
 W void std::vector<spvtools::ir::BasicBlock*, std::allocator<spvtools::ir::BasicBlock*> >::_M_emplace_back_aux<spvtools::ir::BasicBlock*>(spvtools::ir::BasicBlock*&&)
 W void std::vector<spvtools::ir::Instruction const*, std::allocator<spvtools::ir::Instruction const*> >::_M_emplace_back_aux<spvtools::ir::Instruction const*>(spvtools::ir::Instruction const*&&)
 W void std::vector<spvtools::ir::Instruction const*, std::allocator<spvtools::ir::Instruction const*> >::_M_emplace_back_aux<spvtools::ir::Instruction*>(spvtools::ir::Instruction*&&)
 W void std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::_M_emplace_back_aux<spvtools::ir::Instruction* const&>(spvtools::ir::Instruction* const&)
 W void std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::_M_emplace_back_aux<spvtools::ir::Instruction*&>(spvtools::ir::Instruction*&)
 W void std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::_M_emplace_back_aux<spvtools::ir::Instruction*>(spvtools::ir::Instruction*&&)
 W void std::vector<spvtools::ir::Instruction*, std::allocator<spvtools::ir::Instruction*> >::emplace_back<spvtools::ir::Instruction*>(spvtools::ir::Instruction*&&)
 W void std::vector<spvtools::ir::Instruction, std::allocator<spvtools::ir::Instruction> >::_M_emplace_back_aux<spvtools::ir::Instruction>(spvtools::ir::Instruction&&)
 W void std::vector<spvtools::ir::Loop const*, std::allocator<spvtools::ir::Loop const*> >::_M_emplace_back_aux<spvtools::ir::Loop const*>(spvtools::ir::Loop const*&&)
 W void std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::_M_emplace_back_aux<spvtools::ir::Loop* const&>(spvtools::ir::Loop* const&)
 W void std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::_M_emplace_back_aux<spvtools::ir::Loop*&>(spvtools::ir::Loop*&)
 W void std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::_M_emplace_back_aux<spvtools::ir::Loop*>(spvtools::ir::Loop*&&)
 W void std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::_M_range_insert<__gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > > >(__gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Loop**, std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> > >, std::forward_iterator_tag)
 W void std::vector<spvtools::ir::Loop*, std::allocator<spvtools::ir::Loop*> >::emplace_back<spvtools::ir::Loop*>(spvtools::ir::Loop*&&)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_emplace_back_aux<spv_operand_type_t const&, std::vector<unsigned int, std::allocator<unsigned int> > >(spv_operand_type_t const&, std::vector<unsigned int, std::allocator<unsigned int> >&&)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_emplace_back_aux<spv_operand_type_t, std::initializer_list<unsigned int> >(spv_operand_type_t&&, std::initializer_list<unsigned int>&&)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_emplace_back_aux<spvtools::ir::Operand const&>(spvtools::ir::Operand const&)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_emplace_back_aux<spvtools::ir::Operand>(spvtools::ir::Operand&&)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_range_insert<__gnu_cxx::__normal_iterator<spvtools::ir::Operand const*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > > >(__gnu_cxx::__normal_iterator<spvtools::ir::Operand*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Operand const*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Operand const*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >, std::forward_iterator_tag)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::_M_range_insert<__gnu_cxx::__normal_iterator<spvtools::ir::Operand*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > > >(__gnu_cxx::__normal_iterator<spvtools::ir::Operand*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Operand*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >, __gnu_cxx::__normal_iterator<spvtools::ir::Operand*, std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> > >, std::forward_iterator_tag)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::emplace_back<spv_operand_type_t, std::initializer_list<unsigned int> >(spv_operand_type_t&&, std::initializer_list<unsigned int>&&)
 W void std::vector<spvtools::ir::Operand, std::allocator<spvtools::ir::Operand> >::emplace_back<spvtools::ir::Operand>(spvtools::ir::Operand&&)
 W void std::vector<spvtools::opt::DistanceVector, std::allocator<spvtools::opt::DistanceVector> >::_M_emplace_back_aux<spvtools::opt::DistanceVector const&>(spvtools::opt::DistanceVector const&)
 W void std::vector<spvtools::opt::DominatorTreeNode*, std::allocator<spvtools::opt::DominatorTreeNode*> >::_M_emplace_back_aux<spvtools::opt::DominatorTreeNode* const&>(spvtools::opt::DominatorTreeNode* const&)
 W void std::vector<spvtools::opt::Edge, std::allocator<spvtools::opt::Edge> >::_M_emplace_back_aux<spvtools::opt::Edge>(spvtools::opt::Edge&&)
 W void std::vector<spvtools::opt::MergeReturnPass::StructuredControlState, std::allocator<spvtools::opt::MergeReturnPass::StructuredControlState> >::_M_emplace_back_aux<decltype(nullptr), decltype(nullptr)>(decltype(nullptr)&&, decltype(nullptr)&&)
 W void std::vector<spvtools::opt::MergeReturnPass::StructuredControlState, std::allocator<spvtools::opt::MergeReturnPass::StructuredControlState> >::_M_emplace_back_aux<spvtools::ir::Instruction*&, spvtools::ir::Instruction*&>(spvtools::ir::Instruction*&, spvtools::ir::Instruction*&)
 W void std::vector<spvtools::opt::SEConstantNode*, std::allocator<spvtools::opt::SEConstantNode*> >::_M_emplace_back_aux<spvtools::opt::SEConstantNode* const&>(spvtools::opt::SEConstantNode* const&)
 W void std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> >::_M_emplace_back_aux<spvtools::opt::SENode* const&>(spvtools::opt::SENode* const&)
 W void std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> >::_M_emplace_back_aux<spvtools::opt::SENode*>(spvtools::opt::SENode*&&)
 W void std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> >::_M_insert_aux<spvtools::opt::SENode* const&>(__gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > >, spvtools::opt::SENode* const&)
 W void std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> >::_M_insert_aux<spvtools::opt::SENode*>(__gnu_cxx::__normal_iterator<spvtools::opt::SENode**, std::vector<spvtools::opt::SENode*, std::allocator<spvtools::opt::SENode*> > >, spvtools::opt::SENode*&&)
 W void std::vector<spvtools::opt::SERecurrentNode*, std::allocator<spvtools::opt::SERecurrentNode*> >::_M_emplace_back_aux<spvtools::opt::SERecurrentNode* const&>(spvtools::opt::SERecurrentNode* const&)
 W void std::vector<spvtools::opt::SEValueUnknown*, std::allocator<spvtools::opt::SEValueUnknown*> >::_M_emplace_back_aux<spvtools::opt::SEValueUnknown* const&>(spvtools::opt::SEValueUnknown* const&)
 W void std::vector<spvtools::opt::SSARewriter::PhiCandidate*, std::allocator<spvtools::opt::SSARewriter::PhiCandidate*> >::_M_emplace_back_aux<spvtools::opt::SSARewriter::PhiCandidate* const&>(spvtools::opt::SSARewriter::PhiCandidate* const&)
 W void std::vector<spvtools::opt::VectorDCE::WorkListItem, std::allocator<spvtools::opt::VectorDCE::WorkListItem> >::_M_emplace_back_aux<spvtools::opt::VectorDCE::WorkListItem&>(spvtools::opt::VectorDCE::WorkListItem&)
 W void std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> >::_M_emplace_back_aux<spvtools::opt::analysis::Constant const* const&>(spvtools::opt::analysis::Constant const* const&)
 W void std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> >::_M_emplace_back_aux<spvtools::opt::analysis::Constant const*>(spvtools::opt::analysis::Constant const*&&)
 W void std::vector<spvtools::opt::analysis::Type const*, std::allocator<spvtools::opt::analysis::Type const*> >::_M_emplace_back_aux<spvtools::opt::analysis::Type const*>(spvtools::opt::analysis::Type const*&&)
 W void std::vector<spvtools::opt::analysis::TypeManager::UnresolvedType, std::allocator<spvtools::opt::analysis::TypeManager::UnresolvedType> >::_M_emplace_back_aux<unsigned int&, spvtools::opt::analysis::Type*&>(unsigned int&, spvtools::opt::analysis::Type*&)
 W void std::vector<spvtools::opt::analysis::TypeManager::UnresolvedType, std::allocator<spvtools::opt::analysis::TypeManager::UnresolvedType> >::_M_emplace_back_aux<unsigned int, spvtools::opt::analysis::Type*&>(unsigned int&&, spvtools::opt::analysis::Type*&)
 W void std::vector<spvtools::opt::analysis::TypeManager::UnresolvedType, std::allocator<spvtools::opt::analysis::TypeManager::UnresolvedType> >::emplace_back<unsigned int, spvtools::opt::analysis::Type*&>(unsigned int&&, spvtools::opt::analysis::Type*&)
 W void std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >*> >::_M_emplace_back_aux<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >* const&>(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >* const&)
 W void std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::_M_emplace_back_aux<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&&)
 W void std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::_M_emplace_back_aux<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&>(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > const&)
 W void std::vector<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > > >::emplace_back<std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> > >(std::basic_string<char, std::char_traits<char>, glslang::pool_allocator<char> >&&)
 W void std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > >::_M_emplace_back_aux<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>&&)
 W void std::vector<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > >::emplace_back<std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::function<bool (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>&&)
 W void std::vector<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::allocator<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> > >::_M_emplace_back_aux<std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::function<spvtools::opt::analysis::Constant const* (spvtools::ir::Instruction*, std::vector<spvtools::opt::analysis::Constant const*, std::allocator<spvtools::opt::analysis::Constant const*> > const&)>&&)
 W void std::vector<std::pair<libspirv::BasicBlock*, libspirv::BasicBlock*>, std::allocator<std::pair<libspirv::BasicBlock*, libspirv::BasicBlock*> > >::_M_emplace_back_aux<std::pair<libspirv::BasicBlock*, libspirv::BasicBlock*> >(std::pair<libspirv::BasicBlock*, libspirv::BasicBlock*>&&)
 W void std::vector<std::pair<libspirv::Instruction const*, unsigned int>, std::allocator<std::pair<libspirv::Instruction const*, unsigned int> > >::_M_emplace_back_aux<std::pair<libspirv::Instruction const*, unsigned int> >(std::pair<libspirv::Instruction const*, unsigned int>&&)
 W void std::vector<std::pair<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*> > >::_M_emplace_back_aux<std::pair<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*> >(std::pair<spvtools::ir::BasicBlock*, spvtools::ir::BasicBlock*>&&)
 W void std::vector<std::pair<spvtools::ir::Instruction*, spvtools::ir::BasicBlock*>, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::BasicBlock*> > >::_M_emplace_back_aux<spvtools::ir::Instruction*, decltype(nullptr)>(spvtools::ir::Instruction*&&, decltype(nullptr)&&)
 W void std::vector<std::pair<spvtools::ir::Instruction*, spvtools::ir::Function*>, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Function*> > >::_M_emplace_back_aux<std::pair<spvtools::ir::Instruction*, spvtools::ir::Function*> >(std::pair<spvtools::ir::Instruction*, spvtools::ir::Function*>&&)
 W void std::vector<std::pair<spvtools::ir::Instruction*, unsigned int>, std::allocator<std::pair<spvtools::ir::Instruction*, unsigned int> > >::_M_emplace_back_aux<spvtools::ir::Instruction*&, unsigned int&>(spvtools::ir::Instruction*&, unsigned int&)
 W void std::vector<std::pair<spvtools::ir::Instruction*, unsigned int>, std::allocator<std::pair<spvtools::ir::Instruction*, unsigned int> > >::_M_emplace_back_aux<std::pair<spvtools::ir::Instruction*, unsigned int> >(std::pair<spvtools::ir::Instruction*, unsigned int>&&)
 W void std::vector<std::pair<spvtools::ir::Loop*, spvtools::ir::Loop*>, std::allocator<std::pair<spvtools::ir::Loop*, spvtools::ir::Loop*> > >::_M_emplace_back_aux<std::pair<spvtools::ir::Loop*, spvtools::ir::Loop*> >(std::pair<spvtools::ir::Loop*, spvtools::ir::Loop*>&&)
 W void std::vector<std::pair<spvtools::opt::Constraint*, unsigned long>, std::allocator<std::pair<spvtools::opt::Constraint*, unsigned long> > >::_M_emplace_back_aux<std::pair<spvtools::opt::Constraint*, unsigned long> >(std::pair<spvtools::opt::Constraint*, unsigned long>&&)
 W void std::vector<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long>, std::allocator<std::pair<spvtools::opt::RegisterLiveness::RegisterClass, unsigned long> > >::_M_emplace_back_aux<spvtools::opt::RegisterLiveness::RegisterClass const, unsigned long>(spvtools::opt::RegisterLiveness::RegisterClass const&&, unsigned long&&)
 W void std::vector<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*>, std::allocator<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> > >::_M_emplace_back_aux<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> >(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*>&&)
 W void std::vector<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*>, std::allocator<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> > >::_M_emplace_back_aux<std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&>(std::pair<spvtools::opt::SENode*, spvtools::opt::SENode*> const&)
 W void std::vector<std::pair<spvtools::opt::SERecurrentNode*, bool>, std::allocator<std::pair<spvtools::opt::SERecurrentNode*, bool> > >::_M_emplace_back_aux<std::pair<spvtools::opt::SERecurrentNode*, bool> >(std::pair<spvtools::opt::SERecurrentNode*, bool>&&)
 W void std::vector<std::pair<std::vector<unsigned int, std::allocator<unsigned int> >, unsigned int>, std::allocator<std::pair<std::vector<unsigned int, std::allocator<unsigned int> >, unsigned int> > >::_M_emplace_back_aux<std::vector<unsigned int, std::allocator<unsigned int> >&, unsigned int>(std::vector<unsigned int, std::allocator<unsigned int> >&, unsigned int&&)
 W void std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >::_M_emplace_back_aux<unsigned int, unsigned int>(unsigned int&&, unsigned int&&)
 W void std::vector<std::set<spvtools::ir::Instruction*, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >, std::allocator<std::set<spvtools::ir::Instruction*, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> > > >::_M_emplace_back_aux<std::set<spvtools::ir::Instruction*, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> > >(std::set<spvtools::ir::Instruction*, std::less<spvtools::ir::Instruction*>, std::allocator<spvtools::ir::Instruction*> >&&)
 W void std::vector<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >, std::allocator<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > > > >::_M_emplace_back_aux<std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > > >(std::set<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*>, std::less<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> >, std::allocator<std::pair<spvtools::ir::Instruction*, spvtools::ir::Instruction*> > >&&)
 W void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&)
 W void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&)
 W void std::vector<std::tuple<spvtools::ir::Loop const*, spvtools::opt::LoopPeelingPass::PeelDirection, unsigned int>, std::allocator<std::tuple<spvtools::ir::Loop const*, spvtools::opt::LoopPeelingPass::PeelDirection, unsigned int> > >::_M_emplace_back_aux<spvtools::ir::Loop*&, spvtools::opt::LoopPeelingPass::PeelDirection, unsigned int&>(spvtools::ir::Loop*&, spvtools::opt::LoopPeelingPass::PeelDirection&&, unsigned int&)
 W void std::vector<std::tuple<spvtools::ir::Loop const*, spvtools::opt::LoopPeelingPass::PeelDirection, unsigned int>, std::allocator<std::tuple<spvtools::ir::Loop const*, spvtools::opt::LoopPeelingPass::PeelDirection, unsigned int> > >::emplace_back<spvtools::ir::Loop*&, spvtools::opt::LoopPeelingPass::PeelDirection, unsigned int&>(spvtools::ir::Loop*&, spvtools::opt::LoopPeelingPass::PeelDirection&&, unsigned int&)
 W void std::vector<std::unique_ptr<spv::Function, std::default_delete<spv::Function> >, std::allocator<std::unique_ptr<spv::Function, std::default_delete<spv::Function> > > >::_M_emplace_back_aux<std::unique_ptr<spv::Function, std::default_delete<spv::Function> > >(std::unique_ptr<spv::Function, std::default_delete<spv::Function> >&&)
 W void std::vector<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >, std::allocator<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> > > >::_M_emplace_back_aux<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> > >(std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >&&)
 W void std::vector<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >, std::allocator<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> > > >::emplace_back<std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> > >(std::unique_ptr<spv::Instruction, std::default_delete<spv::Instruction> >&&)
 W void std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::_M_emplace_back_aux<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > >(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >&&)
 W void std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::_M_insert_aux<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > >, std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >&&)
 W void std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::_M_range_insert<std::move_iterator<__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > > > >(__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > >, std::move_iterator<__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > > >, std::move_iterator<__gnu_cxx::__normal_iterator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >*, std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > > > >, std::forward_iterator_tag)
 W void std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::emplace_back<spvtools::ir::BasicBlock*&>(spvtools::ir::BasicBlock*&)
 W void std::vector<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >, std::allocator<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > > >::emplace_back<std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> > >(std::unique_ptr<spvtools::ir::BasicBlock, std::default_delete<spvtools::ir::BasicBlock> >&&)
 W void std::vector<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> >, std::allocator<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> > > >::_M_emplace_back_aux<std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> > >(std::unique_ptr<spvtools::ir::Function, std::default_delete<spvtools::ir::Function> >&&)
 W void std::vector<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >, std::allocator<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > > >::_M_emplace_back_aux<std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> > >(std::unique_ptr<spvtools::ir::Instruction, std::default_delete<spvtools::ir::Instruction> >&&)
 W void std::vector<std::unique_ptr<spvtools::opt::Pass, std::default_delete<spvtools::opt::Pass> >, std::allocator<std::unique_ptr<spvtools::opt::Pass, std::default_delete<spvtools::opt::Pass> > > >::_M_emplace_back_aux<std::unique_ptr<spvtools::opt::Pass, std::default_delete<spvtools::opt::Pass> > >(std::unique_ptr<spvtools::opt::Pass, std::default_delete<spvtools::opt::Pass> >&&)
 W void std::vector<std::vector<unsigned int, std::allocator<unsigned int> > const*, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > const*> >::_M_emplace_back_aux<std::vector<unsigned int, std::allocator<unsigned int> > const*>(std::vector<unsigned int, std::allocator<unsigned int> > const*&&)
 W void std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >::_M_emplace_back_aux<std::vector<unsigned int, std::allocator<unsigned int> > >(std::vector<unsigned int, std::allocator<unsigned int> >&&)
 W void std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > >::_M_emplace_back_aux<std::vector<unsigned long, std::allocator<unsigned long> > const&>(std::vector<unsigned long, std::allocator<unsigned long> > const&)
 W void std::vector<unsigned char, std::allocator<unsigned char> >::_M_range_insert<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, std::forward_iterator_tag)
 W void std::vector<unsigned char, std::allocator<unsigned char> >::_M_range_insert<char*>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, char*, char*, std::forward_iterator_tag)
 W void std::vector<unsigned char, std::allocator<unsigned char> >::_M_range_insert<unsigned char const*>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const*, unsigned char const*, std::forward_iterator_tag)
 W void std::vector<unsigned int, std::allocator<unsigned int> >::_M_assign_aux<unsigned int const*>(unsigned int const*, unsigned int const*, std::forward_iterator_tag)
 W void std::vector<unsigned int, std::allocator<unsigned int> >::_M_emplace_back_aux<unsigned int const&>(unsigned int const&)
 W void std::vector<unsigned int, std::allocator<unsigned int> >::_M_emplace_back_aux<unsigned int>(unsigned int&&)
 W void std::vector<unsigned int, std::allocator<unsigned int> >::_M_insert_aux<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)
 W void std::vector<unsigned int, std::allocator<unsigned int> >::_M_range_insert<unsigned int const*>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const*, unsigned int const*, std::forward_iterator_tag)
 W void std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)
 W void std::vector<unsigned long, std::allocator<unsigned long> >::_M_range_insert<__gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > > >(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, std::forward_iterator_tag)
 Warning
 _ITM_deregisterTMCloneTable
 _ITM_registerTMCloneTable
 _Jv_RegisterClasses
 _V_ComposeFileName
 _V_ExtractFileExtension
 _V_ExtractFilePath
 _V_FileBase
 _V_MakeAbsolutePath
 _V_SetExtension
 _V_StringAfterPrefix
 _V_StripExtension
 _V_StripLastDir
 _V_strcspn
 _V_strncat
 _V_strncmp
 _V_strncpy
 _V_strnicmp_fast
 _V_strnistr_fast
 __assert_fail@@GLIBC_2.2.5
 __ctype_b_loc@@GLIBC_2.3
 __ctype_toupper_loc@@GLIBC_2.3
 __cxa_atexit@@GLIBC_2.2.5
 __cxa_begin_catch@@CXXABI_1.3
 __cxa_call_unexpected@@CXXABI_1.3
 __cxa_end_catch@@CXXABI_1.3
 __cxa_finalize@@GLIBC_2.2.5
 __cxa_guard_abort@@CXXABI_1.3
 __cxa_guard_acquire@@CXXABI_1.3
 __cxa_guard_release@@CXXABI_1.3
 __cxa_pure_virtual@@CXXABI_1.3
 __cxa_rethrow@@CXXABI_1.3
 __cxa_throw_bad_array_new_length@@CXXABI_1.3.8
 __fprintf_chk@@GLIBC_2.3.4
 __gmon_start__
 __gxx_personality_v0@@CXXABI_1.3
 __isnanf@@GLIBC_2.2.5
 __longjmp_chk@@GLIBC_2.11
 __memcpy_chk@@GLIBC_2.3.4
 __once_proxy@@GLIBCXX_3.4.11
 __printf_chk@@GLIBC_2.3.4
 __pthread_key_create@@GLIBC_2.2.5
 __pthread_register_cancel@@GLIBC_2.3.3
 __pthread_unregister_cancel@@GLIBC_2.3.3
 __pthread_unwind_next@@GLIBC_2.3.3
 __sigsetjmp@@GLIBC_2.2.5
 __snprintf_chk@@GLIBC_2.3.4
 __sprintf_chk@@GLIBC_2.3.4
 __stack_chk_fail@@GLIBC_2.4
 __strcat_chk@@GLIBC_2.3.4
 __strcpy_chk@@GLIBC_2.3.4
 __tls_get_addr@@GLIBC_2.3
 __vsnprintf_chk@@GLIBC_2.3.4
 _setjmp@@GLIBC_2.2.5
 abort@@GLIBC_2.2.5
 acos@@GLIBC_2.2.5
 asin@@GLIBC_2.2.5
 atan2@@GLIBC_2.2.5
 atan@@GLIBC_2.2.5
 calloc@@GLIBC_2.2.5
 ceil@@GLIBC_2.2.5
 ceilf@@GLIBC_2.2.5
 cos@@GLIBC_2.2.5
 dl_iterate_phdr@@GLIBC_2.2.5
 dlopen@@GLIBC_2.2.5
 dlsym@@GLIBC_2.2.5
 exit@@GLIBC_2.2.5
 exp@@GLIBC_2.2.5
 floor@@GLIBC_2.2.5
 floorf@@GLIBC_2.2.5
 fprintf@@GLIBC_2.2.5
 fputc@@GLIBC_2.2.5
 fread@@GLIBC_2.2.5
 free@@GLIBC_2.2.5
 frexp@@GLIBC_2.2.5
 fwrite@@GLIBC_2.2.5
 g_Mathlib_GammaToLinearByteTable
 g_Tier1_BitWriteMasks
 g_Tier1_CRC32Table
 g_Tier1_CRC64Table
 g_Tier1_ExtraMasks
 g_VProfCurrentProfile
 g_pMemAlloc
 g_pThreadPool
 getenv@@GLIBC_2.2.5
 isalnum@@GLIBC_2.2.5
 isalpha@@GLIBC_2.2.5
 isspace@@GLIBC_2.2.5
 isxdigit@@GLIBC_2.2.5
 log@@GLIBC_2.2.5
 logf@@GLIBC_2.2.5
 longjmp@@GLIBC_2.2.5
 malloc@@GLIBC_2.2.5
 memchr@@GLIBC_2.2.5
 memcmp@@GLIBC_2.2.5
 memcpy@@GLIBC_2.14
 memmove@@GLIBC_2.2.5
 memset@@GLIBC_2.2.5
 modf@@GLIBC_2.2.5
 pow@@GLIBC_2.2.5
 pthread_getspecific@@GLIBC_2.2.5
 pthread_key_create@@GLIBC_2.2.5
 pthread_key_delete@@GLIBC_2.2.5
 pthread_mutex_destroy@@GLIBC_2.2.5
 pthread_mutex_init@@GLIBC_2.2.5
 pthread_mutex_lock@@GLIBC_2.2.5
 pthread_mutex_unlock@@GLIBC_2.2.5
 pthread_mutexattr_init@@GLIBC_2.2.5
 pthread_mutexattr_settype@@GLIBC_2.2.5
 pthread_once@@GLIBC_2.2.5
 pthread_setcancelstate@@GLIBC_2.2.5
 pthread_setcanceltype@@GLIBC_2.2.5
 pthread_setspecific@@GLIBC_2.2.5
 realloc@@GLIBC_2.2.5
 roundf@@GLIBC_2.2.5
 sin@@GLIBC_2.2.5
 snprintf@@GLIBC_2.2.5
 sqrt@@GLIBC_2.2.5
 sqrtf@@GLIBC_2.2.5
 sscanf@@GLIBC_2.2.5
 std::_Hash_bytes(void const*, unsigned long, unsigned long)@@CXXABI_1.3.5
 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@@GLIBCXX_3.4
 std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@@GLIBCXX_3.4
 std::_Rb_tree_increment(std::_Rb_tree_node_base*)@@GLIBCXX_3.4
 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@@GLIBCXX_3.4
 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@@GLIBCXX_3.4
 std::__basic_file<char>::~__basic_file()@@GLIBCXX_3.4
 std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)@@GLIBCXX_3.4.15
 std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)@@GLIBCXX_3.4.15
 std::__detail::_List_node_base::_M_unhook()@@GLIBCXX_3.4.15
 std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18
 std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const@@GLIBCXX_3.4.18
 std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)@@CXXABI_1.3.3
 std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)@@CXXABI_1.3.3
 std::__exception_ptr::exception_ptr::~exception_ptr()@@CXXABI_1.3.3
 std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)@@CXXABI_1.3.3
 std::__future_base::_Result_base::_Result_base()@@GLIBCXX_3.4.15
 std::__future_base::_Result_base::~_Result_base()@@GLIBCXX_3.4.15
 std::__future_base::_State_base::~_State_base()@@GLIBCXX_3.4.15
 std::__once_call@@GLIBCXX_3.4.11
 std::__once_callable@@GLIBCXX_3.4.11
 std::__throw_bad_alloc()@@GLIBCXX_3.4
 std::__throw_bad_cast()@@GLIBCXX_3.4
 std::__throw_bad_function_call()@@GLIBCXX_3.4.14
 std::__throw_future_error(int)@@GLIBCXX_3.4.14
 std::__throw_length_error(char const*)@@GLIBCXX_3.4
 std::__throw_logic_error(char const*)@@GLIBCXX_3.4
 std::__throw_out_of_range(char const*)@@GLIBCXX_3.4
 std::__throw_out_of_range_fmt(char const*, ...)@@GLIBCXX_3.4.20
 std::__throw_runtime_error(char const*)@@GLIBCXX_3.4
 std::__throw_system_error(int)@@GLIBCXX_3.4.11
 std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@@GLIBCXX_3.4
 std::basic_filebuf<char, std::char_traits<char> >::close()@@GLIBCXX_3.4
 std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@@GLIBCXX_3.4
 std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@@GLIBCXX_3.4
 std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@@GLIBCXX_3.4
 std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@@GLIBCXX_3.4
 std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@@GLIBCXX_3.4
 std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@@GLIBCXX_3.4
 std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9
 std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@@GLIBCXX_3.4
 std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@@GLIBCXX_3.4
 std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@@GLIBCXX_3.4
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@@GLIBCXX_3.4
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)@@GLIBCXX_3.4
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)@@GLIBCXX_3.4
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)@@GLIBCXX_3.4
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@@GLIBCXX_3.4
 std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@@GLIBCXX_3.4
 std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@@GLIBCXX_3.4
 std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@@GLIBCXX_3.4
 std::cerr@@GLIBCXX_3.4
 std::chrono::_V2::steady_clock::now()@@GLIBCXX_3.4.19
 std::condition_variable::condition_variable()@@GLIBCXX_3.4.11
 std::condition_variable::notify_all()@@GLIBCXX_3.4.11
 std::condition_variable::wait(std::unique_lock<std::mutex>&)@@GLIBCXX_3.4.11
 std::cout@@GLIBCXX_3.4
 std::ctype<char>::_M_widen_init() const@@GLIBCXX_3.4.11
 std::current_exception()@@CXXABI_1.3.3
 std::ios_base::Init::Init()@@GLIBCXX_3.4
 std::ios_base::Init::~Init()@@GLIBCXX_3.4
 std::ios_base::ios_base()@@GLIBCXX_3.4
 std::ios_base::~ios_base()@@GLIBCXX_3.4
 std::istream& std::istream::_M_extract<double>(double&)@@GLIBCXX_3.4.9
 std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9
 std::istream& std::istream::_M_extract<long>(long&)@@GLIBCXX_3.4.9
 std::istream& std::istream::_M_extract<unsigned int>(unsigned int&)@@GLIBCXX_3.4.9
 std::istream& std::istream::_M_extract<unsigned long>(unsigned long&)@@GLIBCXX_3.4.9
 std::istream::get()@@GLIBCXX_3.4
 std::istream::peek()@@GLIBCXX_3.4
 std::istream::unget()@@GLIBCXX_3.4
 std::locale::classic()@@GLIBCXX_3.4
 std::locale::locale()@@GLIBCXX_3.4
 std::locale::~locale()@@GLIBCXX_3.4
 std::ostream& std::ostream::_M_insert<bool>(bool)@@GLIBCXX_3.4.9
 std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9
 std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9
 std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@@GLIBCXX_3.4.9
 std::ostream::flush()@@GLIBCXX_3.4
 std::ostream::operator<<(int)@@GLIBCXX_3.4
 std::ostream::operator<<(short)@@GLIBCXX_3.4
 std::ostream::put(char)@@GLIBCXX_3.4
 std::ostream::write(char const*, long)@@GLIBCXX_3.4
 std::placeholders::_1@@GLIBCXX_3.4.15
 std::rethrow_exception(std::__exception_ptr::exception_ptr)@@CXXABI_1.3.3
 std::string::_M_leak_hard()@@GLIBCXX_3.4
 std::string::_M_mutate(unsigned long, unsigned long, unsigned long)@@GLIBCXX_3.4
 std::string::_Rep::_M_destroy(std::allocator<char> const&)@@GLIBCXX_3.4
 std::string::_Rep::_M_dispose(std::allocator<char> const&)@@GLIBCXX_3.4
 std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4
 std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4
 std::string::append(char const*)@@GLIBCXX_3.4
 std::string::append(char const*, unsigned long)@@GLIBCXX_3.4
 std::string::append(std::string const&)@@GLIBCXX_3.4
 std::string::append(unsigned long, char)@@GLIBCXX_3.4
 std::string::assign(char const*, unsigned long)@@GLIBCXX_3.4
 std::string::assign(std::string const&)@@GLIBCXX_3.4
 std::string::compare(char const*) const@@GLIBCXX_3.4
 std::string::erase(unsigned long, unsigned long)@@GLIBCXX_3.4
 std::string::find(char const*, unsigned long, unsigned long) const@@GLIBCXX_3.4
 std::string::find(char, unsigned long) const@@GLIBCXX_3.4
 std::string::insert(unsigned long, char const*)@@GLIBCXX_3.4
 std::string::insert(unsigned long, char const*, unsigned long)@@GLIBCXX_3.4
 std::string::push_back(char)@@GLIBCXX_3.4
 std::string::replace(unsigned long, unsigned long, char const*, unsigned long)@@GLIBCXX_3.4
 std::string::reserve(unsigned long)@@GLIBCXX_3.4
 std::string::swap(std::string&)@@GLIBCXX_3.4
 std::terminate()@@GLIBCXX_3.4
 std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)@@GLIBCXX_3.4.11
 std::thread::join()@@GLIBCXX_3.4.11
 stderr@@GLIBC_2.2.5
 stdout@@GLIBC_2.2.5
 stpcpy@@GLIBC_2.2.5
 strchr@@GLIBC_2.2.5
 strcmp@@GLIBC_2.2.5
 strcpy@@GLIBC_2.2.5
 strdup@@GLIBC_2.2.5
 strlen@@GLIBC_2.2.5
 strncat@@GLIBC_2.2.5
 strncmp@@GLIBC_2.2.5
 strncpy@@GLIBC_2.2.5
 strnlen@@GLIBC_2.2.5
 strstr@@GLIBC_2.2.5
 strtod@@GLIBC_2.2.5
 strtol@@GLIBC_2.2.5
 strtoll@@GLIBC_2.2.5
 strtoul@@GLIBC_2.2.5
 strtoull@@GLIBC_2.2.5
 tan@@GLIBC_2.2.5
 tolower@@GLIBC_2.2.5
 toupper@@GLIBC_2.2.5
 trunc@@GLIBC_2.2.5
 typeinfo for CThreadSyncObject
 typeinfo for std::__future_base::_Result_base@@GLIBCXX_3.4.15
 typeinfo for std::__future_base::_State_base@@GLIBCXX_3.4.15
 vsnprintf@@GLIBC_2.2.5
 vtable for __cxxabiv1::__class_type_info@@CXXABI_1.3
 vtable for __cxxabiv1::__pointer_type_info@@CXXABI_1.3
 vtable for __cxxabiv1::__si_class_type_info@@CXXABI_1.3
 vtable for __cxxabiv1::__vmi_class_type_info@@CXXABI_1.3
 vtable for std::__future_base::_State_base@@GLIBCXX_3.4.15
 vtable for std::basic_filebuf<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 vtable for std::basic_ofstream<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 vtable for std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4
 wcscmp@@GLIBC_2.2.5
 wcslen@@GLIBC_2.2.5
 xcb_connect
